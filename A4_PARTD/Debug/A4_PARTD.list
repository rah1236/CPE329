
A4_PARTD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001874  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001a20  08001a20  00002a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a98  08001a98  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a98  08001a98  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a98  08001a98  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a98  08001a98  00002a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a9c  08001a9c  00002a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001aa0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001aac  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001aac  00003030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050e0  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001153  00000000  00000000  0000811c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  00009270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000454  00000000  00000000  00009860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e97  00000000  00000000  00009cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e53  00000000  00000000  00031b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f21da  00000000  00000000  0003799e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015ec  00000000  00000000  00129bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0012b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001a08 	.word	0x08001a08

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001a08 	.word	0x08001a08

080001ec <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80001f4:	4b11      	ldr	r3, [pc, #68]	@ (800023c <delay_us+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a11      	ldr	r2, [pc, #68]	@ (8000240 <delay_us+0x54>)
 80001fa:	fba2 2303 	umull	r2, r3, r2, r3
 80001fe:	0c9b      	lsrs	r3, r3, #18
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	fb02 f303 	mul.w	r3, r2, r3
 8000206:	4a0f      	ldr	r2, [pc, #60]	@ (8000244 <delay_us+0x58>)
 8000208:	3b01      	subs	r3, #1
 800020a:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 800020c:	4b0d      	ldr	r3, [pc, #52]	@ (8000244 <delay_us+0x58>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 8000212:	4b0c      	ldr	r3, [pc, #48]	@ (8000244 <delay_us+0x58>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a0b      	ldr	r2, [pc, #44]	@ (8000244 <delay_us+0x58>)
 8000218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800021c:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 800021e:	bf00      	nop
 8000220:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <delay_us+0x58>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <delay_us+0x34>
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000000 	.word	0x20000000
 8000240:	431bde83 	.word	0x431bde83
 8000244:	e000e010 	.word	0xe000e010

08000248 <Lcd_pulse_ENA>:


void Lcd_pulse_ENA( void )  {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
// ENAble line sends command on falling edge
// set to restore default then clear to trigger
   LCD_PORT->ODR   |= ( LCD_EN );         	// ENABLE = HI
 800024c:	4b09      	ldr	r3, [pc, #36]	@ (8000274 <Lcd_pulse_ENA+0x2c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a08      	ldr	r2, [pc, #32]	@ (8000274 <Lcd_pulse_ENA+0x2c>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6153      	str	r3, [r2, #20]
   delay_us( DELAY );                         // TDDR > 320 ns
 8000258:	2032      	movs	r0, #50	@ 0x32
 800025a:	f7ff ffc7 	bl	80001ec <delay_us>
   LCD_PORT->ODR   &= ~( LCD_EN );        // ENABLE = LOW
 800025e:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <Lcd_pulse_ENA+0x2c>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	4a04      	ldr	r2, [pc, #16]	@ (8000274 <Lcd_pulse_ENA+0x2c>)
 8000264:	f023 0302 	bic.w	r3, r3, #2
 8000268:	6153      	str	r3, [r2, #20]
   delay_us( DELAY );                         // low values flakey, see A3:p.1
 800026a:	2032      	movs	r0, #50	@ 0x32
 800026c:	f7ff ffbe 	bl	80001ec <delay_us>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	48000c00 	.word	0x48000c00

08000278 <Lcd_4b_command>:

void Lcd_4b_command( uint8_t command )  {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
// LCD command using high nibble only - used for 'wake-up' 0x30 commands
   LCD_PORT->ODR   &= ~( LCD_DATA_BITS ); 	// clear DATA bits
 8000282:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <Lcd_4b_command+0x3c>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a0b      	ldr	r2, [pc, #44]	@ (80002b4 <Lcd_4b_command+0x3c>)
 8000288:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 800028c:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( command >> 4 ) << 3;   // DATA = command
 800028e:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <Lcd_4b_command+0x3c>)
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	091b      	lsrs	r3, r3, #4
 8000296:	b2db      	uxtb	r3, r3
 8000298:	00db      	lsls	r3, r3, #3
 800029a:	4906      	ldr	r1, [pc, #24]	@ (80002b4 <Lcd_4b_command+0x3c>)
 800029c:	4313      	orrs	r3, r2
 800029e:	614b      	str	r3, [r1, #20]
   delay_us( DELAY );
 80002a0:	2032      	movs	r0, #50	@ 0x32
 80002a2:	f7ff ffa3 	bl	80001ec <delay_us>
   Lcd_pulse_ENA( );
 80002a6:	f7ff ffcf 	bl	8000248 <Lcd_pulse_ENA>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	48000c00 	.word	0x48000c00

080002b8 <Lcd_command>:

void Lcd_command( uint8_t command )  {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
// send command to LCD in 4-bit instruction mode
// HIGH nibble then LOW nibble, timing sensitive
   LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 80002c2:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <Lcd_command+0x68>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a16      	ldr	r2, [pc, #88]	@ (8000320 <Lcd_command+0x68>)
 80002c8:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 80002cc:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( (command>>4)<<3 & LCD_DATA_BITS ); // HIGH shifted low
 80002ce:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <Lcd_command+0x68>)
 80002d0:	695a      	ldr	r2, [r3, #20]
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	091b      	lsrs	r3, r3, #4
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	00db      	lsls	r3, r3, #3
 80002da:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80002de:	4910      	ldr	r1, [pc, #64]	@ (8000320 <Lcd_command+0x68>)
 80002e0:	4313      	orrs	r3, r2
 80002e2:	614b      	str	r3, [r1, #20]
   delay_us( DELAY );
 80002e4:	2032      	movs	r0, #50	@ 0x32
 80002e6:	f7ff ff81 	bl	80001ec <delay_us>
   Lcd_pulse_ENA( );                                    // latch HIGH NIBBLE
 80002ea:	f7ff ffad 	bl	8000248 <Lcd_pulse_ENA>

   LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <Lcd_command+0x68>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000320 <Lcd_command+0x68>)
 80002f4:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 80002f8:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( command<<3 & LCD_DATA_BITS );      // LOW nibble
 80002fa:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <Lcd_command+0x68>)
 80002fc:	695a      	ldr	r2, [r3, #20]
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8000306:	4906      	ldr	r1, [pc, #24]	@ (8000320 <Lcd_command+0x68>)
 8000308:	4313      	orrs	r3, r2
 800030a:	614b      	str	r3, [r1, #20]
   delay_us( DELAY );
 800030c:	2032      	movs	r0, #50	@ 0x32
 800030e:	f7ff ff6d 	bl	80001ec <delay_us>
   Lcd_pulse_ENA( );                                    // latch LOW NIBBLE
 8000312:	f7ff ff99 	bl	8000248 <Lcd_pulse_ENA>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	48000c00 	.word	0x48000c00

08000324 <Lcd_write_char>:

void Lcd_write_char( uint8_t letter )  {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
// calls LCD_command() w/char data; assumes all ctrl bits set LO in LCD_init()
   LCD_PORT->ODR   |= (LCD_RS);       // RS = HI for data to address
 800032e:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <Lcd_write_char+0x38>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a0a      	ldr	r2, [pc, #40]	@ (800035c <Lcd_write_char+0x38>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6153      	str	r3, [r2, #20]
   delay_us( DELAY );
 800033a:	2032      	movs	r0, #50	@ 0x32
 800033c:	f7ff ff56 	bl	80001ec <delay_us>
   Lcd_command( letter );             // character to print
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ffb8 	bl	80002b8 <Lcd_command>
   LCD_PORT->ODR   &= ~(LCD_RS);      // RS = LO
 8000348:	4b04      	ldr	r3, [pc, #16]	@ (800035c <Lcd_write_char+0x38>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a03      	ldr	r2, [pc, #12]	@ (800035c <Lcd_write_char+0x38>)
 800034e:	f023 0304 	bic.w	r3, r3, #4
 8000352:	6153      	str	r3, [r2, #20]
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	48000c00 	.word	0x48000c00

08000360 <Lcd_write_string>:


void Lcd_write_string( char *text , uint8_t row){
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
 * row accepts either a 0 for first row or 1 for the second row
 *
 *
 */

	if (row == 0){
 800036c:	78fb      	ldrb	r3, [r7, #3]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d103      	bne.n	800037a <Lcd_write_string+0x1a>
		Lcd_command(0x80); // Position cursor at row 1
 8000372:	2080      	movs	r0, #128	@ 0x80
 8000374:	f7ff ffa0 	bl	80002b8 <Lcd_command>
 8000378:	e002      	b.n	8000380 <Lcd_write_string+0x20>
	}
	else {
		Lcd_command(0xC0); //Position cursor at row 2
 800037a:	20c0      	movs	r0, #192	@ 0xc0
 800037c:	f7ff ff9c 	bl	80002b8 <Lcd_command>
	}
	for (int idx = 0; idx < 17; idx++){
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	e013      	b.n	80003ae <Lcd_write_string+0x4e>
		//If end of string
		if (text[idx] == '\0'){
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	4413      	add	r3, r2
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d103      	bne.n	800039a <Lcd_write_string+0x3a>
			// Fill spaces on anything thats not in the string
			Lcd_write_char(' ');
 8000392:	2020      	movs	r0, #32
 8000394:	f7ff ffc6 	bl	8000324 <Lcd_write_char>
 8000398:	e006      	b.n	80003a8 <Lcd_write_string+0x48>
		}
		else{
			// Otherwise write the character in the string
			Lcd_write_char(text[idx]);
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	4413      	add	r3, r2
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ffbe 	bl	8000324 <Lcd_write_char>
	for (int idx = 0; idx < 17; idx++){
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3301      	adds	r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b10      	cmp	r3, #16
 80003b2:	dde8      	ble.n	8000386 <Lcd_write_string+0x26>
		}
	}
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <Lcd_backlight_on>:

void Lcd_backlight_on(void){
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	// Enable backlight on the LCD
	 LCD_PORT->ODR |= LCD_BL;
 80003c4:	4b05      	ldr	r3, [pc, #20]	@ (80003dc <Lcd_backlight_on+0x1c>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a04      	ldr	r2, [pc, #16]	@ (80003dc <Lcd_backlight_on+0x1c>)
 80003ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ce:	6153      	str	r3, [r2, #20]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	48000c00 	.word	0x48000c00

080003e0 <Lcd_Init>:
	// Disable backlight on the LCD
	 LCD_PORT->ODR &= ~LCD_BL;
}

// Enable GPIO pins and initialize the LCD display
void Lcd_Init(void){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
	// configure GPIO pins PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7 for:
	// output mode, push-pull, no pull up or pull down, high speed
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIODEN);
 80003e6:	4b39      	ldr	r3, [pc, #228]	@ (80004cc <Lcd_Init+0xec>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ea:	4a38      	ldr	r2, [pc, #224]	@ (80004cc <Lcd_Init+0xec>)
 80003ec:	f043 0308 	orr.w	r3, r3, #8
 80003f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOD->MODER   &= ~(GPIO_MODER_MODE0
 80003f2:	4b37      	ldr	r3, [pc, #220]	@ (80004d0 <Lcd_Init+0xf0>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a36      	ldr	r2, [pc, #216]	@ (80004d0 <Lcd_Init+0xf0>)
 80003f8:	0c1b      	lsrs	r3, r3, #16
 80003fa:	041b      	lsls	r3, r3, #16
 80003fc:	6013      	str	r3, [r2, #0]
							| GPIO_MODER_MODE4
							| GPIO_MODER_MODE5
							| GPIO_MODER_MODE6
							| GPIO_MODER_MODE7);

	GPIOD->MODER   |=  (GPIO_MODER_MODE0_0
 80003fe:	4b34      	ldr	r3, [pc, #208]	@ (80004d0 <Lcd_Init+0xf0>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a33      	ldr	r2, [pc, #204]	@ (80004d0 <Lcd_Init+0xf0>)
 8000404:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000408:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 800040c:	6013      	str	r3, [r2, #0]
							| GPIO_MODER_MODE4_0
							| GPIO_MODER_MODE5_0
							| GPIO_MODER_MODE6_0
							| GPIO_MODER_MODE7_0);

	GPIOD->OTYPER  &= ~(GPIO_OTYPER_OT0
 800040e:	4b30      	ldr	r3, [pc, #192]	@ (80004d0 <Lcd_Init+0xf0>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	4a2f      	ldr	r2, [pc, #188]	@ (80004d0 <Lcd_Init+0xf0>)
 8000414:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000418:	6053      	str	r3, [r2, #4]
							| GPIO_OTYPER_OT4
							| GPIO_OTYPER_OT5
							| GPIO_OTYPER_OT6
							| GPIO_OTYPER_OT7);

	GPIOD->PUPDR   &= ~(GPIO_PUPDR_PUPD0
 800041a:	4b2d      	ldr	r3, [pc, #180]	@ (80004d0 <Lcd_Init+0xf0>)
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	4a2c      	ldr	r2, [pc, #176]	@ (80004d0 <Lcd_Init+0xf0>)
 8000420:	0c1b      	lsrs	r3, r3, #16
 8000422:	041b      	lsls	r3, r3, #16
 8000424:	60d3      	str	r3, [r2, #12]
							| GPIO_PUPDR_PUPD4
							| GPIO_PUPDR_PUPD5
							| GPIO_PUPDR_PUPD6
							| GPIO_PUPDR_PUPD7);

	GPIOD->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 8000426:	4b2a      	ldr	r3, [pc, #168]	@ (80004d0 <Lcd_Init+0xf0>)
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	4a29      	ldr	r2, [pc, #164]	@ (80004d0 <Lcd_Init+0xf0>)
 800042c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8000430:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8000434:	6093      	str	r3, [r2, #8]
							  (3 << GPIO_OSPEEDR_OSPEED5_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED6_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED7_Pos) );

	 // preset PC0 thru PC7 to 0
	GPIOD->BRR |= (GPIO_PIN_0
 8000436:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <Lcd_Init+0xf0>)
 8000438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800043a:	4a25      	ldr	r2, [pc, #148]	@ (80004d0 <Lcd_Init+0xf0>)
 800043c:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 8000440:	6293      	str	r3, [r2, #40]	@ 0x28
					 | GPIO_PIN_5
					 | GPIO_PIN_6
					 | GPIO_PIN_7);

	//Turn on Backlight
	GPIOD->BSRR |= GPIO_PIN_7;
 8000442:	4b23      	ldr	r3, [pc, #140]	@ (80004d0 <Lcd_Init+0xf0>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a22      	ldr	r2, [pc, #136]	@ (80004d0 <Lcd_Init+0xf0>)
 8000448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800044c:	6193      	str	r3, [r2, #24]



   delay_us( 40000 );                     // power-up wait 40 ms
 800044e:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8000452:	f7ff fecb 	bl	80001ec <delay_us>
   for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 8000456:	2300      	movs	r3, #0
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	e008      	b.n	800046e <Lcd_Init+0x8e>
      Lcd_4b_command( 0x30 );             // HI 4b of 8b cmd, low nibble = X
 800045c:	2030      	movs	r0, #48	@ 0x30
 800045e:	f7ff ff0b 	bl	8000278 <Lcd_4b_command>
      delay_us( 200 );
 8000462:	20c8      	movs	r0, #200	@ 0xc8
 8000464:	f7ff fec2 	bl	80001ec <delay_us>
   for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3301      	adds	r3, #1
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2b02      	cmp	r3, #2
 8000472:	ddf3      	ble.n	800045c <Lcd_Init+0x7c>
   }
   Lcd_4b_command( 0x20 ); // fcn set #4: 4b cmd set 4b mode - next 0x28:2-line
 8000474:	2020      	movs	r0, #32
 8000476:	f7ff feff 	bl	8000278 <Lcd_4b_command>
   delay_us( 40 );         // remainder of LCD init removed - see LCD datasheets
 800047a:	2028      	movs	r0, #40	@ 0x28
 800047c:	f7ff feb6 	bl	80001ec <delay_us>


   Lcd_command( 0x28 );
 8000480:	2028      	movs	r0, #40	@ 0x28
 8000482:	f7ff ff19 	bl	80002b8 <Lcd_command>
   delay_us( 40 );
 8000486:	2028      	movs	r0, #40	@ 0x28
 8000488:	f7ff feb0 	bl	80001ec <delay_us>
   Lcd_command( 0x10 ); //Set cursor
 800048c:	2010      	movs	r0, #16
 800048e:	f7ff ff13 	bl	80002b8 <Lcd_command>
   delay_us( 40 );
 8000492:	2028      	movs	r0, #40	@ 0x28
 8000494:	f7ff feaa 	bl	80001ec <delay_us>
   Lcd_command( 0x0D ); //Display ON; Blinking cursor
 8000498:	200d      	movs	r0, #13
 800049a:	f7ff ff0d 	bl	80002b8 <Lcd_command>
   delay_us( 40 );
 800049e:	2028      	movs	r0, #40	@ 0x28
 80004a0:	f7ff fea4 	bl	80001ec <delay_us>
   Lcd_command( 0x06 ); //Entry mode set
 80004a4:	2006      	movs	r0, #6
 80004a6:	f7ff ff07 	bl	80002b8 <Lcd_command>
   delay_us( 40 );
 80004aa:	2028      	movs	r0, #40	@ 0x28
 80004ac:	f7ff fe9e 	bl	80001ec <delay_us>

   Lcd_backlight_on();
 80004b0:	f7ff ff86 	bl	80003c0 <Lcd_backlight_on>
   Lcd_write_string(" " , 0);
 80004b4:	2100      	movs	r1, #0
 80004b6:	4807      	ldr	r0, [pc, #28]	@ (80004d4 <Lcd_Init+0xf4>)
 80004b8:	f7ff ff52 	bl	8000360 <Lcd_write_string>
   Lcd_write_string(" " , 1);
 80004bc:	2101      	movs	r1, #1
 80004be:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <Lcd_Init+0xf4>)
 80004c0:	f7ff ff4e 	bl	8000360 <Lcd_write_string>

}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48000c00 	.word	0x48000c00
 80004d4:	08001a20 	.word	0x08001a20

080004d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	db0b      	blt.n	8000502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f003 021f 	and.w	r2, r3, #31
 80004f0:	4907      	ldr	r1, [pc, #28]	@ (8000510 <__NVIC_EnableIRQ+0x38>)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	095b      	lsrs	r3, r3, #5
 80004f8:	2001      	movs	r0, #1
 80004fa:	fa00 f202 	lsl.w	r2, r0, r2
 80004fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000e100 	.word	0xe000e100

08000514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000524:	2b00      	cmp	r3, #0
 8000526:	db0a      	blt.n	800053e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	490c      	ldr	r1, [pc, #48]	@ (8000560 <__NVIC_SetPriority+0x4c>)
 800052e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000532:	0112      	lsls	r2, r2, #4
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	440b      	add	r3, r1
 8000538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800053c:	e00a      	b.n	8000554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4908      	ldr	r1, [pc, #32]	@ (8000564 <__NVIC_SetPriority+0x50>)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	f003 030f 	and.w	r3, r3, #15
 800054a:	3b04      	subs	r3, #4
 800054c:	0112      	lsls	r2, r2, #4
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	440b      	add	r3, r1
 8000552:	761a      	strb	r2, [r3, #24]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000e100 	.word	0xe000e100
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <main>:

uint8_t button_flag;

void SystemClock_Config(void);

int main(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
  uint32_t time_of_light_up = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
  uint32_t time_of_button_press = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
  uint8_t state = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800057a:	b662      	cpsie	i
}
 800057c:	bf00      	nop
  __enable_irq();
  HAL_Init();
 800057e:	f000 fa52 	bl	8000a26 <HAL_Init>
  SystemClock_Config();
 8000582:	f000 f971 	bl	8000868 <SystemClock_Config>
  setup_ext_interrupt();
 8000586:	f000 f8ed 	bl	8000764 <setup_ext_interrupt>
  setup_rng();
 800058a:	f000 f8a7 	bl	80006dc <setup_rng>
  setup_gpio();
 800058e:	f000 f927 	bl	80007e0 <setup_gpio>
  Lcd_Init();
 8000592:	f7ff ff25 	bl	80003e0 <Lcd_Init>

  Lcd_write_string("EE 329 A4 REACT", 0);
 8000596:	2100      	movs	r1, #0
 8000598:	4813      	ldr	r0, [pc, #76]	@ (80005e8 <main+0x80>)
 800059a:	f7ff fee1 	bl	8000360 <Lcd_write_string>
  Lcd_write_string("PUSH SW TO TRIG", 1);
 800059e:	2101      	movs	r1, #1
 80005a0:	4812      	ldr	r0, [pc, #72]	@ (80005ec <main+0x84>)
 80005a2:	f7ff fedd 	bl	8000360 <Lcd_write_string>


  //25 bits at 4MHz is equal to a maximum time delay of 8 seconds
  uint32_t time_delay = get_random_number() >> 32-25;
 80005a6:	f000 f8b1 	bl	800070c <get_random_number>
 80005aa:	4603      	mov	r3, r0
 80005ac:	09db      	lsrs	r3, r3, #7
 80005ae:	603b      	str	r3, [r7, #0]

  setup_TIM2(time_delay);
 80005b0:	6838      	ldr	r0, [r7, #0]
 80005b2:	f000 f821 	bl	80005f8 <setup_TIM2>

  while (1)
  {
	  switch(state){
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <main+0x5a>
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d00b      	beq.n	80005d8 <main+0x70>
 80005c0:	e7f9      	b.n	80005b6 <main+0x4e>
	  case 0:
		  if (button_flag == 1){
 80005c2:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <main+0x88>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d10b      	bne.n	80005e2 <main+0x7a>
			  state++;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	3301      	adds	r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]
			  button_flag = 0;
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <main+0x88>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80005d6:	e004      	b.n	80005e2 <main+0x7a>
	  case 1:
		  Lcd_write_string("TIME = N.MMM s  ", 1);
 80005d8:	2101      	movs	r1, #1
 80005da:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <main+0x8c>)
 80005dc:	f7ff fec0 	bl	8000360 <Lcd_write_string>
		  break;
 80005e0:	e000      	b.n	80005e4 <main+0x7c>
		  break;
 80005e2:	bf00      	nop
	  switch(state){
 80005e4:	e7e7      	b.n	80005b6 <main+0x4e>
 80005e6:	bf00      	nop
 80005e8:	08001a24 	.word	0x08001a24
 80005ec:	08001a34 	.word	0x08001a34
 80005f0:	20000028 	.word	0x20000028
 80005f4:	08001a44 	.word	0x08001a44

080005f8 <setup_TIM2>:
int get_user_button_state(void){
	return (GPIOC->IDR >> 13);
}


void setup_TIM2( int iDutyCycle ) {
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
   RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;           // enable clock for TIM2
 8000600:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <setup_TIM2+0x74>)
 8000602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000604:	4a19      	ldr	r2, [pc, #100]	@ (800066c <setup_TIM2+0x74>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6593      	str	r3, [r2, #88]	@ 0x58
   TIM2->DIER |= (TIM_DIER_CC1IE | TIM_DIER_UIE);  // enable event gen, rcv CCR1
 800060c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000616:	f043 0303 	orr.w	r3, r3, #3
 800061a:	60d3      	str	r3, [r2, #12]
   TIM2->ARR = 0xFFFFFFFF;                             // ARR = T = counts @4MHz
 800061c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000620:	f04f 32ff 	mov.w	r2, #4294967295
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
   TIM2->CCR1 = iDutyCycle;                        // ticks for duty cycle
 8000626:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6353      	str	r3, [r2, #52]	@ 0x34
   TIM2->SR &= ~(TIM_SR_CC1IF | TIM_SR_UIF);       // clr IRQ flag in status reg
 800062e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000632:	691b      	ldr	r3, [r3, #16]
 8000634:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000638:	f023 0303 	bic.w	r3, r3, #3
 800063c:	6113      	str	r3, [r2, #16]
   NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));     // set NVIC interrupt: 0x1F
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <setup_TIM2+0x78>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a0b      	ldr	r2, [pc, #44]	@ (8000670 <setup_TIM2+0x78>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000648:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800064a:	b662      	cpsie	i
}
 800064c:	bf00      	nop
   __enable_irq();                                 // global IRQ enable
   TIM2->CR1 |= TIM_CR1_CEN;                       // start TIM2 CR1
 800064e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6013      	str	r3, [r2, #0]
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000
 8000670:	e000e100 	.word	0xe000e100

08000674 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
   if (TIM2->SR & TIM_SR_CC1IF) {      // triggered by CCR1 event ...
 8000678:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	2b00      	cmp	r3, #0
 8000684:	d00d      	beq.n	80006a2 <TIM2_IRQHandler+0x2e>
      TIM2->SR &= ~(TIM_SR_CC1IF);     // manage the flag
 8000686:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000690:	f023 0302 	bic.w	r3, r3, #2
 8000694:	6113      	str	r3, [r2, #16]
      GPIOB->ODR |= GPIO_PIN_7;                                // <-- manage GPIO pin here
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <TIM2_IRQHandler+0x64>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a0f      	ldr	r2, [pc, #60]	@ (80006d8 <TIM2_IRQHandler+0x64>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a0:	6153      	str	r3, [r2, #20]
//      time_of_light_up = TIM2->CNT;
   }
   if (TIM2->SR & TIM_SR_UIF) {        // triggered by ARR event ...
 80006a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00d      	beq.n	80006cc <TIM2_IRQHandler+0x58>
      TIM2->SR &= ~(TIM_SR_UIF);       // manage the flag
 80006b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006ba:	f023 0301 	bic.w	r3, r3, #1
 80006be:	6113      	str	r3, [r2, #16]
      GPIOB->ODR &= ~GPIO_PIN_7;                                // <-- manage GPIO pin here
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <TIM2_IRQHandler+0x64>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <TIM2_IRQHandler+0x64>)
 80006c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006ca:	6153      	str	r3, [r2, #20]
   }
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	48000400 	.word	0x48000400

080006dc <setup_rng>:

// Does what it says in the name
void setup_rng(void){
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;
 80006e0:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <setup_rng+0x28>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e4:	4a07      	ldr	r2, [pc, #28]	@ (8000704 <setup_rng+0x28>)
 80006e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RNG->CR |= (RNG_CR_RNGEN | RNG_CR_IE);
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <setup_rng+0x2c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a05      	ldr	r2, [pc, #20]	@ (8000708 <setup_rng+0x2c>)
 80006f2:	f043 030c 	orr.w	r3, r3, #12
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000
 8000708:	50060800 	.word	0x50060800

0800070c <get_random_number>:

uint32_t get_random_number(void){
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0

	uint32_t random_number;

	//Get error bits of RNG Status Register
	uint8_t ceis_bit_value = ((RNG->SR & RNG_SR_CEIS_Msk) >> RNG_SR_CEIS_Pos);
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <get_random_number+0x54>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	095b      	lsrs	r3, r3, #5
 8000718:	b2db      	uxtb	r3, r3
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	70fb      	strb	r3, [r7, #3]
	uint8_t seis_bit_value = ((RNG->SR & RNG_SR_SEIS_Msk) >> RNG_SR_SEIS_Pos);
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <get_random_number+0x54>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	099b      	lsrs	r3, r3, #6
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	70bb      	strb	r3, [r7, #2]

	//and then get data ready bit
	uint8_t data_ready_bit_value = ((RNG->SR & RNG_SR_DRDY_Msk) >> RNG_SR_DRDY_Pos);
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <get_random_number+0x54>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	707b      	strb	r3, [r7, #1]

	//Check the status for no errors
	if ( (ceis_bit_value + seis_bit_value == 0) && (data_ready_bit_value == 1) ) {
 800073a:	78fa      	ldrb	r2, [r7, #3]
 800073c:	78bb      	ldrb	r3, [r7, #2]
 800073e:	4413      	add	r3, r2
 8000740:	2b00      	cmp	r3, #0
 8000742:	d105      	bne.n	8000750 <get_random_number+0x44>
 8000744:	787b      	ldrb	r3, [r7, #1]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d102      	bne.n	8000750 <get_random_number+0x44>
		//Read the RNG data register
		random_number = RNG->DR;
 800074a:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <get_random_number+0x54>)
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	607b      	str	r3, [r7, #4]
	}
	//Return the number found in the data register
	//If this function returns all 0's, something is wrong with the RNG!
	return(random_number);
 8000750:	687b      	ldr	r3, [r7, #4]
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	50060800 	.word	0x50060800

08000764 <setup_ext_interrupt>:

//Setting up external interrupt on user button
void setup_ext_interrupt(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

		//Tell the syscfg that we want to use pin C13 for our interrupt
		SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <setup_ext_interrupt+0x40>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <setup_ext_interrupt+0x40>)
 800076e:	f043 0320 	orr.w	r3, r3, #32
 8000772:	6153      	str	r3, [r2, #20]

		// Set EXTI13 (external interrupt) to rising edge trigger
	    EXTI->RTSR1 |= EXTI_RTSR1_RT13;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <setup_ext_interrupt+0x44>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	4a0b      	ldr	r2, [pc, #44]	@ (80007a8 <setup_ext_interrupt+0x44>)
 800077a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800077e:	6093      	str	r3, [r2, #8]

	    // Enable interrupt on EXTI13
	    EXTI->IMR1 |= EXTI_IMR1_IM13;
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <setup_ext_interrupt+0x44>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a08      	ldr	r2, [pc, #32]	@ (80007a8 <setup_ext_interrupt+0x44>)
 8000786:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800078a:	6013      	str	r3, [r2, #0]

	    // Enable EXTI13 interrupt in NVIC
	    NVIC_SetPriority(EXTI15_10_IRQn, 5); // Set priority (adjust as needed)
 800078c:	2105      	movs	r1, #5
 800078e:	2028      	movs	r0, #40	@ 0x28
 8000790:	f7ff fec0 	bl	8000514 <__NVIC_SetPriority>
	    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000794:	2028      	movs	r0, #40	@ 0x28
 8000796:	f7ff fe9f 	bl	80004d8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800079a:	b662      	cpsie	i
}
 800079c:	bf00      	nop
	    __enable_irq(); // global IRQ enable

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40010000 	.word	0x40010000
 80007a8:	40010400 	.word	0x40010400

080007ac <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
    if (EXTI->PR1 & EXTI_PR1_PIF13) {
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <EXTI15_10_IRQHandler+0x2c>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d008      	beq.n	80007ce <EXTI15_10_IRQHandler+0x22>
        // Clear the pending interrupt flag
        EXTI->PR1 &= ~(EXTI_PR1_PIF13);
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <EXTI15_10_IRQHandler+0x2c>)
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	4a05      	ldr	r2, [pc, #20]	@ (80007d8 <EXTI15_10_IRQHandler+0x2c>)
 80007c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80007c6:	6153      	str	r3, [r2, #20]
        button_flag = 1;
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <EXTI15_10_IRQHandler+0x30>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
    }
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40010400 	.word	0x40010400
 80007dc:	20000028 	.word	0x20000028

080007e0 <setup_gpio>:

void setup_gpio(void){
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
		// configure GPIO pins PC13 for the user button
		// input mode, with pull down
		RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <setup_gpio+0x7c>)
 80007e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e8:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <setup_gpio+0x7c>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
		GPIOC->MODER   &= ~(GPIO_MODER_MODE13);
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <setup_gpio+0x80>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000860 <setup_gpio+0x80>)
 80007f6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80007fa:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR   |= (GPIO_PUPDR_PUPD13_1);
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <setup_gpio+0x80>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	4a17      	ldr	r2, [pc, #92]	@ (8000860 <setup_gpio+0x80>)
 8000802:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000806:	60d3      	str	r3, [r2, #12]

		// configure GPIO pins PB7 and PB8 for:
		// output mode, no pull up or down, high speed,
		RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN);
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <setup_gpio+0x7c>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080c:	4a13      	ldr	r2, [pc, #76]	@ (800085c <setup_gpio+0x7c>)
 800080e:	f043 0302 	orr.w	r3, r3, #2
 8000812:	64d3      	str	r3, [r2, #76]	@ 0x4c
		GPIOB->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <setup_gpio+0x84>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a12      	ldr	r2, [pc, #72]	@ (8000864 <setup_gpio+0x84>)
 800081a:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 800081e:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= (GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0);
 8000820:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <setup_gpio+0x84>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0f      	ldr	r2, [pc, #60]	@ (8000864 <setup_gpio+0x84>)
 8000826:	f443 33a0 	orr.w	r3, r3, #81920	@ 0x14000
 800082a:	6013      	str	r3, [r2, #0]
		GPIOB->OTYPER  &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);
 800082c:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <setup_gpio+0x84>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <setup_gpio+0x84>)
 8000832:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8000836:	6053      	str	r3, [r2, #4]
		GPIOB->PUPDR   &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <setup_gpio+0x84>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4a09      	ldr	r2, [pc, #36]	@ (8000864 <setup_gpio+0x84>)
 800083e:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8000842:	60d3      	str	r3, [r2, #12]
		GPIOB->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED7_Pos) | (3 << GPIO_OSPEEDR_OSPEED8_Pos));
 8000844:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <setup_gpio+0x84>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	4a06      	ldr	r2, [pc, #24]	@ (8000864 <setup_gpio+0x84>)
 800084a:	f443 3370 	orr.w	r3, r3, #245760	@ 0x3c000
 800084e:	6093      	str	r3, [r2, #8]

}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000
 8000860:	48000800 	.word	0x48000800
 8000864:	48000400 	.word	0x48000400

08000868 <SystemClock_Config>:
    return ch;
}


void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b096      	sub	sp, #88	@ 0x58
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2244      	movs	r2, #68	@ 0x44
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f001 f89a 	bl	80019b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800088a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800088e:	f000 fa33 	bl	8000cf8 <HAL_PWREx_ControlVoltageScaling>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000898:	f000 f82f 	bl	80008fa <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 800089c:	2330      	movs	r3, #48	@ 0x30
 800089e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008ac:	2360      	movs	r3, #96	@ 0x60
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fa73 	bl	8000da4 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80008c4:	f000 f819 	bl	80008fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fe78 	bl	80015d8 <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008ee:	f000 f804 	bl	80008fa <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3758      	adds	r7, #88	@ 0x58
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <Error_Handler>:

void Error_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fe:	b672      	cpsid	i
}
 8000900:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000902:	bf00      	nop
 8000904:	e7fd      	b.n	8000902 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <HAL_MspInit+0x44>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000912:	4a0e      	ldr	r2, [pc, #56]	@ (800094c <HAL_MspInit+0x44>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6613      	str	r3, [r2, #96]	@ 0x60
 800091a:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092a:	4a08      	ldr	r2, [pc, #32]	@ (800094c <HAL_MspInit+0x44>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000930:	6593      	str	r3, [r2, #88]	@ 0x58
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <NMI_Handler+0x4>

08000958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <MemManage_Handler+0x4>

08000968 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <UsageFault_Handler+0x4>

08000978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a6:	f000 f893 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d8:	f7ff ffea 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopForever+0xe>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopForever+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a02:	f000 ffdd 	bl	80019c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a06:	f7ff fdaf 	bl	8000568 <main>

08000a0a <LoopForever>:

LoopForever:
    b LoopForever
 8000a0a:	e7fe      	b.n	8000a0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a0c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a18:	08001aa0 	.word	0x08001aa0
  ldr r2, =_sbss
 8000a1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a20:	20000030 	.word	0x20000030

08000a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_2_IRQHandler>

08000a26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f91f 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f80e 	bl	8000a58 <HAL_InitTick>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	e001      	b.n	8000a4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a48:	f7ff ff5e 	bl	8000908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a64:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <HAL_InitTick+0x6c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d023      	beq.n	8000ab4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <HAL_InitTick+0x70>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <HAL_InitTick+0x6c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f91d 	bl	8000cc2 <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10f      	bne.n	8000aae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d809      	bhi.n	8000aa8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f8f5 	bl	8000c8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <HAL_InitTick+0x74>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	e007      	b.n	8000ab8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e004      	b.n	8000ab8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	73fb      	strb	r3, [r7, #15]
 8000ab2:	e001      	b.n	8000ab8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	2000002c 	.word	0x2000002c

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	2000002c 	.word	0x2000002c

08000b10 <__NVIC_SetPriorityGrouping>:
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_SetPriority>:
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	@ (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	@ (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	@ 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	@ 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff8e 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff47 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9c:	f7ff ff5c 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ff8e 	bl	8000bc8 <NVIC_EncodePriority>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5d 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffb0 	bl	8000c30 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ce0:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d06:	d130      	bne.n	8000d6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d08:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d14:	d038      	beq.n	8000d88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d26:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2232      	movs	r2, #50	@ 0x32
 8000d2c:	fb02 f303 	mul.w	r3, r2, r3
 8000d30:	4a1b      	ldr	r2, [pc, #108]	@ (8000da0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	0c9b      	lsrs	r3, r3, #18
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d3c:	e002      	b.n	8000d44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d50:	d102      	bne.n	8000d58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1f2      	bne.n	8000d3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d58:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d64:	d110      	bne.n	8000d88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e00f      	b.n	8000d8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d76:	d007      	beq.n	8000d88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d78:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d80:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40007000 	.word	0x40007000
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	431bde83 	.word	0x431bde83

08000da4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d102      	bne.n	8000db8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	f000 bc08 	b.w	80015c8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000db8:	4b96      	ldr	r3, [pc, #600]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dc2:	4b94      	ldr	r3, [pc, #592]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80e4 	beq.w	8000fa2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d007      	beq.n	8000df0 <HAL_RCC_OscConfig+0x4c>
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	2b0c      	cmp	r3, #12
 8000de4:	f040 808b 	bne.w	8000efe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	f040 8087 	bne.w	8000efe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000df0:	4b88      	ldr	r3, [pc, #544]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d005      	beq.n	8000e08 <HAL_RCC_OscConfig+0x64>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e3df      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a1a      	ldr	r2, [r3, #32]
 8000e0c:	4b81      	ldr	r3, [pc, #516]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0308 	and.w	r3, r3, #8
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d004      	beq.n	8000e22 <HAL_RCC_OscConfig+0x7e>
 8000e18:	4b7e      	ldr	r3, [pc, #504]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000e20:	e005      	b.n	8000e2e <HAL_RCC_OscConfig+0x8a>
 8000e22:	4b7c      	ldr	r3, [pc, #496]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d223      	bcs.n	8000e7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fd5a 	bl	80018f0 <RCC_SetFlashLatencyFromMSIRange>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e3c0      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e46:	4b73      	ldr	r3, [pc, #460]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a72      	ldr	r2, [pc, #456]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	4b70      	ldr	r3, [pc, #448]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	496d      	ldr	r1, [pc, #436]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e64:	4b6b      	ldr	r3, [pc, #428]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	4968      	ldr	r1, [pc, #416]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
 8000e78:	e025      	b.n	8000ec6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e7a:	4b66      	ldr	r3, [pc, #408]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a65      	ldr	r2, [pc, #404]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	4b63      	ldr	r3, [pc, #396]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	4960      	ldr	r1, [pc, #384]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e94:	4313      	orrs	r3, r2
 8000e96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e98:	4b5e      	ldr	r3, [pc, #376]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	495b      	ldr	r1, [pc, #364]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d109      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fd1a 	bl	80018f0 <RCC_SetFlashLatencyFromMSIRange>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e380      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ec6:	f000 fc87 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	4b51      	ldr	r3, [pc, #324]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	4950      	ldr	r1, [pc, #320]	@ (8001018 <HAL_RCC_OscConfig+0x274>)
 8000ed8:	5ccb      	ldrb	r3, [r1, r3]
 8000eda:	f003 031f 	and.w	r3, r3, #31
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	4a4e      	ldr	r2, [pc, #312]	@ (800101c <HAL_RCC_OscConfig+0x278>)
 8000ee4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8001020 <HAL_RCC_OscConfig+0x27c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fdb4 	bl	8000a58 <HAL_InitTick>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d052      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	e364      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d032      	beq.n	8000f6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f06:	4b43      	ldr	r3, [pc, #268]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a42      	ldr	r2, [pc, #264]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f12:	f7ff fdf1 	bl	8000af8 <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f18:	e008      	b.n	8000f2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f1a:	f7ff fded 	bl	8000af8 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e34d      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f2c:	4b39      	ldr	r3, [pc, #228]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0f0      	beq.n	8000f1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f38:	4b36      	ldr	r3, [pc, #216]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a35      	ldr	r2, [pc, #212]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b33      	ldr	r3, [pc, #204]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	4930      	ldr	r1, [pc, #192]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f56:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	492b      	ldr	r1, [pc, #172]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	604b      	str	r3, [r1, #4]
 8000f6a:	e01a      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f6c:	4b29      	ldr	r3, [pc, #164]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a28      	ldr	r2, [pc, #160]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f72:	f023 0301 	bic.w	r3, r3, #1
 8000f76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fdbe 	bl	8000af8 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f80:	f7ff fdba 	bl	8000af8 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e31a      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f92:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x1dc>
 8000f9e:	e000      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d073      	beq.n	8001096 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d005      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x21c>
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	2b0c      	cmp	r3, #12
 8000fb8:	d10e      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d10b      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d063      	beq.n	8001094 <HAL_RCC_OscConfig+0x2f0>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d15f      	bne.n	8001094 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e2f7      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fe0:	d106      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x24c>
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e025      	b.n	800103c <HAL_RCC_OscConfig+0x298>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ff8:	d114      	bne.n	8001024 <HAL_RCC_OscConfig+0x280>
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a02      	ldr	r2, [pc, #8]	@ (8001014 <HAL_RCC_OscConfig+0x270>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e013      	b.n	800103c <HAL_RCC_OscConfig+0x298>
 8001014:	40021000 	.word	0x40021000
 8001018:	08001a58 	.word	0x08001a58
 800101c:	20000000 	.word	0x20000000
 8001020:	20000004 	.word	0x20000004
 8001024:	4ba0      	ldr	r3, [pc, #640]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a9f      	ldr	r2, [pc, #636]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 800102a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b9d      	ldr	r3, [pc, #628]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a9c      	ldr	r2, [pc, #624]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800103a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d013      	beq.n	800106c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001044:	f7ff fd58 	bl	8000af8 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fd54 	bl	8000af8 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b64      	cmp	r3, #100	@ 0x64
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e2b4      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800105e:	4b92      	ldr	r3, [pc, #584]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x2a8>
 800106a:	e014      	b.n	8001096 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106c:	f7ff fd44 	bl	8000af8 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fd40 	bl	8000af8 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	@ 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e2a0      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001086:	4b88      	ldr	r3, [pc, #544]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x2d0>
 8001092:	e000      	b.n	8001096 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d060      	beq.n	8001164 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_OscConfig+0x310>
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	d119      	bne.n	80010e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d116      	bne.n	80010e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b4:	4b7c      	ldr	r3, [pc, #496]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <HAL_RCC_OscConfig+0x328>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e27d      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b76      	ldr	r3, [pc, #472]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	4973      	ldr	r1, [pc, #460]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010e0:	e040      	b.n	8001164 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d023      	beq.n	8001132 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ea:	4b6f      	ldr	r3, [pc, #444]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6e      	ldr	r2, [pc, #440]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f6:	f7ff fcff 	bl	8000af8 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fe:	f7ff fcfb 	bl	8000af8 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e25b      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001110:	4b65      	ldr	r3, [pc, #404]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111c:	4b62      	ldr	r3, [pc, #392]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	061b      	lsls	r3, r3, #24
 800112a:	495f      	ldr	r1, [pc, #380]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
 8001130:	e018      	b.n	8001164 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001132:	4b5d      	ldr	r3, [pc, #372]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a5c      	ldr	r2, [pc, #368]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800113c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113e:	f7ff fcdb 	bl	8000af8 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001146:	f7ff fcd7 	bl	8000af8 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e237      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001158:	4b53      	ldr	r3, [pc, #332]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f0      	bne.n	8001146 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d03c      	beq.n	80011ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01c      	beq.n	80011b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001178:	4b4b      	ldr	r3, [pc, #300]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 800117a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800117e:	4a4a      	ldr	r2, [pc, #296]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001188:	f7ff fcb6 	bl	8000af8 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fcb2 	bl	8000af8 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e212      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011a2:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 80011a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0ef      	beq.n	8001190 <HAL_RCC_OscConfig+0x3ec>
 80011b0:	e01b      	b.n	80011ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b2:	4b3d      	ldr	r3, [pc, #244]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 80011b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011b8:	4a3b      	ldr	r2, [pc, #236]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 80011ba:	f023 0301 	bic.w	r3, r3, #1
 80011be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c2:	f7ff fc99 	bl	8000af8 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ca:	f7ff fc95 	bl	8000af8 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e1f5      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011dc:	4b32      	ldr	r3, [pc, #200]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 80011de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1ef      	bne.n	80011ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80a6 	beq.w	8001344 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10d      	bne.n	8001224 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120c:	4a26      	ldr	r2, [pc, #152]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001212:	6593      	str	r3, [r2, #88]	@ 0x58
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001220:	2301      	movs	r3, #1
 8001222:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001224:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <HAL_RCC_OscConfig+0x508>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122c:	2b00      	cmp	r3, #0
 800122e:	d118      	bne.n	8001262 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001230:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <HAL_RCC_OscConfig+0x508>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a1d      	ldr	r2, [pc, #116]	@ (80012ac <HAL_RCC_OscConfig+0x508>)
 8001236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800123a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123c:	f7ff fc5c 	bl	8000af8 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001244:	f7ff fc58 	bl	8000af8 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e1b8      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_RCC_OscConfig+0x508>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d108      	bne.n	800127c <HAL_RCC_OscConfig+0x4d8>
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 800126c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001270:	4a0d      	ldr	r2, [pc, #52]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800127a:	e029      	b.n	80012d0 <HAL_RCC_OscConfig+0x52c>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d115      	bne.n	80012b0 <HAL_RCC_OscConfig+0x50c>
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800128a:	4a07      	ldr	r2, [pc, #28]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 8001296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800129a:	4a03      	ldr	r2, [pc, #12]	@ (80012a8 <HAL_RCC_OscConfig+0x504>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012a4:	e014      	b.n	80012d0 <HAL_RCC_OscConfig+0x52c>
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40007000 	.word	0x40007000
 80012b0:	4b9d      	ldr	r3, [pc, #628]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80012b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012b6:	4a9c      	ldr	r2, [pc, #624]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012c0:	4b99      	ldr	r3, [pc, #612]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80012c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012c6:	4a98      	ldr	r2, [pc, #608]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80012c8:	f023 0304 	bic.w	r3, r3, #4
 80012cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d016      	beq.n	8001306 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d8:	f7ff fc0e 	bl	8000af8 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e0:	f7ff fc0a 	bl	8000af8 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e168      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80012f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ed      	beq.n	80012e0 <HAL_RCC_OscConfig+0x53c>
 8001304:	e015      	b.n	8001332 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001306:	f7ff fbf7 	bl	8000af8 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7ff fbf3 	bl	8000af8 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e151      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001324:	4b80      	ldr	r3, [pc, #512]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 8001326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1ed      	bne.n	800130e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d105      	bne.n	8001344 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001338:	4b7b      	ldr	r3, [pc, #492]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133c:	4a7a      	ldr	r2, [pc, #488]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 800133e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001342:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	2b00      	cmp	r3, #0
 800134e:	d03c      	beq.n	80013ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01c      	beq.n	8001392 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001358:	4b73      	ldr	r3, [pc, #460]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 800135a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800135e:	4a72      	ldr	r2, [pc, #456]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff fbc6 	bl	8000af8 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001370:	f7ff fbc2 	bl	8000af8 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e122      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001382:	4b69      	ldr	r3, [pc, #420]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 8001384:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ef      	beq.n	8001370 <HAL_RCC_OscConfig+0x5cc>
 8001390:	e01b      	b.n	80013ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001392:	4b65      	ldr	r3, [pc, #404]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 8001394:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001398:	4a63      	ldr	r2, [pc, #396]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 800139a:	f023 0301 	bic.w	r3, r3, #1
 800139e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a2:	f7ff fba9 	bl	8000af8 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013aa:	f7ff fba5 	bl	8000af8 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e105      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80013be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1ef      	bne.n	80013aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 80f9 	beq.w	80015c6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d8:	2b02      	cmp	r3, #2
 80013da:	f040 80cf 	bne.w	800157c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013de:	4b52      	ldr	r3, [pc, #328]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f003 0203 	and.w	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d12c      	bne.n	800144c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fc:	3b01      	subs	r3, #1
 80013fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001400:	429a      	cmp	r2, r3
 8001402:	d123      	bne.n	800144c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800140e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001410:	429a      	cmp	r2, r3
 8001412:	d11b      	bne.n	800144c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800141e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001420:	429a      	cmp	r2, r3
 8001422:	d113      	bne.n	800144c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	3b01      	subs	r3, #1
 8001432:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d109      	bne.n	800144c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	3b01      	subs	r3, #1
 8001446:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001448:	429a      	cmp	r2, r3
 800144a:	d071      	beq.n	8001530 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b0c      	cmp	r3, #12
 8001450:	d068      	beq.n	8001524 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001452:	4b35      	ldr	r3, [pc, #212]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d105      	bne.n	800146a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800145e:	4b32      	ldr	r3, [pc, #200]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e0ac      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800146e:	4b2e      	ldr	r3, [pc, #184]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a2d      	ldr	r2, [pc, #180]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 8001474:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001478:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800147a:	f7ff fb3d 	bl	8000af8 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fb39 	bl	8000af8 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e099      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001494:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a0:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	4b21      	ldr	r3, [pc, #132]	@ (800152c <HAL_RCC_OscConfig+0x788>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80014b0:	3a01      	subs	r2, #1
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	4311      	orrs	r1, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80014ba:	0212      	lsls	r2, r2, #8
 80014bc:	4311      	orrs	r1, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80014c2:	0852      	lsrs	r2, r2, #1
 80014c4:	3a01      	subs	r2, #1
 80014c6:	0552      	lsls	r2, r2, #21
 80014c8:	4311      	orrs	r1, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80014ce:	0852      	lsrs	r2, r2, #1
 80014d0:	3a01      	subs	r2, #1
 80014d2:	0652      	lsls	r2, r2, #25
 80014d4:	4311      	orrs	r1, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80014da:	06d2      	lsls	r2, r2, #27
 80014dc:	430a      	orrs	r2, r1
 80014de:	4912      	ldr	r1, [pc, #72]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014e4:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80014ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 80014f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014fc:	f7ff fafc 	bl	8000af8 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff faf8 	bl	8000af8 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e058      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <HAL_RCC_OscConfig+0x784>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001522:	e050      	b.n	80015c6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e04f      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
 8001528:	40021000 	.word	0x40021000
 800152c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001530:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <HAL_RCC_OscConfig+0x82c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d144      	bne.n	80015c6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800153c:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <HAL_RCC_OscConfig+0x82c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a23      	ldr	r2, [pc, #140]	@ (80015d0 <HAL_RCC_OscConfig+0x82c>)
 8001542:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001546:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001548:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <HAL_RCC_OscConfig+0x82c>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4a20      	ldr	r2, [pc, #128]	@ (80015d0 <HAL_RCC_OscConfig+0x82c>)
 800154e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001552:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001554:	f7ff fad0 	bl	8000af8 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff facc 	bl	8000af8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e02c      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <HAL_RCC_OscConfig+0x82c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x7b8>
 800157a:	e024      	b.n	80015c6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2b0c      	cmp	r3, #12
 8001580:	d01f      	beq.n	80015c2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <HAL_RCC_OscConfig+0x82c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <HAL_RCC_OscConfig+0x82c>)
 8001588:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800158c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fab3 	bl	8000af8 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff faaf 	bl	8000af8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e00f      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_RCC_OscConfig+0x82c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_RCC_OscConfig+0x82c>)
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	4905      	ldr	r1, [pc, #20]	@ (80015d0 <HAL_RCC_OscConfig+0x82c>)
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_RCC_OscConfig+0x830>)
 80015bc:	4013      	ands	r3, r2
 80015be:	60cb      	str	r3, [r1, #12]
 80015c0:	e001      	b.n	80015c6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000
 80015d4:	feeefffc 	.word	0xfeeefffc

080015d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0e7      	b.n	80017bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b75      	ldr	r3, [pc, #468]	@ (80017c4 <HAL_RCC_ClockConfig+0x1ec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d910      	bls.n	800161c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b72      	ldr	r3, [pc, #456]	@ (80017c4 <HAL_RCC_ClockConfig+0x1ec>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 0207 	bic.w	r2, r3, #7
 8001602:	4970      	ldr	r1, [pc, #448]	@ (80017c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b6e      	ldr	r3, [pc, #440]	@ (80017c4 <HAL_RCC_ClockConfig+0x1ec>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0cf      	b.n	80017bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d010      	beq.n	800164a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4b66      	ldr	r3, [pc, #408]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001634:	429a      	cmp	r2, r3
 8001636:	d908      	bls.n	800164a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b63      	ldr	r3, [pc, #396]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4960      	ldr	r1, [pc, #384]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d04c      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165e:	4b5a      	ldr	r3, [pc, #360]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d121      	bne.n	80016ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0a6      	b.n	80017bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001676:	4b54      	ldr	r3, [pc, #336]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d115      	bne.n	80016ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e09a      	b.n	80017bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800168e:	4b4e      	ldr	r3, [pc, #312]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e08e      	b.n	80017bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800169e:	4b4a      	ldr	r3, [pc, #296]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e086      	b.n	80017bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016ae:	4b46      	ldr	r3, [pc, #280]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f023 0203 	bic.w	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4943      	ldr	r1, [pc, #268]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016c0:	f7ff fa1a 	bl	8000af8 <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	e00a      	b.n	80016de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c8:	f7ff fa16 	bl	8000af8 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e06e      	b.n	80017bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016de:	4b3a      	ldr	r3, [pc, #232]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 020c 	and.w	r2, r3, #12
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d1eb      	bne.n	80016c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d010      	beq.n	800171e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001708:	429a      	cmp	r2, r3
 800170a:	d208      	bcs.n	800171e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170c:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	492b      	ldr	r1, [pc, #172]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800171e:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d210      	bcs.n	800174e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172c:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <HAL_RCC_ClockConfig+0x1ec>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 0207 	bic.w	r2, r3, #7
 8001734:	4923      	ldr	r1, [pc, #140]	@ (80017c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <HAL_RCC_ClockConfig+0x1ec>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e036      	b.n	80017bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	d008      	beq.n	800176c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800175a:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	4918      	ldr	r1, [pc, #96]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001778:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4910      	ldr	r1, [pc, #64]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800178c:	f000 f824 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 8001790:	4602      	mov	r2, r0
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	490b      	ldr	r1, [pc, #44]	@ (80017cc <HAL_RCC_ClockConfig+0x1f4>)
 800179e:	5ccb      	ldrb	r3, [r1, r3]
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	4a09      	ldr	r2, [pc, #36]	@ (80017d0 <HAL_RCC_ClockConfig+0x1f8>)
 80017aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017ac:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_RCC_ClockConfig+0x1fc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff f951 	bl	8000a58 <HAL_InitTick>
 80017b6:	4603      	mov	r3, r0
 80017b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80017ba:	7afb      	ldrb	r3, [r7, #11]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40022000 	.word	0x40022000
 80017c8:	40021000 	.word	0x40021000
 80017cc:	08001a58 	.word	0x08001a58
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000004 	.word	0x20000004

080017d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	@ 0x24
 80017dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e6:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f0:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x34>
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d121      	bne.n	800184a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d11e      	bne.n	800184a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800180c:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d107      	bne.n	8001828 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001818:	4b31      	ldr	r3, [pc, #196]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800181a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e005      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001834:	4a2b      	ldr	r2, [pc, #172]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10d      	bne.n	8001860 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d102      	bne.n	8001856 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	e004      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b08      	cmp	r3, #8
 800185a:	d101      	bne.n	8001860 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800185c:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x114>)
 800185e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b0c      	cmp	r3, #12
 8001864:	d134      	bne.n	80018d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001866:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0xa6>
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d003      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0xac>
 800187c:	e005      	b.n	800188a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800187e:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001880:	617b      	str	r3, [r7, #20]
      break;
 8001882:	e005      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x114>)
 8001886:	617b      	str	r3, [r7, #20]
      break;
 8001888:	e002      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	617b      	str	r3, [r7, #20]
      break;
 800188e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001890:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	3301      	adds	r3, #1
 800189c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	fb03 f202 	mul.w	r2, r3, r2
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	0e5b      	lsrs	r3, r3, #25
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	3301      	adds	r3, #1
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018d0:	69bb      	ldr	r3, [r7, #24]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	@ 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	08001a68 	.word	0x08001a68
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	007a1200 	.word	0x007a1200

080018f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018fc:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001908:	f7ff f9e8 	bl	8000cdc <HAL_PWREx_GetVoltageRange>
 800190c:	6178      	str	r0, [r7, #20]
 800190e:	e014      	b.n	800193a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001910:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001914:	4a24      	ldr	r2, [pc, #144]	@ (80019a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191a:	6593      	str	r3, [r2, #88]	@ 0x58
 800191c:	4b22      	ldr	r3, [pc, #136]	@ (80019a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001928:	f7ff f9d8 	bl	8000cdc <HAL_PWREx_GetVoltageRange>
 800192c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800192e:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001934:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001938:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001940:	d10b      	bne.n	800195a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b80      	cmp	r3, #128	@ 0x80
 8001946:	d919      	bls.n	800197c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2ba0      	cmp	r3, #160	@ 0xa0
 800194c:	d902      	bls.n	8001954 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800194e:	2302      	movs	r3, #2
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	e013      	b.n	800197c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001954:	2301      	movs	r3, #1
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	e010      	b.n	800197c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b80      	cmp	r3, #128	@ 0x80
 800195e:	d902      	bls.n	8001966 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001960:	2303      	movs	r3, #3
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	e00a      	b.n	800197c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b80      	cmp	r3, #128	@ 0x80
 800196a:	d102      	bne.n	8001972 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800196c:	2302      	movs	r3, #2
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	e004      	b.n	800197c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b70      	cmp	r3, #112	@ 0x70
 8001976:	d101      	bne.n	800197c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001978:	2301      	movs	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 0207 	bic.w	r2, r3, #7
 8001984:	4909      	ldr	r1, [pc, #36]	@ (80019ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800198c:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40022000 	.word	0x40022000

080019b0 <memset>:
 80019b0:	4402      	add	r2, r0
 80019b2:	4603      	mov	r3, r0
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d100      	bne.n	80019ba <memset+0xa>
 80019b8:	4770      	bx	lr
 80019ba:	f803 1b01 	strb.w	r1, [r3], #1
 80019be:	e7f9      	b.n	80019b4 <memset+0x4>

080019c0 <__libc_init_array>:
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	4d0d      	ldr	r5, [pc, #52]	@ (80019f8 <__libc_init_array+0x38>)
 80019c4:	4c0d      	ldr	r4, [pc, #52]	@ (80019fc <__libc_init_array+0x3c>)
 80019c6:	1b64      	subs	r4, r4, r5
 80019c8:	10a4      	asrs	r4, r4, #2
 80019ca:	2600      	movs	r6, #0
 80019cc:	42a6      	cmp	r6, r4
 80019ce:	d109      	bne.n	80019e4 <__libc_init_array+0x24>
 80019d0:	4d0b      	ldr	r5, [pc, #44]	@ (8001a00 <__libc_init_array+0x40>)
 80019d2:	4c0c      	ldr	r4, [pc, #48]	@ (8001a04 <__libc_init_array+0x44>)
 80019d4:	f000 f818 	bl	8001a08 <_init>
 80019d8:	1b64      	subs	r4, r4, r5
 80019da:	10a4      	asrs	r4, r4, #2
 80019dc:	2600      	movs	r6, #0
 80019de:	42a6      	cmp	r6, r4
 80019e0:	d105      	bne.n	80019ee <__libc_init_array+0x2e>
 80019e2:	bd70      	pop	{r4, r5, r6, pc}
 80019e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80019e8:	4798      	blx	r3
 80019ea:	3601      	adds	r6, #1
 80019ec:	e7ee      	b.n	80019cc <__libc_init_array+0xc>
 80019ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80019f2:	4798      	blx	r3
 80019f4:	3601      	adds	r6, #1
 80019f6:	e7f2      	b.n	80019de <__libc_init_array+0x1e>
 80019f8:	08001a98 	.word	0x08001a98
 80019fc:	08001a98 	.word	0x08001a98
 8001a00:	08001a98 	.word	0x08001a98
 8001a04:	08001a9c 	.word	0x08001a9c

08001a08 <_init>:
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	bf00      	nop
 8001a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0e:	bc08      	pop	{r3}
 8001a10:	469e      	mov	lr, r3
 8001a12:	4770      	bx	lr

08001a14 <_fini>:
 8001a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a16:	bf00      	nop
 8001a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1a:	bc08      	pop	{r3}
 8001a1c:	469e      	mov	lr, r3
 8001a1e:	4770      	bx	lr
