
A8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019cc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001b78  08001b78  00002b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bf8  08001bf8  00003060  2**0
                  CONTENTS
  4 .ARM          00000000  08001bf8  08001bf8  00003060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bf8  08001bf8  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bf8  08001bf8  00002bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001bfc  08001bfc  00002bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001c00  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00030eb8  20000060  08001c60  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20030f18  08001c60  00003f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055cd  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000136a  00000000  00000000  0000865d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  000099c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000047b  00000000  00000000  00009ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028063  00000000  00000000  0000a473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000067cd  00000000  00000000  000324d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f26e9  00000000  00000000  00038ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b38c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001988  00000000  00000000  0012b3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0012cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000060 	.word	0x20000060
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001b60 	.word	0x08001b60

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000064 	.word	0x20000064
 80001e8:	08001b60 	.word	0x08001b60

080001ec <SysTick_Init>:

/* Configure SysTick Timer for use with delay_us function. This will break
 * break compatibility with HAL_delay() by disabling interrupts to allow for
 * shorter delay timing.
 */
void SysTick_Init(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |	       // enable SysTick Timer
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <SysTick_Init+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <SysTick_Init+0x28>)
 80001f6:	f043 0305 	orr.w	r3, r3, #5
 80001fa:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk);     // select CPU clock
    SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);      // disable interrupt,
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <SysTick_Init+0x28>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a04      	ldr	r2, [pc, #16]	@ (8000214 <SysTick_Init+0x28>)
 8000202:	f023 0302 	bic.w	r3, r3, #2
 8000206:	6013      	str	r3, [r2, #0]
                                                       // breaks HAL delay function
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <delay_us>:
 * precise delay timing. Passing a time of 0 will cause an error and result
 * in the maximum delay. Short delays are limited by the clock speed and will
 * often result in longer delay times than specified. @ 4MHz, a delay of 1us
 * will result in a delay of 10-15 us.
 */
void delay_us(const uint32_t time_us) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    // set the counts for the specified delay
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000220:	4b11      	ldr	r3, [pc, #68]	@ (8000268 <delay_us+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	@ (800026c <delay_us+0x54>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	0c9b      	lsrs	r3, r3, #18
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	fb02 f303 	mul.w	r3, r2, r3
 8000232:	4a0f      	ldr	r2, [pc, #60]	@ (8000270 <delay_us+0x58>)
 8000234:	3b01      	subs	r3, #1
 8000236:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 8000238:	4b0d      	ldr	r3, [pc, #52]	@ (8000270 <delay_us+0x58>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 800023e:	4b0c      	ldr	r3, [pc, #48]	@ (8000270 <delay_us+0x58>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0b      	ldr	r2, [pc, #44]	@ (8000270 <delay_us+0x58>)
 8000244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000248:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800024a:	bf00      	nop
 800024c:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <delay_us+0x58>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f9      	beq.n	800024c <delay_us+0x34>
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000004 	.word	0x20000004
 800026c:	431bde83 	.word	0x431bde83
 8000270:	e000e010 	.word	0xe000e010

08000274 <main>:
uint16_t ADC_max = 0;

void SystemClock_Config(void);

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0

  HAL_Init();
 800027a:	f000 fb60 	bl	800093e <HAL_Init>
  SystemClock_Config();
 800027e:	f000 f97d 	bl	800057c <SystemClock_Config>
  SysTick_Init();
 8000282:	f7ff ffb3 	bl	80001ec <SysTick_Init>
  LPUART_init();
 8000286:	f000 fa63 	bl	8000750 <LPUART_init>
  ADC_init();
 800028a:	f000 f8b3 	bl	80003f4 <ADC_init>


  while (1)
  {

	  while( !ADC_conversion_flag ){ // *global* await next ISR trip
 800028e:	e04a      	b.n	8000326 <main+0xb2>




			if (ADC_last_read < ADC_min) {
 8000290:	4b27      	ldr	r3, [pc, #156]	@ (8000330 <main+0xbc>)
 8000292:	881a      	ldrh	r2, [r3, #0]
 8000294:	4b27      	ldr	r3, [pc, #156]	@ (8000334 <main+0xc0>)
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	429a      	cmp	r2, r3
 800029a:	d203      	bcs.n	80002a4 <main+0x30>
				ADC_min = ADC_last_read;
 800029c:	4b24      	ldr	r3, [pc, #144]	@ (8000330 <main+0xbc>)
 800029e:	881a      	ldrh	r2, [r3, #0]
 80002a0:	4b24      	ldr	r3, [pc, #144]	@ (8000334 <main+0xc0>)
 80002a2:	801a      	strh	r2, [r3, #0]
			}


			if (ADC_last_read > ADC_max){
 80002a4:	4b22      	ldr	r3, [pc, #136]	@ (8000330 <main+0xbc>)
 80002a6:	881a      	ldrh	r2, [r3, #0]
 80002a8:	4b23      	ldr	r3, [pc, #140]	@ (8000338 <main+0xc4>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d903      	bls.n	80002b8 <main+0x44>
				ADC_max = ADC_last_read;
 80002b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000330 <main+0xbc>)
 80002b2:	881a      	ldrh	r2, [r3, #0]
 80002b4:	4b20      	ldr	r3, [pc, #128]	@ (8000338 <main+0xc4>)
 80002b6:	801a      	strh	r2, [r3, #0]
			}

			uint32_t sum = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
			for (int index = 0; index < SAMPLE_COUNT; index++){
 80002bc:	2300      	movs	r3, #0
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	e00a      	b.n	80002d8 <main+0x64>
					sum += ADC_readings[index];
 80002c2:	4a1e      	ldr	r2, [pc, #120]	@ (800033c <main+0xc8>)
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002ca:	461a      	mov	r2, r3
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	4413      	add	r3, r2
 80002d0:	60fb      	str	r3, [r7, #12]
			for (int index = 0; index < SAMPLE_COUNT; index++){
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	3301      	adds	r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002de:	4293      	cmp	r3, r2
 80002e0:	ddef      	ble.n	80002c2 <main+0x4e>
			}

			ADC_average = sum/SAMPLE_COUNT;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	4a16      	ldr	r2, [pc, #88]	@ (8000340 <main+0xcc>)
 80002e6:	fba2 2303 	umull	r2, r3, r2, r3
 80002ea:	0b5b      	lsrs	r3, r3, #13
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <main+0xd0>)
 80002f0:	801a      	strh	r2, [r3, #0]

//		  ADC_average = get_average(ADC_readings, 100);
		  //ADC_min = get_min(ADC_readings, 100);
		  //ADC_max = get_max(ADC_readings, 100);

		  char* fart = int_to_str(ADC_average);
 80002f2:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <main+0xd0>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f82c 	bl	8000354 <int_to_str>
 80002fc:	6078      	str	r0, [r7, #4]
		  LPUART_print(fart);
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f000 faa6 	bl	8000850 <LPUART_print>
		  LPUART_print("\r");
 8000304:	4810      	ldr	r0, [pc, #64]	@ (8000348 <main+0xd4>)
 8000306:	f000 faa3 	bl	8000850 <LPUART_print>

//		  delay_us(500);
		  LPUART_clearScreen();
 800030a:	f000 fae5 	bl	80008d8 <LPUART_clearScreen>
		  free(fart);
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	f001 fae2 	bl	80018d8 <free>
		  ADC_conversion_flag = 0;                         //Reset Flag
 8000314:	4b0d      	ldr	r3, [pc, #52]	@ (800034c <main+0xd8>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
		  ADC1->CR |= ADC_CR_ADSTART;                // start 1st conversion
 800031a:	4b0d      	ldr	r3, [pc, #52]	@ (8000350 <main+0xdc>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	4a0c      	ldr	r2, [pc, #48]	@ (8000350 <main+0xdc>)
 8000320:	f043 0304 	orr.w	r3, r3, #4
 8000324:	6093      	str	r3, [r2, #8]
	  while( !ADC_conversion_flag ){ // *global* await next ISR trip
 8000326:	4b09      	ldr	r3, [pc, #36]	@ (800034c <main+0xd8>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0b0      	beq.n	8000290 <main+0x1c>
 800032e:	e7fa      	b.n	8000326 <main+0xb2>
 8000330:	2000007e 	.word	0x2000007e
 8000334:	20000000 	.word	0x20000000
 8000338:	20030dc4 	.word	0x20030dc4
 800033c:	20000080 	.word	0x20000080
 8000340:	d1b71759 	.word	0xd1b71759
 8000344:	20030dc2 	.word	0x20030dc2
 8000348:	08001b78 	.word	0x08001b78
 800034c:	2000007c 	.word	0x2000007c
 8000350:	50040000 	.word	0x50040000

08000354 <int_to_str>:


  }
}

char* int_to_str(int num) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
    int len = 0, tmp = num;
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	613b      	str	r3, [r7, #16]

    // Determine the length of the string
    do {
        len++;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	3301      	adds	r3, #1
 8000368:	617b      	str	r3, [r7, #20]
        tmp /= 10;
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	4a20      	ldr	r2, [pc, #128]	@ (80003f0 <int_to_str+0x9c>)
 800036e:	fb82 1203 	smull	r1, r2, r2, r3
 8000372:	1092      	asrs	r2, r2, #2
 8000374:	17db      	asrs	r3, r3, #31
 8000376:	1ad3      	subs	r3, r2, r3
 8000378:	613b      	str	r3, [r7, #16]
    } while (tmp != 0);
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d1f1      	bne.n	8000364 <int_to_str+0x10>

    // Allocate memory for the string
    char* str = (char*) malloc(sizeof(char) * (len + 1));
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	3301      	adds	r3, #1
 8000384:	4618      	mov	r0, r3
 8000386:	f001 fa9f 	bl	80018c8 <malloc>
 800038a:	4603      	mov	r3, r0
 800038c:	60bb      	str	r3, [r7, #8]

    // Convert integer to string
    int i = len - 1;
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	3b01      	subs	r3, #1
 8000392:	60fb      	str	r3, [r7, #12]
    tmp = num;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	613b      	str	r3, [r7, #16]
    str[len] = '\0'; // Null terminator
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	68ba      	ldr	r2, [r7, #8]
 800039c:	4413      	add	r3, r2
 800039e:	2200      	movs	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]

    while (tmp != 0) {
 80003a2:	e01d      	b.n	80003e0 <int_to_str+0x8c>
        str[i--] = tmp % 10 + '0';
 80003a4:	693a      	ldr	r2, [r7, #16]
 80003a6:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <int_to_str+0x9c>)
 80003a8:	fb83 1302 	smull	r1, r3, r3, r2
 80003ac:	1099      	asrs	r1, r3, #2
 80003ae:	17d3      	asrs	r3, r2, #31
 80003b0:	1ac9      	subs	r1, r1, r3
 80003b2:	460b      	mov	r3, r1
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	440b      	add	r3, r1
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	1ad1      	subs	r1, r2, r3
 80003bc:	b2ca      	uxtb	r2, r1
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	1e59      	subs	r1, r3, #1
 80003c2:	60f9      	str	r1, [r7, #12]
 80003c4:	4619      	mov	r1, r3
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	440b      	add	r3, r1
 80003ca:	3230      	adds	r2, #48	@ 0x30
 80003cc:	b2d2      	uxtb	r2, r2
 80003ce:	701a      	strb	r2, [r3, #0]
        tmp /= 10;
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	4a07      	ldr	r2, [pc, #28]	@ (80003f0 <int_to_str+0x9c>)
 80003d4:	fb82 1203 	smull	r1, r2, r2, r3
 80003d8:	1092      	asrs	r2, r2, #2
 80003da:	17db      	asrs	r3, r3, #31
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	613b      	str	r3, [r7, #16]
    while (tmp != 0) {
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d1de      	bne.n	80003a4 <int_to_str+0x50>
    }

    return str;
 80003e6:	68bb      	ldr	r3, [r7, #8]
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3718      	adds	r7, #24
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	66666667 	.word	0x66666667

080003f4 <ADC_init>:
			}
		}
	return(max);
}

void ADC_init(void){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;         // turn on clock for ADC
 80003f8:	4b45      	ldr	r3, [pc, #276]	@ (8000510 <ADC_init+0x11c>)
 80003fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fc:	4a44      	ldr	r2, [pc, #272]	@ (8000510 <ADC_init+0x11c>)
 80003fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000402:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// power up & calibrate ADC
	ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // clock source = HCLK/1
 8000404:	4b43      	ldr	r3, [pc, #268]	@ (8000514 <ADC_init+0x120>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	4a42      	ldr	r2, [pc, #264]	@ (8000514 <ADC_init+0x120>)
 800040a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800040e:	6093      	str	r3, [r2, #8]
	ADC1->CR &= ~(ADC_CR_DEEPPWD);             // disable deep-power-down
 8000410:	4b41      	ldr	r3, [pc, #260]	@ (8000518 <ADC_init+0x124>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	4a40      	ldr	r2, [pc, #256]	@ (8000518 <ADC_init+0x124>)
 8000416:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800041a:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (ADC_CR_ADVREGEN);             // enable V regulator - see RM 18.4.6
 800041c:	4b3e      	ldr	r3, [pc, #248]	@ (8000518 <ADC_init+0x124>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	4a3d      	ldr	r2, [pc, #244]	@ (8000518 <ADC_init+0x124>)
 8000422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000426:	6093      	str	r3, [r2, #8]
	delay_us(20);                              // wait 20us for ADC to power up
 8000428:	2014      	movs	r0, #20
 800042a:	f7ff fef5 	bl	8000218 <delay_us>
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);    // PA0=ADC1_IN5, single-ended
 800042e:	4b3a      	ldr	r3, [pc, #232]	@ (8000518 <ADC_init+0x124>)
 8000430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000434:	4a38      	ldr	r2, [pc, #224]	@ (8000518 <ADC_init+0x124>)
 8000436:	f023 0320 	bic.w	r3, r3, #32
 800043a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); // disable ADC, single-end calib
 800043e:	4b36      	ldr	r3, [pc, #216]	@ (8000518 <ADC_init+0x124>)
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	4a35      	ldr	r2, [pc, #212]	@ (8000518 <ADC_init+0x124>)
 8000444:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000448:	f023 0301 	bic.w	r3, r3, #1
 800044c:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADCAL;                  // start calibration
 800044e:	4b32      	ldr	r3, [pc, #200]	@ (8000518 <ADC_init+0x124>)
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	4a31      	ldr	r2, [pc, #196]	@ (8000518 <ADC_init+0x124>)
 8000454:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000458:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL) {;}        // wait for calib to finish
 800045a:	bf00      	nop
 800045c:	4b2e      	ldr	r3, [pc, #184]	@ (8000518 <ADC_init+0x124>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	2b00      	cmp	r3, #0
 8000462:	dbfb      	blt.n	800045c <ADC_init+0x68>
	// enable ADC
	ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 8000464:	4b2c      	ldr	r3, [pc, #176]	@ (8000518 <ADC_init+0x124>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a2b      	ldr	r2, [pc, #172]	@ (8000518 <ADC_init+0x124>)
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	6013      	str	r3, [r2, #0]
	ADC1->CR |= ADC_CR_ADEN;                   // enable ADC
 8000470:	4b29      	ldr	r3, [pc, #164]	@ (8000518 <ADC_init+0x124>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	4a28      	ldr	r2, [pc, #160]	@ (8000518 <ADC_init+0x124>)
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6093      	str	r3, [r2, #8]
	while(!(ADC1->ISR & ADC_ISR_ADRDY)) {;}    // wait for ADC Ready flag
 800047c:	bf00      	nop
 800047e:	4b26      	ldr	r3, [pc, #152]	@ (8000518 <ADC_init+0x124>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f9      	beq.n	800047e <ADC_init+0x8a>
	ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 800048a:	4b23      	ldr	r3, [pc, #140]	@ (8000518 <ADC_init+0x124>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a22      	ldr	r2, [pc, #136]	@ (8000518 <ADC_init+0x124>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6013      	str	r3, [r2, #0]
	// configure ADC sampling & sequencing
	ADC1->SQR1  |= (5 << ADC_SQR1_SQ1_Pos);    // sequence = 1 conv., ch 5
 8000496:	4b20      	ldr	r3, [pc, #128]	@ (8000518 <ADC_init+0x124>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049a:	4a1f      	ldr	r2, [pc, #124]	@ (8000518 <ADC_init+0x124>)
 800049c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80004a0:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SMPR1 |= (1 << ADC_SMPR1_SMP5_Pos);  // ch 5 sample time = 6.5 clocks
 80004a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000518 <ADC_init+0x124>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000518 <ADC_init+0x124>)
 80004a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004ac:	6153      	str	r3, [r2, #20]
	ADC1->CFGR  &= ~( ADC_CFGR_CONT  |         // single conversion mode
 80004ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000518 <ADC_init+0x124>)
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	4a19      	ldr	r2, [pc, #100]	@ (8000518 <ADC_init+0x124>)
 80004b4:	f423 5330 	bic.w	r3, r3, #11264	@ 0x2c00
 80004b8:	f023 0318 	bic.w	r3, r3, #24
 80004bc:	60d3      	str	r3, [r2, #12]
	                  ADC_CFGR_EXTEN |         // h/w trig disabled for s/w trig
	                  ADC_CFGR_RES   );        // 12-bit resolution
	// configure & enable ADC interrupt
	ADC1->IER |= ADC_IER_EOCIE;                // enable end-of-conv interrupt
 80004be:	4b16      	ldr	r3, [pc, #88]	@ (8000518 <ADC_init+0x124>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	4a15      	ldr	r2, [pc, #84]	@ (8000518 <ADC_init+0x124>)
 80004c4:	f043 0304 	orr.w	r3, r3, #4
 80004c8:	6053      	str	r3, [r2, #4]
	ADC1->ISR |= ADC_ISR_EOC;                  // set to clear EOC flag
 80004ca:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <ADC_init+0x124>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a12      	ldr	r2, [pc, #72]	@ (8000518 <ADC_init+0x124>)
 80004d0:	f043 0304 	orr.w	r3, r3, #4
 80004d4:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (1<<(ADC1_2_IRQn & 0x1F)); // enable ADC interrupt service
 80004d6:	4b11      	ldr	r3, [pc, #68]	@ (800051c <ADC_init+0x128>)
 80004d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004dc:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80004de:	b662      	cpsie	i
}
 80004e0:	bf00      	nop
	__enable_irq();                            // enable global interrupts
	// configure GPIO pin PA0
	RCC->AHB2ENR  |= (RCC_AHB2ENR_GPIOAEN);    // connect clock to GPIOA
 80004e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <ADC_init+0x11c>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <ADC_init+0x11c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOA->MODER  |= (GPIO_MODER_MODE0);       // analog mode for PA0 (set MODER last)
 80004ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004f8:	f043 0303 	orr.w	r3, r3, #3
 80004fc:	6013      	str	r3, [r2, #0]

	ADC1->CR |= ADC_CR_ADSTART;                // start 1st conversion
 80004fe:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <ADC_init+0x124>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	4a05      	ldr	r2, [pc, #20]	@ (8000518 <ADC_init+0x124>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6093      	str	r3, [r2, #8]

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000
 8000514:	50040300 	.word	0x50040300
 8000518:	50040000 	.word	0x50040000
 800051c:	e000e100 	.word	0xe000e100

08000520 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler( void ) {
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	if ( ADC1->ISR & ADC_ISR_EOC ) { // conversion done?
 8000524:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <ADC1_2_IRQHandler+0x48>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f003 0304 	and.w	r3, r3, #4
 800052c:	2b00      	cmp	r3, #0
 800052e:	d015      	beq.n	800055c <ADC1_2_IRQHandler+0x3c>
		ADC_last_read = ADC1->DR;
 8000530:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <ADC1_2_IRQHandler+0x48>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	b29a      	uxth	r2, r3
 8000536:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <ADC1_2_IRQHandler+0x4c>)
 8000538:	801a      	strh	r2, [r3, #0]
		if ( ADC_reading_index > SAMPLE_COUNT - 1){
				  ADC_reading_index = 0;                       //Set index to 0 at the end
		}
		ADC_readings[ADC_reading_index] = ADC_last_read;      // get data
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <ADC1_2_IRQHandler+0x50>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	461a      	mov	r2, r3
 8000540:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <ADC1_2_IRQHandler+0x4c>)
 8000542:	8819      	ldrh	r1, [r3, #0]
 8000544:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <ADC1_2_IRQHandler+0x54>)
 8000546:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		ADC_reading_index++;                             //Increment index
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <ADC1_2_IRQHandler+0x50>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	3301      	adds	r3, #1
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <ADC1_2_IRQHandler+0x50>)
 8000554:	701a      	strb	r2, [r3, #0]
		ADC_conversion_flag = 1; // tell main(): got one
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <ADC1_2_IRQHandler+0x58>)
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
	}

}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	50040000 	.word	0x50040000
 800056c:	2000007e 	.word	0x2000007e
 8000570:	20030dc0 	.word	0x20030dc0
 8000574:	20000080 	.word	0x20000080
 8000578:	2000007c 	.word	0x2000007c

0800057c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	@ 0x58
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2244      	movs	r2, #68	@ 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fa5a 	bl	8001a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005a2:	f000 fb35 	bl	8000c10 <HAL_PWREx_ControlVoltageScaling>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ac:	f000 f82d 	bl	800060a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005b0:	2310      	movs	r3, #16
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005bc:	2360      	movs	r3, #96	@ 0x60
 80005be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fb77 	bl	8000cbc <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005d4:	f000 f819 	bl	800060a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 ff7c 	bl	80014f0 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005fe:	f000 f804 	bl	800060a <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3758      	adds	r7, #88	@ 0x58
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <Error_Handler>:

void Error_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060e:	b672      	cpsid	i
}
 8000610:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000612:	bf00      	nop
 8000614:	e7fd      	b.n	8000612 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <HAL_MspInit+0x44>)
 8000620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000622:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <HAL_MspInit+0x44>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6613      	str	r3, [r2, #96]	@ 0x60
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <HAL_MspInit+0x44>)
 800062c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <HAL_MspInit+0x44>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800063a:	4a08      	ldr	r2, [pc, #32]	@ (800065c <HAL_MspInit+0x44>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000640:	6593      	str	r3, [r2, #88]	@ 0x58
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <HAL_MspInit+0x44>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <NMI_Handler+0x4>

08000668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <MemManage_Handler+0x4>

08000678 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <BusFault_Handler+0x4>

08000680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <UsageFault_Handler+0x4>

08000688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b6:	f000 f997 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c8:	4a14      	ldr	r2, [pc, #80]	@ (800071c <_sbrk+0x5c>)
 80006ca:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <_sbrk+0x60>)
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d4:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <_sbrk+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d102      	bne.n	80006e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <_sbrk+0x64>)
 80006de:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <_sbrk+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	693a      	ldr	r2, [r7, #16]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d207      	bcs.n	8000700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f0:	f001 f9c0 	bl	8001a74 <__errno>
 80006f4:	4603      	mov	r3, r0
 80006f6:	220c      	movs	r2, #12
 80006f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006fe:	e009      	b.n	8000714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <_sbrk+0x64>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000706:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <_sbrk+0x64>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	4a05      	ldr	r2, [pc, #20]	@ (8000724 <_sbrk+0x64>)
 8000710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20050000 	.word	0x20050000
 8000720:	00000400 	.word	0x00000400
 8000724:	20030dc8 	.word	0x20030dc8
 8000728:	20030f18 	.word	0x20030f18

0800072c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <SystemInit+0x20>)
 8000732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000736:	4a05      	ldr	r2, [pc, #20]	@ (800074c <SystemInit+0x20>)
 8000738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800073c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <LPUART_init>:
#include "uart.h"

char keyPressed;

void LPUART_init(){
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	//power avail and RCC config
	PWR->CR2 |= (PWR_CR2_IOSV);
 8000754:	4b39      	ldr	r3, [pc, #228]	@ (800083c <LPUART_init+0xec>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	4a38      	ldr	r2, [pc, #224]	@ (800083c <LPUART_init+0xec>)
 800075a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800075e:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);
 8000760:	4b37      	ldr	r3, [pc, #220]	@ (8000840 <LPUART_init+0xf0>)
 8000762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000764:	4a36      	ldr	r2, [pc, #216]	@ (8000840 <LPUART_init+0xf0>)
 8000766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800076a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN;
 800076c:	4b34      	ldr	r3, [pc, #208]	@ (8000840 <LPUART_init+0xf0>)
 800076e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000770:	4a33      	ldr	r2, [pc, #204]	@ (8000840 <LPUART_init+0xf0>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	65d3      	str	r3, [r2, #92]	@ 0x5c

	//GPIOG pins and Alt Func config
	//PG7 (TX) and PG8 (RX)
	GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <LPUART_init+0xf4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a31      	ldr	r2, [pc, #196]	@ (8000844 <LPUART_init+0xf4>)
 800077e:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8000782:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //AF mode
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <LPUART_init+0xf4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a2e      	ldr	r2, [pc, #184]	@ (8000844 <LPUART_init+0xf4>)
 800078a:	f443 3320 	orr.w	r3, r3, #163840	@ 0x28000
 800078e:	6013      	str	r3, [r2, #0]
	GPIOG->OTYPER &= ~(GPIO_PIN_7 | GPIO_PIN_8);
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <LPUART_init+0xf4>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	4a2b      	ldr	r2, [pc, #172]	@ (8000844 <LPUART_init+0xf4>)
 8000796:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 800079a:	6053      	str	r3, [r2, #4]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <LPUART_init+0xf4>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	4a28      	ldr	r2, [pc, #160]	@ (8000844 <LPUART_init+0xf4>)
 80007a2:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 80007a6:	60d3      	str	r3, [r2, #12]
	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8);
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <LPUART_init+0xf4>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	4a25      	ldr	r2, [pc, #148]	@ (8000844 <LPUART_init+0xf4>)
 80007ae:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 80007b2:	6093      	str	r3, [r2, #8]
	GPIOG->AFR[0] &= ~(GPIO_AFRL_AFSEL7); //pin7 AF to FN8
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <LPUART_init+0xf4>)
 80007b6:	6a1b      	ldr	r3, [r3, #32]
 80007b8:	4a22      	ldr	r2, [pc, #136]	@ (8000844 <LPUART_init+0xf4>)
 80007ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80007be:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[0] |= (GPIO_AFRL_AFSEL7_3);
 80007c0:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <LPUART_init+0xf4>)
 80007c2:	6a1b      	ldr	r3, [r3, #32]
 80007c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000844 <LPUART_init+0xf4>)
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ca:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[1] &= ~(GPIO_AFRH_AFSEL8); //pin8 AF to FN8
 80007cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <LPUART_init+0xf4>)
 80007ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000844 <LPUART_init+0xf4>)
 80007d2:	f023 030f 	bic.w	r3, r3, #15
 80007d6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL8_3);
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <LPUART_init+0xf4>)
 80007da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007dc:	4a19      	ldr	r2, [pc, #100]	@ (8000844 <LPUART_init+0xf4>)
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	6253      	str	r3, [r2, #36]	@ 0x24

	//UART control reg config
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); //8b data mode
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <LPUART_init+0xf8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a17      	ldr	r2, [pc, #92]	@ (8000848 <LPUART_init+0xf8>)
 80007ea:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 80007ee:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE; //en LPUART1
 80007f0:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <LPUART_init+0xf8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a14      	ldr	r2, [pc, #80]	@ (8000848 <LPUART_init+0xf8>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE); //en xmit & recv
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <LPUART_init+0xf8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a11      	ldr	r2, [pc, #68]	@ (8000848 <LPUART_init+0xf8>)
 8000802:	f043 030c 	orr.w	r3, r3, #12
 8000806:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE; //en LPUART1 recv int
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <LPUART_init+0xf8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0e      	ldr	r2, [pc, #56]	@ (8000848 <LPUART_init+0xf8>)
 800080e:	f043 0320 	orr.w	r3, r3, #32
 8000812:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE); //clr Recv-Not-Empty flag
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <LPUART_init+0xf8>)
 8000816:	69db      	ldr	r3, [r3, #28]
 8000818:	4a0b      	ldr	r2, [pc, #44]	@ (8000848 <LPUART_init+0xf8>)
 800081a:	f023 0320 	bic.w	r3, r3, #32
 800081e:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 256*2000000/115200; //set baud-rate reg
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <LPUART_init+0xf8>)
 8000822:	f241 125c 	movw	r2, #4444	@ 0x115c
 8000826:	60da      	str	r2, [r3, #12]

	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   //en LPUART1 ISR
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <LPUART_init+0xfc>)
 800082a:	2240      	movs	r2, #64	@ 0x40
 800082c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800082e:	b662      	cpsie	i
}
 8000830:	bf00      	nop
	__enable_irq();
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	40007000 	.word	0x40007000
 8000840:	40021000 	.word	0x40021000
 8000844:	48001800 	.word	0x48001800
 8000848:	40008000 	.word	0x40008000
 800084c:	e000e100 	.word	0xe000e100

08000850 <LPUART_print>:

void LPUART_print(const char* message){
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	//send chars until empty
	uint16_t iStrIdx = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	81fb      	strh	r3, [r7, #14]
	while(message[iStrIdx]!=0){
 800085c:	e00f      	b.n	800087e <LPUART_print+0x2e>
		while(!(LPUART1->ISR & USART_ISR_TXE));
 800085e:	bf00      	nop
 8000860:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <LPUART_print+0x48>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0f9      	beq.n	8000860 <LPUART_print+0x10>
		LPUART1->TDR = message[iStrIdx++];
 800086c:	89fb      	ldrh	r3, [r7, #14]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	81fa      	strh	r2, [r7, #14]
 8000872:	461a      	mov	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <LPUART_print+0x48>)
 800087c:	851a      	strh	r2, [r3, #40]	@ 0x28
	while(message[iStrIdx]!=0){
 800087e:	89fb      	ldrh	r3, [r7, #14]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1e9      	bne.n	800085e <LPUART_print+0xe>
	}
}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40008000 	.word	0x40008000

0800089c <LPUART_printESC>:

void LPUART_printESC(const char* message){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	LPUART_print("\x1B");//ESC
 80008a4:	4806      	ldr	r0, [pc, #24]	@ (80008c0 <LPUART_printESC+0x24>)
 80008a6:	f7ff ffd3 	bl	8000850 <LPUART_print>
	LPUART_print("[");
 80008aa:	4806      	ldr	r0, [pc, #24]	@ (80008c4 <LPUART_printESC+0x28>)
 80008ac:	f7ff ffd0 	bl	8000850 <LPUART_print>
	LPUART_print(message);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ffcd 	bl	8000850 <LPUART_print>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	08001b7c 	.word	0x08001b7c
 80008c4:	08001b80 	.word	0x08001b80

080008c8 <LPUART1_IRQHandler>:

void LPUART1_IRQHandler(void){
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
//	   default:
//		  while(!(LPUART1->ISR & USART_ISR_TXE));
//		  LPUART1->TDR = character;
//	  }
//	}
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <LPUART_clearScreen>:

void LPUART_clearLine(){
	LPUART_printESC("2K");
}

void LPUART_clearScreen(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	LPUART_printESC("2J");
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <LPUART_clearScreen+0x10>)
 80008de:	f7ff ffdd 	bl	800089c <LPUART_printESC>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	08001b94 	.word	0x08001b94

080008ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000924 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f0:	f7ff ff1c 	bl	800072c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	@ (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	@ (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091a:	f001 f8b1 	bl	8001a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800091e:	f7ff fca9 	bl	8000274 <main>

08000922 <LoopForever>:

LoopForever:
    b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000924:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000930:	08001c00 	.word	0x08001c00
  ldr r2, =_sbss
 8000934:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000938:	20030f18 	.word	0x20030f18

0800093c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC3_IRQHandler>

0800093e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000944:	2300      	movs	r3, #0
 8000946:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 f91f 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f80e 	bl	8000970 <HAL_InitTick>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d002      	beq.n	8000960 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	71fb      	strb	r3, [r7, #7]
 800095e:	e001      	b.n	8000964 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000960:	f7ff fe5a 	bl	8000618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000964:	79fb      	ldrb	r3, [r7, #7]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800097c:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <HAL_InitTick+0x6c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d023      	beq.n	80009cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <HAL_InitTick+0x70>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <HAL_InitTick+0x6c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f91d 	bl	8000bda <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10f      	bne.n	80009c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d809      	bhi.n	80009c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009b4:	f000 f8f5 	bl	8000ba2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b8:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <HAL_InitTick+0x74>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	e007      	b.n	80009d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e004      	b.n	80009d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e001      	b.n	80009d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000000c 	.word	0x2000000c
 80009e0:	20000004 	.word	0x20000004
 80009e4:	20000008 	.word	0x20000008

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	2000000c 	.word	0x2000000c
 8000a0c:	20030dcc 	.word	0x20030dcc

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20030dcc 	.word	0x20030dcc

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	@ (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	@ (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	@ 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	@ 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b6c:	f7ff ff8e 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff47 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff5c 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff8e 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff5d 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffb0 	bl	8000b48 <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40007000 	.word	0x40007000

08000c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c1e:	d130      	bne.n	8000c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c2c:	d038      	beq.n	8000ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2e:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c36:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2232      	movs	r2, #50	@ 0x32
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4e:	0c9b      	lsrs	r3, r3, #18
 8000c50:	3301      	adds	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c54:	e002      	b.n	8000c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c5c:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c68:	d102      	bne.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1f2      	bne.n	8000c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c7c:	d110      	bne.n	8000ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e00f      	b.n	8000ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c82:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c8e:	d007      	beq.n	8000ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c98:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40007000 	.word	0x40007000
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	431bde83 	.word	0x431bde83

08000cbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d102      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f000 bc08 	b.w	80014e0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cd0:	4b96      	ldr	r3, [pc, #600]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
 8000cd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cda:	4b94      	ldr	r3, [pc, #592]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 80e4 	beq.w	8000eba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d007      	beq.n	8000d08 <HAL_RCC_OscConfig+0x4c>
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	2b0c      	cmp	r3, #12
 8000cfc:	f040 808b 	bne.w	8000e16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	f040 8087 	bne.w	8000e16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d08:	4b88      	ldr	r3, [pc, #544]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <HAL_RCC_OscConfig+0x64>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e3df      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a1a      	ldr	r2, [r3, #32]
 8000d24:	4b81      	ldr	r3, [pc, #516]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d004      	beq.n	8000d3a <HAL_RCC_OscConfig+0x7e>
 8000d30:	4b7e      	ldr	r3, [pc, #504]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d38:	e005      	b.n	8000d46 <HAL_RCC_OscConfig+0x8a>
 8000d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d40:	091b      	lsrs	r3, r3, #4
 8000d42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d223      	bcs.n	8000d92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fd5a 	bl	8001808 <RCC_SetFlashLatencyFromMSIRange>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e3c0      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d5e:	4b73      	ldr	r3, [pc, #460]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a72      	ldr	r2, [pc, #456]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b70      	ldr	r3, [pc, #448]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a1b      	ldr	r3, [r3, #32]
 8000d76:	496d      	ldr	r1, [pc, #436]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	4968      	ldr	r1, [pc, #416]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]
 8000d90:	e025      	b.n	8000dde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d92:	4b66      	ldr	r3, [pc, #408]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a65      	ldr	r2, [pc, #404]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	4b63      	ldr	r3, [pc, #396]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4960      	ldr	r1, [pc, #384]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000dac:	4313      	orrs	r3, r2
 8000dae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000db0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	495b      	ldr	r1, [pc, #364]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d109      	bne.n	8000dde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a1b      	ldr	r3, [r3, #32]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fd1a 	bl	8001808 <RCC_SetFlashLatencyFromMSIRange>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e380      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dde:	f000 fc87 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 8000de2:	4602      	mov	r2, r0
 8000de4:	4b51      	ldr	r3, [pc, #324]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	091b      	lsrs	r3, r3, #4
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	4950      	ldr	r1, [pc, #320]	@ (8000f30 <HAL_RCC_OscConfig+0x274>)
 8000df0:	5ccb      	ldrb	r3, [r1, r3]
 8000df2:	f003 031f 	and.w	r3, r3, #31
 8000df6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfa:	4a4e      	ldr	r2, [pc, #312]	@ (8000f34 <HAL_RCC_OscConfig+0x278>)
 8000dfc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8000f38 <HAL_RCC_OscConfig+0x27c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fdb4 	bl	8000970 <HAL_InitTick>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d052      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	e364      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d032      	beq.n	8000e84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e1e:	4b43      	ldr	r3, [pc, #268]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a42      	ldr	r2, [pc, #264]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fdf1 	bl	8000a10 <HAL_GetTick>
 8000e2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e32:	f7ff fded 	bl	8000a10 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e34d      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e44:	4b39      	ldr	r3, [pc, #228]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f0      	beq.n	8000e32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e50:	4b36      	ldr	r3, [pc, #216]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a35      	ldr	r2, [pc, #212]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b33      	ldr	r3, [pc, #204]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	4930      	ldr	r1, [pc, #192]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	492b      	ldr	r1, [pc, #172]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	604b      	str	r3, [r1, #4]
 8000e82:	e01a      	b.n	8000eba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e84:	4b29      	ldr	r3, [pc, #164]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a28      	ldr	r2, [pc, #160]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e8a:	f023 0301 	bic.w	r3, r3, #1
 8000e8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fdbe 	bl	8000a10 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e98:	f7ff fdba 	bl	8000a10 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e31a      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000eaa:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0x1dc>
 8000eb6:	e000      	b.n	8000eba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d073      	beq.n	8000fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d005      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x21c>
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	2b0c      	cmp	r3, #12
 8000ed0:	d10e      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d10b      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d063      	beq.n	8000fac <HAL_RCC_OscConfig+0x2f0>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d15f      	bne.n	8000fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e2f7      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ef8:	d106      	bne.n	8000f08 <HAL_RCC_OscConfig+0x24c>
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e025      	b.n	8000f54 <HAL_RCC_OscConfig+0x298>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f10:	d114      	bne.n	8000f3c <HAL_RCC_OscConfig+0x280>
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a02      	ldr	r2, [pc, #8]	@ (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e013      	b.n	8000f54 <HAL_RCC_OscConfig+0x298>
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	08001bb8 	.word	0x08001bb8
 8000f34:	20000004 	.word	0x20000004
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	4ba0      	ldr	r3, [pc, #640]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a9f      	ldr	r2, [pc, #636]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b9d      	ldr	r3, [pc, #628]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a9c      	ldr	r2, [pc, #624]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d013      	beq.n	8000f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fd58 	bl	8000a10 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f64:	f7ff fd54 	bl	8000a10 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b64      	cmp	r3, #100	@ 0x64
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e2b4      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f76:	4b92      	ldr	r3, [pc, #584]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <HAL_RCC_OscConfig+0x2a8>
 8000f82:	e014      	b.n	8000fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f84:	f7ff fd44 	bl	8000a10 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fd40 	bl	8000a10 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b64      	cmp	r3, #100	@ 0x64
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e2a0      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f9e:	4b88      	ldr	r3, [pc, #544]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f0      	bne.n	8000f8c <HAL_RCC_OscConfig+0x2d0>
 8000faa:	e000      	b.n	8000fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d060      	beq.n	800107c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d005      	beq.n	8000fcc <HAL_RCC_OscConfig+0x310>
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2b0c      	cmp	r3, #12
 8000fc4:	d119      	bne.n	8000ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d116      	bne.n	8000ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fcc:	4b7c      	ldr	r3, [pc, #496]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x328>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e27d      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe4:	4b76      	ldr	r3, [pc, #472]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	061b      	lsls	r3, r3, #24
 8000ff2:	4973      	ldr	r1, [pc, #460]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff8:	e040      	b.n	800107c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d023      	beq.n	800104a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001002:	4b6f      	ldr	r3, [pc, #444]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a6e      	ldr	r2, [pc, #440]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100e:	f7ff fcff 	bl	8000a10 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001016:	f7ff fcfb 	bl	8000a10 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e25b      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001028:	4b65      	ldr	r3, [pc, #404]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001034:	4b62      	ldr	r3, [pc, #392]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	061b      	lsls	r3, r3, #24
 8001042:	495f      	ldr	r1, [pc, #380]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
 8001048:	e018      	b.n	800107c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104a:	4b5d      	ldr	r3, [pc, #372]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a5c      	ldr	r2, [pc, #368]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001056:	f7ff fcdb 	bl	8000a10 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105e:	f7ff fcd7 	bl	8000a10 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e237      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001070:	4b53      	ldr	r3, [pc, #332]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f0      	bne.n	800105e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	2b00      	cmp	r3, #0
 8001086:	d03c      	beq.n	8001102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d01c      	beq.n	80010ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001090:	4b4b      	ldr	r3, [pc, #300]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001096:	4a4a      	ldr	r2, [pc, #296]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a0:	f7ff fcb6 	bl	8000a10 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a8:	f7ff fcb2 	bl	8000a10 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e212      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ba:	4b41      	ldr	r3, [pc, #260]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 80010bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0ef      	beq.n	80010a8 <HAL_RCC_OscConfig+0x3ec>
 80010c8:	e01b      	b.n	8001102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ca:	4b3d      	ldr	r3, [pc, #244]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 80010cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010d0:	4a3b      	ldr	r2, [pc, #236]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010da:	f7ff fc99 	bl	8000a10 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e2:	f7ff fc95 	bl	8000a10 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e1f5      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010f4:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 80010f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1ef      	bne.n	80010e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80a6 	beq.w	800125c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001114:	4b2a      	ldr	r3, [pc, #168]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10d      	bne.n	800113c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001124:	4a26      	ldr	r2, [pc, #152]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112a:	6593      	str	r3, [r2, #88]	@ 0x58
 800112c:	4b24      	ldr	r3, [pc, #144]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 800112e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001138:	2301      	movs	r3, #1
 800113a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113c:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <HAL_RCC_OscConfig+0x508>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d118      	bne.n	800117a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <HAL_RCC_OscConfig+0x508>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1d      	ldr	r2, [pc, #116]	@ (80011c4 <HAL_RCC_OscConfig+0x508>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001154:	f7ff fc5c 	bl	8000a10 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115c:	f7ff fc58 	bl	8000a10 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e1b8      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <HAL_RCC_OscConfig+0x508>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <HAL_RCC_OscConfig+0x4d8>
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001188:	4a0d      	ldr	r2, [pc, #52]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001192:	e029      	b.n	80011e8 <HAL_RCC_OscConfig+0x52c>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b05      	cmp	r3, #5
 800119a:	d115      	bne.n	80011c8 <HAL_RCC_OscConfig+0x50c>
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 800119e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a2:	4a07      	ldr	r2, [pc, #28]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 80011ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011b2:	4a03      	ldr	r2, [pc, #12]	@ (80011c0 <HAL_RCC_OscConfig+0x504>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011bc:	e014      	b.n	80011e8 <HAL_RCC_OscConfig+0x52c>
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40007000 	.word	0x40007000
 80011c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80011ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ce:	4a9c      	ldr	r2, [pc, #624]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011d8:	4b99      	ldr	r3, [pc, #612]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80011da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011de:	4a98      	ldr	r2, [pc, #608]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80011e0:	f023 0304 	bic.w	r3, r3, #4
 80011e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d016      	beq.n	800121e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fc0e 	bl	8000a10 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011f6:	e00a      	b.n	800120e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f8:	f7ff fc0a 	bl	8000a10 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001206:	4293      	cmp	r3, r2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e168      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800120e:	4b8c      	ldr	r3, [pc, #560]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 8001210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0ed      	beq.n	80011f8 <HAL_RCC_OscConfig+0x53c>
 800121c:	e015      	b.n	800124a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121e:	f7ff fbf7 	bl	8000a10 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fbf3 	bl	8000a10 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e151      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800123c:	4b80      	ldr	r3, [pc, #512]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 800123e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1ed      	bne.n	8001226 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800124a:	7ffb      	ldrb	r3, [r7, #31]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001250:	4b7b      	ldr	r3, [pc, #492]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001254:	4a7a      	ldr	r2, [pc, #488]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 8001256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800125a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	2b00      	cmp	r3, #0
 8001266:	d03c      	beq.n	80012e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126c:	2b00      	cmp	r3, #0
 800126e:	d01c      	beq.n	80012aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001270:	4b73      	ldr	r3, [pc, #460]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 8001272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001276:	4a72      	ldr	r2, [pc, #456]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001280:	f7ff fbc6 	bl	8000a10 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001288:	f7ff fbc2 	bl	8000a10 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e122      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800129a:	4b69      	ldr	r3, [pc, #420]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 800129c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0ef      	beq.n	8001288 <HAL_RCC_OscConfig+0x5cc>
 80012a8:	e01b      	b.n	80012e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012aa:	4b65      	ldr	r3, [pc, #404]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80012ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012b0:	4a63      	ldr	r2, [pc, #396]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ba:	f7ff fba9 	bl	8000a10 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012c2:	f7ff fba5 	bl	8000a10 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e105      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012d4:	4b5a      	ldr	r3, [pc, #360]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80012d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ef      	bne.n	80012c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80f9 	beq.w	80014de <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	f040 80cf 	bne.w	8001494 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012f6:	4b52      	ldr	r3, [pc, #328]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0203 	and.w	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001306:	429a      	cmp	r2, r3
 8001308:	d12c      	bne.n	8001364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3b01      	subs	r3, #1
 8001316:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001318:	429a      	cmp	r2, r3
 800131a:	d123      	bne.n	8001364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001326:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001328:	429a      	cmp	r2, r3
 800132a:	d11b      	bne.n	8001364 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001336:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001338:	429a      	cmp	r2, r3
 800133a:	d113      	bne.n	8001364 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001346:	085b      	lsrs	r3, r3, #1
 8001348:	3b01      	subs	r3, #1
 800134a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800134c:	429a      	cmp	r2, r3
 800134e:	d109      	bne.n	8001364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	085b      	lsrs	r3, r3, #1
 800135c:	3b01      	subs	r3, #1
 800135e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001360:	429a      	cmp	r2, r3
 8001362:	d071      	beq.n	8001448 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b0c      	cmp	r3, #12
 8001368:	d068      	beq.n	800143c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800136a:	4b35      	ldr	r3, [pc, #212]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d105      	bne.n	8001382 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001376:	4b32      	ldr	r3, [pc, #200]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e0ac      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a2d      	ldr	r2, [pc, #180]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 800138c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001390:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001392:	f7ff fb3d 	bl	8000a10 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fb39 	bl	8000a10 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e099      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ac:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b8:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <HAL_RCC_OscConfig+0x788>)
 80013be:	4013      	ands	r3, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80013c8:	3a01      	subs	r2, #1
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	4311      	orrs	r1, r2
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013d2:	0212      	lsls	r2, r2, #8
 80013d4:	4311      	orrs	r1, r2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80013da:	0852      	lsrs	r2, r2, #1
 80013dc:	3a01      	subs	r2, #1
 80013de:	0552      	lsls	r2, r2, #21
 80013e0:	4311      	orrs	r1, r2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013e6:	0852      	lsrs	r2, r2, #1
 80013e8:	3a01      	subs	r2, #1
 80013ea:	0652      	lsls	r2, r2, #25
 80013ec:	4311      	orrs	r1, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013f2:	06d2      	lsls	r2, r2, #27
 80013f4:	430a      	orrs	r2, r1
 80013f6:	4912      	ldr	r1, [pc, #72]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 8001402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001406:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001408:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a0c      	ldr	r2, [pc, #48]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 800140e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001412:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001414:	f7ff fafc 	bl	8000a10 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff faf8 	bl	8000a10 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e058      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142e:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <HAL_RCC_OscConfig+0x784>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800143a:	e050      	b.n	80014de <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e04f      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
 8001440:	40021000 	.word	0x40021000
 8001444:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001448:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <HAL_RCC_OscConfig+0x82c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d144      	bne.n	80014de <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001454:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_RCC_OscConfig+0x82c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <HAL_RCC_OscConfig+0x82c>)
 800145a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800145e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001460:	4b21      	ldr	r3, [pc, #132]	@ (80014e8 <HAL_RCC_OscConfig+0x82c>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4a20      	ldr	r2, [pc, #128]	@ (80014e8 <HAL_RCC_OscConfig+0x82c>)
 8001466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800146a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800146c:	f7ff fad0 	bl	8000a10 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff facc 	bl	8000a10 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e02c      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_RCC_OscConfig+0x82c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x7b8>
 8001492:	e024      	b.n	80014de <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d01f      	beq.n	80014da <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <HAL_RCC_OscConfig+0x82c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <HAL_RCC_OscConfig+0x82c>)
 80014a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff fab3 	bl	8000a10 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff faaf 	bl	8000a10 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e00f      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_RCC_OscConfig+0x82c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_RCC_OscConfig+0x82c>)
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	4905      	ldr	r1, [pc, #20]	@ (80014e8 <HAL_RCC_OscConfig+0x82c>)
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_RCC_OscConfig+0x830>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
 80014d8:	e001      	b.n	80014de <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	feeefffc 	.word	0xfeeefffc

080014f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0e7      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001504:	4b75      	ldr	r3, [pc, #468]	@ (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d910      	bls.n	8001534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b72      	ldr	r3, [pc, #456]	@ (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 0207 	bic.w	r2, r3, #7
 800151a:	4970      	ldr	r1, [pc, #448]	@ (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b6e      	ldr	r3, [pc, #440]	@ (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0cf      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d010      	beq.n	8001562 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	4b66      	ldr	r3, [pc, #408]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800154c:	429a      	cmp	r2, r3
 800154e:	d908      	bls.n	8001562 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001550:	4b63      	ldr	r3, [pc, #396]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4960      	ldr	r1, [pc, #384]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 800155e:	4313      	orrs	r3, r2
 8001560:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d04c      	beq.n	8001608 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d107      	bne.n	8001586 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001576:	4b5a      	ldr	r3, [pc, #360]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d121      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0a6      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158e:	4b54      	ldr	r3, [pc, #336]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d115      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e09a      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a6:	4b4e      	ldr	r3, [pc, #312]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e08e      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b6:	4b4a      	ldr	r3, [pc, #296]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e086      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015c6:	4b46      	ldr	r3, [pc, #280]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f023 0203 	bic.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4943      	ldr	r1, [pc, #268]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015d8:	f7ff fa1a 	bl	8000a10 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff fa16 	bl	8000a10 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e06e      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b3a      	ldr	r3, [pc, #232]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 020c 	and.w	r2, r3, #12
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	429a      	cmp	r2, r3
 8001606:	d1eb      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d010      	beq.n	8001636 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001620:	429a      	cmp	r2, r3
 8001622:	d208      	bcs.n	8001636 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001624:	4b2e      	ldr	r3, [pc, #184]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	492b      	ldr	r1, [pc, #172]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001632:	4313      	orrs	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001636:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d210      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001644:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 0207 	bic.w	r2, r3, #7
 800164c:	4923      	ldr	r1, [pc, #140]	@ (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001654:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <HAL_RCC_ClockConfig+0x1ec>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e036      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001672:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	4918      	ldr	r1, [pc, #96]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4910      	ldr	r1, [pc, #64]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016a4:	f000 f824 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <HAL_RCC_ClockConfig+0x1f0>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	490b      	ldr	r1, [pc, #44]	@ (80016e4 <HAL_RCC_ClockConfig+0x1f4>)
 80016b6:	5ccb      	ldrb	r3, [r1, r3]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
 80016c0:	4a09      	ldr	r2, [pc, #36]	@ (80016e8 <HAL_RCC_ClockConfig+0x1f8>)
 80016c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <HAL_RCC_ClockConfig+0x1fc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff f951 	bl	8000970 <HAL_InitTick>
 80016ce:	4603      	mov	r3, r0
 80016d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80016d2:	7afb      	ldrb	r3, [r7, #11]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40022000 	.word	0x40022000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	08001bb8 	.word	0x08001bb8
 80016e8:	20000004 	.word	0x20000004
 80016ec:	20000008 	.word	0x20000008

080016f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016fe:	4b3e      	ldr	r3, [pc, #248]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001708:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x34>
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d121      	bne.n	8001762 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d11e      	bne.n	8001762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d107      	bne.n	8001740 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001730:	4b31      	ldr	r3, [pc, #196]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e005      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001740:	4b2d      	ldr	r3, [pc, #180]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800174c:	4a2b      	ldr	r2, [pc, #172]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10d      	bne.n	8001778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d102      	bne.n	800176e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001768:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x110>)
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	e004      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b08      	cmp	r3, #8
 8001772:	d101      	bne.n	8001778 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001774:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x114>)
 8001776:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b0c      	cmp	r3, #12
 800177c:	d134      	bne.n	80017e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800177e:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d003      	beq.n	8001796 <HAL_RCC_GetSysClockFreq+0xa6>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d003      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0xac>
 8001794:	e005      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001796:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x110>)
 8001798:	617b      	str	r3, [r7, #20]
      break;
 800179a:	e005      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800179c:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x114>)
 800179e:	617b      	str	r3, [r7, #20]
      break;
 80017a0:	e002      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	617b      	str	r3, [r7, #20]
      break;
 80017a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017a8:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	3301      	adds	r3, #1
 80017b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	fb03 f202 	mul.w	r2, r3, r2
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	0e5b      	lsrs	r3, r3, #25
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	3301      	adds	r3, #1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017e8:	69bb      	ldr	r3, [r7, #24]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	@ 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	08001bc8 	.word	0x08001bc8
 8001800:	00f42400 	.word	0x00f42400
 8001804:	007a1200 	.word	0x007a1200

08001808 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001814:	4b2a      	ldr	r3, [pc, #168]	@ (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001820:	f7ff f9e8 	bl	8000bf4 <HAL_PWREx_GetVoltageRange>
 8001824:	6178      	str	r0, [r7, #20]
 8001826:	e014      	b.n	8001852 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	4b25      	ldr	r3, [pc, #148]	@ (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	4a24      	ldr	r2, [pc, #144]	@ (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800182e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001832:	6593      	str	r3, [r2, #88]	@ 0x58
 8001834:	4b22      	ldr	r3, [pc, #136]	@ (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001840:	f7ff f9d8 	bl	8000bf4 <HAL_PWREx_GetVoltageRange>
 8001844:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001846:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184a:	4a1d      	ldr	r2, [pc, #116]	@ (80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001850:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001858:	d10b      	bne.n	8001872 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b80      	cmp	r3, #128	@ 0x80
 800185e:	d919      	bls.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2ba0      	cmp	r3, #160	@ 0xa0
 8001864:	d902      	bls.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001866:	2302      	movs	r3, #2
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	e013      	b.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800186c:	2301      	movs	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	e010      	b.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b80      	cmp	r3, #128	@ 0x80
 8001876:	d902      	bls.n	800187e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001878:	2303      	movs	r3, #3
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	e00a      	b.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b80      	cmp	r3, #128	@ 0x80
 8001882:	d102      	bne.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001884:	2302      	movs	r3, #2
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	e004      	b.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b70      	cmp	r3, #112	@ 0x70
 800188e:	d101      	bne.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001890:	2301      	movs	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001894:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 0207 	bic.w	r2, r3, #7
 800189c:	4909      	ldr	r1, [pc, #36]	@ (80018c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018a4:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d001      	beq.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40022000 	.word	0x40022000

080018c8 <malloc>:
 80018c8:	4b02      	ldr	r3, [pc, #8]	@ (80018d4 <malloc+0xc>)
 80018ca:	4601      	mov	r1, r0
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	f000 b82d 	b.w	800192c <_malloc_r>
 80018d2:	bf00      	nop
 80018d4:	20000010 	.word	0x20000010

080018d8 <free>:
 80018d8:	4b02      	ldr	r3, [pc, #8]	@ (80018e4 <free+0xc>)
 80018da:	4601      	mov	r1, r0
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	f000 b8f5 	b.w	8001acc <_free_r>
 80018e2:	bf00      	nop
 80018e4:	20000010 	.word	0x20000010

080018e8 <sbrk_aligned>:
 80018e8:	b570      	push	{r4, r5, r6, lr}
 80018ea:	4e0f      	ldr	r6, [pc, #60]	@ (8001928 <sbrk_aligned+0x40>)
 80018ec:	460c      	mov	r4, r1
 80018ee:	6831      	ldr	r1, [r6, #0]
 80018f0:	4605      	mov	r5, r0
 80018f2:	b911      	cbnz	r1, 80018fa <sbrk_aligned+0x12>
 80018f4:	f000 f8ae 	bl	8001a54 <_sbrk_r>
 80018f8:	6030      	str	r0, [r6, #0]
 80018fa:	4621      	mov	r1, r4
 80018fc:	4628      	mov	r0, r5
 80018fe:	f000 f8a9 	bl	8001a54 <_sbrk_r>
 8001902:	1c43      	adds	r3, r0, #1
 8001904:	d103      	bne.n	800190e <sbrk_aligned+0x26>
 8001906:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800190a:	4620      	mov	r0, r4
 800190c:	bd70      	pop	{r4, r5, r6, pc}
 800190e:	1cc4      	adds	r4, r0, #3
 8001910:	f024 0403 	bic.w	r4, r4, #3
 8001914:	42a0      	cmp	r0, r4
 8001916:	d0f8      	beq.n	800190a <sbrk_aligned+0x22>
 8001918:	1a21      	subs	r1, r4, r0
 800191a:	4628      	mov	r0, r5
 800191c:	f000 f89a 	bl	8001a54 <_sbrk_r>
 8001920:	3001      	adds	r0, #1
 8001922:	d1f2      	bne.n	800190a <sbrk_aligned+0x22>
 8001924:	e7ef      	b.n	8001906 <sbrk_aligned+0x1e>
 8001926:	bf00      	nop
 8001928:	20030dd0 	.word	0x20030dd0

0800192c <_malloc_r>:
 800192c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001930:	1ccd      	adds	r5, r1, #3
 8001932:	f025 0503 	bic.w	r5, r5, #3
 8001936:	3508      	adds	r5, #8
 8001938:	2d0c      	cmp	r5, #12
 800193a:	bf38      	it	cc
 800193c:	250c      	movcc	r5, #12
 800193e:	2d00      	cmp	r5, #0
 8001940:	4606      	mov	r6, r0
 8001942:	db01      	blt.n	8001948 <_malloc_r+0x1c>
 8001944:	42a9      	cmp	r1, r5
 8001946:	d904      	bls.n	8001952 <_malloc_r+0x26>
 8001948:	230c      	movs	r3, #12
 800194a:	6033      	str	r3, [r6, #0]
 800194c:	2000      	movs	r0, #0
 800194e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001952:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001a28 <_malloc_r+0xfc>
 8001956:	f000 f869 	bl	8001a2c <__malloc_lock>
 800195a:	f8d8 3000 	ldr.w	r3, [r8]
 800195e:	461c      	mov	r4, r3
 8001960:	bb44      	cbnz	r4, 80019b4 <_malloc_r+0x88>
 8001962:	4629      	mov	r1, r5
 8001964:	4630      	mov	r0, r6
 8001966:	f7ff ffbf 	bl	80018e8 <sbrk_aligned>
 800196a:	1c43      	adds	r3, r0, #1
 800196c:	4604      	mov	r4, r0
 800196e:	d158      	bne.n	8001a22 <_malloc_r+0xf6>
 8001970:	f8d8 4000 	ldr.w	r4, [r8]
 8001974:	4627      	mov	r7, r4
 8001976:	2f00      	cmp	r7, #0
 8001978:	d143      	bne.n	8001a02 <_malloc_r+0xd6>
 800197a:	2c00      	cmp	r4, #0
 800197c:	d04b      	beq.n	8001a16 <_malloc_r+0xea>
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	4639      	mov	r1, r7
 8001982:	4630      	mov	r0, r6
 8001984:	eb04 0903 	add.w	r9, r4, r3
 8001988:	f000 f864 	bl	8001a54 <_sbrk_r>
 800198c:	4581      	cmp	r9, r0
 800198e:	d142      	bne.n	8001a16 <_malloc_r+0xea>
 8001990:	6821      	ldr	r1, [r4, #0]
 8001992:	1a6d      	subs	r5, r5, r1
 8001994:	4629      	mov	r1, r5
 8001996:	4630      	mov	r0, r6
 8001998:	f7ff ffa6 	bl	80018e8 <sbrk_aligned>
 800199c:	3001      	adds	r0, #1
 800199e:	d03a      	beq.n	8001a16 <_malloc_r+0xea>
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	442b      	add	r3, r5
 80019a4:	6023      	str	r3, [r4, #0]
 80019a6:	f8d8 3000 	ldr.w	r3, [r8]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	bb62      	cbnz	r2, 8001a08 <_malloc_r+0xdc>
 80019ae:	f8c8 7000 	str.w	r7, [r8]
 80019b2:	e00f      	b.n	80019d4 <_malloc_r+0xa8>
 80019b4:	6822      	ldr	r2, [r4, #0]
 80019b6:	1b52      	subs	r2, r2, r5
 80019b8:	d420      	bmi.n	80019fc <_malloc_r+0xd0>
 80019ba:	2a0b      	cmp	r2, #11
 80019bc:	d917      	bls.n	80019ee <_malloc_r+0xc2>
 80019be:	1961      	adds	r1, r4, r5
 80019c0:	42a3      	cmp	r3, r4
 80019c2:	6025      	str	r5, [r4, #0]
 80019c4:	bf18      	it	ne
 80019c6:	6059      	strne	r1, [r3, #4]
 80019c8:	6863      	ldr	r3, [r4, #4]
 80019ca:	bf08      	it	eq
 80019cc:	f8c8 1000 	streq.w	r1, [r8]
 80019d0:	5162      	str	r2, [r4, r5]
 80019d2:	604b      	str	r3, [r1, #4]
 80019d4:	4630      	mov	r0, r6
 80019d6:	f000 f82f 	bl	8001a38 <__malloc_unlock>
 80019da:	f104 000b 	add.w	r0, r4, #11
 80019de:	1d23      	adds	r3, r4, #4
 80019e0:	f020 0007 	bic.w	r0, r0, #7
 80019e4:	1ac2      	subs	r2, r0, r3
 80019e6:	bf1c      	itt	ne
 80019e8:	1a1b      	subne	r3, r3, r0
 80019ea:	50a3      	strne	r3, [r4, r2]
 80019ec:	e7af      	b.n	800194e <_malloc_r+0x22>
 80019ee:	6862      	ldr	r2, [r4, #4]
 80019f0:	42a3      	cmp	r3, r4
 80019f2:	bf0c      	ite	eq
 80019f4:	f8c8 2000 	streq.w	r2, [r8]
 80019f8:	605a      	strne	r2, [r3, #4]
 80019fa:	e7eb      	b.n	80019d4 <_malloc_r+0xa8>
 80019fc:	4623      	mov	r3, r4
 80019fe:	6864      	ldr	r4, [r4, #4]
 8001a00:	e7ae      	b.n	8001960 <_malloc_r+0x34>
 8001a02:	463c      	mov	r4, r7
 8001a04:	687f      	ldr	r7, [r7, #4]
 8001a06:	e7b6      	b.n	8001976 <_malloc_r+0x4a>
 8001a08:	461a      	mov	r2, r3
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	42a3      	cmp	r3, r4
 8001a0e:	d1fb      	bne.n	8001a08 <_malloc_r+0xdc>
 8001a10:	2300      	movs	r3, #0
 8001a12:	6053      	str	r3, [r2, #4]
 8001a14:	e7de      	b.n	80019d4 <_malloc_r+0xa8>
 8001a16:	230c      	movs	r3, #12
 8001a18:	6033      	str	r3, [r6, #0]
 8001a1a:	4630      	mov	r0, r6
 8001a1c:	f000 f80c 	bl	8001a38 <__malloc_unlock>
 8001a20:	e794      	b.n	800194c <_malloc_r+0x20>
 8001a22:	6005      	str	r5, [r0, #0]
 8001a24:	e7d6      	b.n	80019d4 <_malloc_r+0xa8>
 8001a26:	bf00      	nop
 8001a28:	20030dd4 	.word	0x20030dd4

08001a2c <__malloc_lock>:
 8001a2c:	4801      	ldr	r0, [pc, #4]	@ (8001a34 <__malloc_lock+0x8>)
 8001a2e:	f000 b84b 	b.w	8001ac8 <__retarget_lock_acquire_recursive>
 8001a32:	bf00      	nop
 8001a34:	20030f10 	.word	0x20030f10

08001a38 <__malloc_unlock>:
 8001a38:	4801      	ldr	r0, [pc, #4]	@ (8001a40 <__malloc_unlock+0x8>)
 8001a3a:	f000 b846 	b.w	8001aca <__retarget_lock_release_recursive>
 8001a3e:	bf00      	nop
 8001a40:	20030f10 	.word	0x20030f10

08001a44 <memset>:
 8001a44:	4402      	add	r2, r0
 8001a46:	4603      	mov	r3, r0
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <memset+0xa>
 8001a4c:	4770      	bx	lr
 8001a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a52:	e7f9      	b.n	8001a48 <memset+0x4>

08001a54 <_sbrk_r>:
 8001a54:	b538      	push	{r3, r4, r5, lr}
 8001a56:	4d06      	ldr	r5, [pc, #24]	@ (8001a70 <_sbrk_r+0x1c>)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	602b      	str	r3, [r5, #0]
 8001a60:	f7fe fe2e 	bl	80006c0 <_sbrk>
 8001a64:	1c43      	adds	r3, r0, #1
 8001a66:	d102      	bne.n	8001a6e <_sbrk_r+0x1a>
 8001a68:	682b      	ldr	r3, [r5, #0]
 8001a6a:	b103      	cbz	r3, 8001a6e <_sbrk_r+0x1a>
 8001a6c:	6023      	str	r3, [r4, #0]
 8001a6e:	bd38      	pop	{r3, r4, r5, pc}
 8001a70:	20030f14 	.word	0x20030f14

08001a74 <__errno>:
 8001a74:	4b01      	ldr	r3, [pc, #4]	@ (8001a7c <__errno+0x8>)
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000010 	.word	0x20000010

08001a80 <__libc_init_array>:
 8001a80:	b570      	push	{r4, r5, r6, lr}
 8001a82:	4d0d      	ldr	r5, [pc, #52]	@ (8001ab8 <__libc_init_array+0x38>)
 8001a84:	4c0d      	ldr	r4, [pc, #52]	@ (8001abc <__libc_init_array+0x3c>)
 8001a86:	1b64      	subs	r4, r4, r5
 8001a88:	10a4      	asrs	r4, r4, #2
 8001a8a:	2600      	movs	r6, #0
 8001a8c:	42a6      	cmp	r6, r4
 8001a8e:	d109      	bne.n	8001aa4 <__libc_init_array+0x24>
 8001a90:	4d0b      	ldr	r5, [pc, #44]	@ (8001ac0 <__libc_init_array+0x40>)
 8001a92:	4c0c      	ldr	r4, [pc, #48]	@ (8001ac4 <__libc_init_array+0x44>)
 8001a94:	f000 f864 	bl	8001b60 <_init>
 8001a98:	1b64      	subs	r4, r4, r5
 8001a9a:	10a4      	asrs	r4, r4, #2
 8001a9c:	2600      	movs	r6, #0
 8001a9e:	42a6      	cmp	r6, r4
 8001aa0:	d105      	bne.n	8001aae <__libc_init_array+0x2e>
 8001aa2:	bd70      	pop	{r4, r5, r6, pc}
 8001aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aa8:	4798      	blx	r3
 8001aaa:	3601      	adds	r6, #1
 8001aac:	e7ee      	b.n	8001a8c <__libc_init_array+0xc>
 8001aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ab2:	4798      	blx	r3
 8001ab4:	3601      	adds	r6, #1
 8001ab6:	e7f2      	b.n	8001a9e <__libc_init_array+0x1e>
 8001ab8:	08001bf8 	.word	0x08001bf8
 8001abc:	08001bf8 	.word	0x08001bf8
 8001ac0:	08001bf8 	.word	0x08001bf8
 8001ac4:	08001bfc 	.word	0x08001bfc

08001ac8 <__retarget_lock_acquire_recursive>:
 8001ac8:	4770      	bx	lr

08001aca <__retarget_lock_release_recursive>:
 8001aca:	4770      	bx	lr

08001acc <_free_r>:
 8001acc:	b538      	push	{r3, r4, r5, lr}
 8001ace:	4605      	mov	r5, r0
 8001ad0:	2900      	cmp	r1, #0
 8001ad2:	d041      	beq.n	8001b58 <_free_r+0x8c>
 8001ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ad8:	1f0c      	subs	r4, r1, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bfb8      	it	lt
 8001ade:	18e4      	addlt	r4, r4, r3
 8001ae0:	f7ff ffa4 	bl	8001a2c <__malloc_lock>
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <_free_r+0x90>)
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	b933      	cbnz	r3, 8001af8 <_free_r+0x2c>
 8001aea:	6063      	str	r3, [r4, #4]
 8001aec:	6014      	str	r4, [r2, #0]
 8001aee:	4628      	mov	r0, r5
 8001af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001af4:	f7ff bfa0 	b.w	8001a38 <__malloc_unlock>
 8001af8:	42a3      	cmp	r3, r4
 8001afa:	d908      	bls.n	8001b0e <_free_r+0x42>
 8001afc:	6820      	ldr	r0, [r4, #0]
 8001afe:	1821      	adds	r1, r4, r0
 8001b00:	428b      	cmp	r3, r1
 8001b02:	bf01      	itttt	eq
 8001b04:	6819      	ldreq	r1, [r3, #0]
 8001b06:	685b      	ldreq	r3, [r3, #4]
 8001b08:	1809      	addeq	r1, r1, r0
 8001b0a:	6021      	streq	r1, [r4, #0]
 8001b0c:	e7ed      	b.n	8001aea <_free_r+0x1e>
 8001b0e:	461a      	mov	r2, r3
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	b10b      	cbz	r3, 8001b18 <_free_r+0x4c>
 8001b14:	42a3      	cmp	r3, r4
 8001b16:	d9fa      	bls.n	8001b0e <_free_r+0x42>
 8001b18:	6811      	ldr	r1, [r2, #0]
 8001b1a:	1850      	adds	r0, r2, r1
 8001b1c:	42a0      	cmp	r0, r4
 8001b1e:	d10b      	bne.n	8001b38 <_free_r+0x6c>
 8001b20:	6820      	ldr	r0, [r4, #0]
 8001b22:	4401      	add	r1, r0
 8001b24:	1850      	adds	r0, r2, r1
 8001b26:	4283      	cmp	r3, r0
 8001b28:	6011      	str	r1, [r2, #0]
 8001b2a:	d1e0      	bne.n	8001aee <_free_r+0x22>
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	6053      	str	r3, [r2, #4]
 8001b32:	4408      	add	r0, r1
 8001b34:	6010      	str	r0, [r2, #0]
 8001b36:	e7da      	b.n	8001aee <_free_r+0x22>
 8001b38:	d902      	bls.n	8001b40 <_free_r+0x74>
 8001b3a:	230c      	movs	r3, #12
 8001b3c:	602b      	str	r3, [r5, #0]
 8001b3e:	e7d6      	b.n	8001aee <_free_r+0x22>
 8001b40:	6820      	ldr	r0, [r4, #0]
 8001b42:	1821      	adds	r1, r4, r0
 8001b44:	428b      	cmp	r3, r1
 8001b46:	bf04      	itt	eq
 8001b48:	6819      	ldreq	r1, [r3, #0]
 8001b4a:	685b      	ldreq	r3, [r3, #4]
 8001b4c:	6063      	str	r3, [r4, #4]
 8001b4e:	bf04      	itt	eq
 8001b50:	1809      	addeq	r1, r1, r0
 8001b52:	6021      	streq	r1, [r4, #0]
 8001b54:	6054      	str	r4, [r2, #4]
 8001b56:	e7ca      	b.n	8001aee <_free_r+0x22>
 8001b58:	bd38      	pop	{r3, r4, r5, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20030dd4 	.word	0x20030dd4

08001b60 <_init>:
 8001b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b62:	bf00      	nop
 8001b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b66:	bc08      	pop	{r3}
 8001b68:	469e      	mov	lr, r3
 8001b6a:	4770      	bx	lr

08001b6c <_fini>:
 8001b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6e:	bf00      	nop
 8001b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b72:	bc08      	pop	{r3}
 8001b74:	469e      	mov	lr, r3
 8001b76:	4770      	bx	lr
