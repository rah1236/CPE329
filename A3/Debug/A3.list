
A3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019b4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08001b60  08001b60  00002b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d08  08001d08  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d08  08001d08  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d08  08001d08  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d08  08001d08  00002d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d0c  08001d0c  00002d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001d10  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001d1c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001d1c  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000489a  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011c4  00000000  00000000  000078d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  00008aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000439  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028281  00000000  00000000  000094a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006476  00000000  00000000  0003172a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a11  00000000  00000000  00037ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a5b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001510  00000000  00000000  0012a5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0012bb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001b48 	.word	0x08001b48

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001b48 	.word	0x08001b48

080001ec <Keypad_Init>:
uint8_t Keypad_CheckKeyPressed(uint8_t column_row_byte);



// Use to initialize Keypad GPIO and other funcitonality of keypad
void Keypad_Init(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	// configure GPIO pins PC0, PC1, PC2, PC3 for:
	// output mode, push-pull, no pull up or pull down, high speed
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 80001f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000268 <Keypad_Init+0x7c>)
 80001f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000268 <Keypad_Init+0x7c>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOC->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 );
 80001fc:	4b1b      	ldr	r3, [pc, #108]	@ (800026c <Keypad_Init+0x80>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a1a      	ldr	r2, [pc, #104]	@ (800026c <Keypad_Init+0x80>)
 8000202:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000206:	6013      	str	r3, [r2, #0]
	GPIOC->MODER   |=  (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0);
 8000208:	4b18      	ldr	r3, [pc, #96]	@ (800026c <Keypad_Init+0x80>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a17      	ldr	r2, [pc, #92]	@ (800026c <Keypad_Init+0x80>)
 800020e:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000212:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 8000214:	4b15      	ldr	r3, [pc, #84]	@ (800026c <Keypad_Init+0x80>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a14      	ldr	r2, [pc, #80]	@ (800026c <Keypad_Init+0x80>)
 800021a:	f023 030f 	bic.w	r3, r3, #15
 800021e:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 8000220:	4b12      	ldr	r3, [pc, #72]	@ (800026c <Keypad_Init+0x80>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	4a11      	ldr	r2, [pc, #68]	@ (800026c <Keypad_Init+0x80>)
 8000226:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800022a:	60d3      	str	r3, [r2, #12]
	GPIOC->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 800022c:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <Keypad_Init+0x80>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	4a0e      	ldr	r2, [pc, #56]	@ (800026c <Keypad_Init+0x80>)
 8000232:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 8000236:	6093      	str	r3, [r2, #8]
							  (3 << GPIO_OSPEEDR_OSPEED1_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED2_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED3_Pos));

	// configure GPIO pins PC4, PC5, PC6 for Input, with pull down
	GPIOC->MODER   &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 );
 8000238:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <Keypad_Init+0x80>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0b      	ldr	r2, [pc, #44]	@ (800026c <Keypad_Init+0x80>)
 800023e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8000242:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD4_1 | GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1);
 8000244:	4b09      	ldr	r3, [pc, #36]	@ (800026c <Keypad_Init+0x80>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4a08      	ldr	r2, [pc, #32]	@ (800026c <Keypad_Init+0x80>)
 800024a:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 800024e:	60d3      	str	r3, [r2, #12]


	 // preset PC0, PC1, PC2, PC3 to 0
	GPIOC->BRR |= (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 );
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <Keypad_Init+0x80>)
 8000252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000254:	4a05      	ldr	r2, [pc, #20]	@ (800026c <Keypad_Init+0x80>)
 8000256:	f043 030f 	orr.w	r3, r3, #15
 800025a:	6293      	str	r3, [r2, #40]	@ 0x28

}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000
 800026c:	48000800 	.word	0x48000800

08000270 <Keypad_CheckKeyPressed>:
 *                                  N/A   Row     Column
 *  BEWARNED: Row data is a standard integer, it counts up to 4,
 *  Column data is BITWISE!!!, bit 0 represents column 1, bit 1 column 2, etc
 *  This function returns chars relating to which key is pressed
 */
uint8_t Keypad_CheckKeyPressed(uint8_t column_row_byte){
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]

	uint8_t var;

	switch (column_row_byte) {
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	3b01      	subs	r3, #1
 800027e:	2b1b      	cmp	r3, #27
 8000280:	d85e      	bhi.n	8000340 <Keypad_CheckKeyPressed+0xd0>
 8000282:	a201      	add	r2, pc, #4	@ (adr r2, 8000288 <Keypad_CheckKeyPressed+0x18>)
 8000284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000288:	080002f9 	.word	0x080002f9
 800028c:	080002ff 	.word	0x080002ff
 8000290:	08000341 	.word	0x08000341
 8000294:	08000305 	.word	0x08000305
 8000298:	08000341 	.word	0x08000341
 800029c:	08000341 	.word	0x08000341
 80002a0:	08000341 	.word	0x08000341
 80002a4:	08000341 	.word	0x08000341
 80002a8:	0800030b 	.word	0x0800030b
 80002ac:	08000311 	.word	0x08000311
 80002b0:	08000341 	.word	0x08000341
 80002b4:	08000317 	.word	0x08000317
 80002b8:	08000341 	.word	0x08000341
 80002bc:	08000341 	.word	0x08000341
 80002c0:	08000341 	.word	0x08000341
 80002c4:	08000341 	.word	0x08000341
 80002c8:	0800031d 	.word	0x0800031d
 80002cc:	08000323 	.word	0x08000323
 80002d0:	08000341 	.word	0x08000341
 80002d4:	08000329 	.word	0x08000329
 80002d8:	08000341 	.word	0x08000341
 80002dc:	08000341 	.word	0x08000341
 80002e0:	08000341 	.word	0x08000341
 80002e4:	08000341 	.word	0x08000341
 80002e8:	0800032f 	.word	0x0800032f
 80002ec:	08000335 	.word	0x08000335
 80002f0:	08000341 	.word	0x08000341
 80002f4:	0800033b 	.word	0x0800033b
	  case 0x01: //Column 1, Row 1
		  var = ('1');
 80002f8:	2331      	movs	r3, #49	@ 0x31
 80002fa:	73fb      	strb	r3, [r7, #15]
		  break;
 80002fc:	e023      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>
	  case 0x02: //Column 2, Row 1
		  var = ('2');
 80002fe:	2332      	movs	r3, #50	@ 0x32
 8000300:	73fb      	strb	r3, [r7, #15]
		  break;
 8000302:	e020      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>

	  case 0x04: //Column 3, Row 1
		  var = ('3');
 8000304:	2333      	movs	r3, #51	@ 0x33
 8000306:	73fb      	strb	r3, [r7, #15]
		  break;
 8000308:	e01d      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>

	  case 0x09: //Column 1, Row 2
		  var = ('4');
 800030a:	2334      	movs	r3, #52	@ 0x34
 800030c:	73fb      	strb	r3, [r7, #15]
		  break;
 800030e:	e01a      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>

	  case 0x0a: //Column 2, Row 2
		  var = ('5');
 8000310:	2335      	movs	r3, #53	@ 0x35
 8000312:	73fb      	strb	r3, [r7, #15]
		  break;
 8000314:	e017      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>

	  case 0x0c: //Column 3, Row 2
		  var = ('6');
 8000316:	2336      	movs	r3, #54	@ 0x36
 8000318:	73fb      	strb	r3, [r7, #15]
		  break;
 800031a:	e014      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>

	  case 0x11: //Column 1, Row 3
		  var = ('7');
 800031c:	2337      	movs	r3, #55	@ 0x37
 800031e:	73fb      	strb	r3, [r7, #15]
		  break;
 8000320:	e011      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>

	  case 0x12: //Column 2, Row 3
		  var = ('8');
 8000322:	2338      	movs	r3, #56	@ 0x38
 8000324:	73fb      	strb	r3, [r7, #15]
		  break;
 8000326:	e00e      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>

	  case 0x14: //Column 2, Row 3
		  var = ('9');
 8000328:	2339      	movs	r3, #57	@ 0x39
 800032a:	73fb      	strb	r3, [r7, #15]
		  break;
 800032c:	e00b      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>

	  case 0x19: //Column 1, Row 4
		  var = ('*');
 800032e:	232a      	movs	r3, #42	@ 0x2a
 8000330:	73fb      	strb	r3, [r7, #15]
		  break;
 8000332:	e008      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>

	  case 0x1a: //Column 2, Row 4
		  var = ('0');
 8000334:	2330      	movs	r3, #48	@ 0x30
 8000336:	73fb      	strb	r3, [r7, #15]
		  break;
 8000338:	e005      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>

	  case 0x1c: //Column 3, Row 4
		  var = ('#');
 800033a:	2323      	movs	r3, #35	@ 0x23
 800033c:	73fb      	strb	r3, [r7, #15]
		  break;
 800033e:	e002      	b.n	8000346 <Keypad_CheckKeyPressed+0xd6>

	  default:
		  var = ('.'); //period for no press
 8000340:	232e      	movs	r3, #46	@ 0x2e
 8000342:	73fb      	strb	r3, [r7, #15]
		  break;
 8000344:	bf00      	nop
	}

	return var;
 8000346:	7bfb      	ldrb	r3, [r7, #15]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <Keypad_Read>:
/* The function Keypad_Read polls through the keypad row pins a total of
 *  DEBOUNCE_ELEMENTS * 3 times, and returns the most recently
 *  consistently pressed key.
 *
 */
uint8_t Keypad_Read(void){
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
	uint8_t last_key_pressed;
	uint8_t current_key_pressed;


	//Run the polling code DEBOUNCE_ELEMENTS number of times
	for(int debounce_round = 0; debounce_round < DEBOUNCE_ELEMENTS; debounce_round++){
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	e033      	b.n	80003c8 <Keypad_Read+0x74>
		// Poll through 4 rows
		for(int polled_row = 0; polled_row < ROWS; polled_row++){
 8000360:	2300      	movs	r3, #0
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	e02a      	b.n	80003bc <Keypad_Read+0x68>

			//Set current polled row high
			GPIOC->ODR = (1 << polled_row);
 8000366:	2201      	movs	r2, #1
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	409a      	lsls	r2, r3
 800036c:	4b1d      	ldr	r3, [pc, #116]	@ (80003e4 <Keypad_Read+0x90>)
 800036e:	615a      	str	r2, [r3, #20]

			//Get currently pressed key in encoded form
			encoded_key_pressed = (polled_row<<3) | ((GPIOC->IDR >> 4));
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	b2db      	uxtb	r3, r3
 8000374:	00db      	lsls	r3, r3, #3
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b1a      	ldr	r3, [pc, #104]	@ (80003e4 <Keypad_Read+0x90>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	091b      	lsrs	r3, r3, #4
 800037e:	b2db      	uxtb	r3, r3
 8000380:	4313      	orrs	r3, r2
 8000382:	71fb      	strb	r3, [r7, #7]

			// if a key was pressed
			if (Keypad_CheckKeyPressed(encoded_key_pressed) != '.'){
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff72 	bl	8000270 <Keypad_CheckKeyPressed>
 800038c:	4603      	mov	r3, r0
 800038e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000390:	d005      	beq.n	800039e <Keypad_Read+0x4a>
				// record WHICH key was pressed
				current_key_pressed = Keypad_CheckKeyPressed(encoded_key_pressed);
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ff6b 	bl	8000270 <Keypad_CheckKeyPressed>
 800039a:	4603      	mov	r3, r0
 800039c:	74bb      	strb	r3, [r7, #18]
			}

			//if the last key pressed isn't the same as the current key pressed
			if (last_key_pressed != current_key_pressed){
 800039e:	7cfa      	ldrb	r2, [r7, #19]
 80003a0:	7cbb      	ldrb	r3, [r7, #18]
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d003      	beq.n	80003ae <Keypad_Read+0x5a>
				//Record the change
				number_of_key_changes++;
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	3301      	adds	r3, #1
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	e001      	b.n	80003b2 <Keypad_Read+0x5e>
			}
			//if the last key pressed is the same as the current key pressed,
			else {
				//Reset the change counter
				number_of_key_changes = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
			}

			//Set the current key pressed to be the last key pressed before polling again
			last_key_pressed = current_key_pressed;
 80003b2:	7cbb      	ldrb	r3, [r7, #18]
 80003b4:	74fb      	strb	r3, [r7, #19]
		for(int polled_row = 0; polled_row < ROWS; polled_row++){
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	3301      	adds	r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	2b03      	cmp	r3, #3
 80003c0:	ddd1      	ble.n	8000366 <Keypad_Read+0x12>
	for(int debounce_round = 0; debounce_round < DEBOUNCE_ELEMENTS; debounce_round++){
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	3301      	adds	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	2b04      	cmp	r3, #4
 80003cc:	ddc8      	ble.n	8000360 <Keypad_Read+0xc>
		}
	}
		//If the last key pressed hasn't changed in DEBOUNCE_ELEMENTS number of polling cycles
		//return the last key pressed, otherwise, return the null character
		return((number_of_key_changes == 0) ? last_key_pressed : '\0');
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d101      	bne.n	80003d8 <Keypad_Read+0x84>
 80003d4:	7cfb      	ldrb	r3, [r7, #19]
 80003d6:	e000      	b.n	80003da <Keypad_Read+0x86>
 80003d8:	2300      	movs	r3, #0


}
 80003da:	4618      	mov	r0, r3
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	48000800 	.word	0x48000800

080003e8 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <delay_us+0x50>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a11      	ldr	r2, [pc, #68]	@ (800043c <delay_us+0x54>)
 80003f6:	fba2 2303 	umull	r2, r3, r2, r3
 80003fa:	0c9b      	lsrs	r3, r3, #18
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	fb02 f303 	mul.w	r3, r2, r3
 8000402:	4a0f      	ldr	r2, [pc, #60]	@ (8000440 <delay_us+0x58>)
 8000404:	3b01      	subs	r3, #1
 8000406:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 8000408:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <delay_us+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <delay_us+0x58>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0b      	ldr	r2, [pc, #44]	@ (8000440 <delay_us+0x58>)
 8000414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000418:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 800041a:	bf00      	nop
 800041c:	4b08      	ldr	r3, [pc, #32]	@ (8000440 <delay_us+0x58>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000424:	2b00      	cmp	r3, #0
 8000426:	d0f9      	beq.n	800041c <delay_us+0x34>
}
 8000428:	bf00      	nop
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000
 800043c:	431bde83 	.word	0x431bde83
 8000440:	e000e010 	.word	0xe000e010

08000444 <Lcd_pulse_ENA>:


void Lcd_pulse_ENA( void )  {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
// ENAble line sends command on falling edge
// set to restore default then clear to trigger
   LCD_PORT->ODR   |= ( LCD_EN );         	// ENABLE = HI
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <Lcd_pulse_ENA+0x2c>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a08      	ldr	r2, [pc, #32]	@ (8000470 <Lcd_pulse_ENA+0x2c>)
 800044e:	f043 0302 	orr.w	r3, r3, #2
 8000452:	6153      	str	r3, [r2, #20]
   delay_us( DELAY );                         // TDDR > 320 ns
 8000454:	2032      	movs	r0, #50	@ 0x32
 8000456:	f7ff ffc7 	bl	80003e8 <delay_us>
   LCD_PORT->ODR   &= ~( LCD_EN );        // ENABLE = LOW
 800045a:	4b05      	ldr	r3, [pc, #20]	@ (8000470 <Lcd_pulse_ENA+0x2c>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a04      	ldr	r2, [pc, #16]	@ (8000470 <Lcd_pulse_ENA+0x2c>)
 8000460:	f023 0302 	bic.w	r3, r3, #2
 8000464:	6153      	str	r3, [r2, #20]
   delay_us( DELAY );                         // low values flakey, see A3:p.1
 8000466:	2032      	movs	r0, #50	@ 0x32
 8000468:	f7ff ffbe 	bl	80003e8 <delay_us>
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	48000c00 	.word	0x48000c00

08000474 <Lcd_4b_command>:

void Lcd_4b_command( uint8_t command )  {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
// LCD command using high nibble only - used for 'wake-up' 0x30 commands
   LCD_PORT->ODR   &= ~( LCD_DATA_BITS ); 	// clear DATA bits
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <Lcd_4b_command+0x3c>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a0b      	ldr	r2, [pc, #44]	@ (80004b0 <Lcd_4b_command+0x3c>)
 8000484:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8000488:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( command >> 4 ) << 3;   // DATA = command
 800048a:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <Lcd_4b_command+0x3c>)
 800048c:	695a      	ldr	r2, [r3, #20]
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	091b      	lsrs	r3, r3, #4
 8000492:	b2db      	uxtb	r3, r3
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	4906      	ldr	r1, [pc, #24]	@ (80004b0 <Lcd_4b_command+0x3c>)
 8000498:	4313      	orrs	r3, r2
 800049a:	614b      	str	r3, [r1, #20]
   delay_us( DELAY );
 800049c:	2032      	movs	r0, #50	@ 0x32
 800049e:	f7ff ffa3 	bl	80003e8 <delay_us>
   Lcd_pulse_ENA( );
 80004a2:	f7ff ffcf 	bl	8000444 <Lcd_pulse_ENA>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	48000c00 	.word	0x48000c00

080004b4 <Lcd_command>:

void Lcd_command( uint8_t command )  {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
// send command to LCD in 4-bit instruction mode
// HIGH nibble then LOW nibble, timing sensitive
   LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 80004be:	4b17      	ldr	r3, [pc, #92]	@ (800051c <Lcd_command+0x68>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a16      	ldr	r2, [pc, #88]	@ (800051c <Lcd_command+0x68>)
 80004c4:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 80004c8:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( (command>>4)<<3 & LCD_DATA_BITS ); // HIGH shifted low
 80004ca:	4b14      	ldr	r3, [pc, #80]	@ (800051c <Lcd_command+0x68>)
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	091b      	lsrs	r3, r3, #4
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80004da:	4910      	ldr	r1, [pc, #64]	@ (800051c <Lcd_command+0x68>)
 80004dc:	4313      	orrs	r3, r2
 80004de:	614b      	str	r3, [r1, #20]
   delay_us( DELAY );
 80004e0:	2032      	movs	r0, #50	@ 0x32
 80004e2:	f7ff ff81 	bl	80003e8 <delay_us>
   Lcd_pulse_ENA( );                                    // latch HIGH NIBBLE
 80004e6:	f7ff ffad 	bl	8000444 <Lcd_pulse_ENA>

   LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 80004ea:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <Lcd_command+0x68>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a0b      	ldr	r2, [pc, #44]	@ (800051c <Lcd_command+0x68>)
 80004f0:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 80004f4:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( command<<3 & LCD_DATA_BITS );      // LOW nibble
 80004f6:	4b09      	ldr	r3, [pc, #36]	@ (800051c <Lcd_command+0x68>)
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	00db      	lsls	r3, r3, #3
 80004fe:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8000502:	4906      	ldr	r1, [pc, #24]	@ (800051c <Lcd_command+0x68>)
 8000504:	4313      	orrs	r3, r2
 8000506:	614b      	str	r3, [r1, #20]
   delay_us( DELAY );
 8000508:	2032      	movs	r0, #50	@ 0x32
 800050a:	f7ff ff6d 	bl	80003e8 <delay_us>
   Lcd_pulse_ENA( );                                    // latch LOW NIBBLE
 800050e:	f7ff ff99 	bl	8000444 <Lcd_pulse_ENA>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	48000c00 	.word	0x48000c00

08000520 <Lcd_write_char>:

void Lcd_write_char( uint8_t letter )  {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
// calls LCD_command() w/char data; assumes all ctrl bits set LO in LCD_init()
   LCD_PORT->ODR   |= (LCD_RS);       // RS = HI for data to address
 800052a:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <Lcd_write_char+0x38>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a0a      	ldr	r2, [pc, #40]	@ (8000558 <Lcd_write_char+0x38>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6153      	str	r3, [r2, #20]
   delay_us( DELAY );
 8000536:	2032      	movs	r0, #50	@ 0x32
 8000538:	f7ff ff56 	bl	80003e8 <delay_us>
   Lcd_command( letter );             // character to print
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ffb8 	bl	80004b4 <Lcd_command>
   LCD_PORT->ODR   &= ~(LCD_RS);      // RS = LO
 8000544:	4b04      	ldr	r3, [pc, #16]	@ (8000558 <Lcd_write_char+0x38>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4a03      	ldr	r2, [pc, #12]	@ (8000558 <Lcd_write_char+0x38>)
 800054a:	f023 0304 	bic.w	r3, r3, #4
 800054e:	6153      	str	r3, [r2, #20]
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	48000c00 	.word	0x48000c00

0800055c <Lcd_write_string>:


void Lcd_write_string( char *text , uint8_t row){
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]
 * row accepts either a 0 for first row or 1 for the second row
 *
 *
 */

	if (row == 0){
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d103      	bne.n	8000576 <Lcd_write_string+0x1a>
		Lcd_command(0x80); // Position cursor at row 1
 800056e:	2080      	movs	r0, #128	@ 0x80
 8000570:	f7ff ffa0 	bl	80004b4 <Lcd_command>
 8000574:	e002      	b.n	800057c <Lcd_write_string+0x20>
	}
	else {
		Lcd_command(0xC0); //Position cursor at row 2
 8000576:	20c0      	movs	r0, #192	@ 0xc0
 8000578:	f7ff ff9c 	bl	80004b4 <Lcd_command>
	}
	for (int idx = 0; idx < 17; idx++){
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e013      	b.n	80005aa <Lcd_write_string+0x4e>
		//If end of string
		if (text[idx] == '\0'){
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d103      	bne.n	8000596 <Lcd_write_string+0x3a>
			// Fill spaces on anything thats not in the string
			Lcd_write_char(' ');
 800058e:	2020      	movs	r0, #32
 8000590:	f7ff ffc6 	bl	8000520 <Lcd_write_char>
 8000594:	e006      	b.n	80005a4 <Lcd_write_string+0x48>
		}
		else{
			// Otherwise write the character in the string
			Lcd_write_char(text[idx]);
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ffbe 	bl	8000520 <Lcd_write_char>
	for (int idx = 0; idx < 17; idx++){
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b10      	cmp	r3, #16
 80005ae:	dde8      	ble.n	8000582 <Lcd_write_string+0x26>
		}
	}
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <Lcd_backlight_on>:

void Lcd_backlight_on(void){
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
	// Enable backlight on the LCD
	 LCD_PORT->ODR |= LCD_BL;
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <Lcd_backlight_on+0x1c>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4a04      	ldr	r2, [pc, #16]	@ (80005d8 <Lcd_backlight_on+0x1c>)
 80005c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ca:	6153      	str	r3, [r2, #20]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	48000c00 	.word	0x48000c00

080005dc <Lcd_backlight_off>:

void Lcd_backlight_off(void){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	// Disable backlight on the LCD
	 LCD_PORT->ODR &= ~LCD_BL;
 80005e0:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <Lcd_backlight_off+0x1c>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <Lcd_backlight_off+0x1c>)
 80005e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80005ea:	6153      	str	r3, [r2, #20]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	48000c00 	.word	0x48000c00

080005fc <Lcd_Init>:

// Enable GPIO pins and initialize the LCD display
void Lcd_Init(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	// configure GPIO pins PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7 for:
	// output mode, push-pull, no pull up or pull down, high speed
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIODEN);
 8000602:	4b34      	ldr	r3, [pc, #208]	@ (80006d4 <Lcd_Init+0xd8>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	4a33      	ldr	r2, [pc, #204]	@ (80006d4 <Lcd_Init+0xd8>)
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOD->MODER   &= ~(GPIO_MODER_MODE0
 800060e:	4b32      	ldr	r3, [pc, #200]	@ (80006d8 <Lcd_Init+0xdc>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a31      	ldr	r2, [pc, #196]	@ (80006d8 <Lcd_Init+0xdc>)
 8000614:	0c1b      	lsrs	r3, r3, #16
 8000616:	041b      	lsls	r3, r3, #16
 8000618:	6013      	str	r3, [r2, #0]
							| GPIO_MODER_MODE4
							| GPIO_MODER_MODE5
							| GPIO_MODER_MODE6
							| GPIO_MODER_MODE7);

	GPIOD->MODER   |=  (GPIO_MODER_MODE0_0
 800061a:	4b2f      	ldr	r3, [pc, #188]	@ (80006d8 <Lcd_Init+0xdc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a2e      	ldr	r2, [pc, #184]	@ (80006d8 <Lcd_Init+0xdc>)
 8000620:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000624:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000628:	6013      	str	r3, [r2, #0]
							| GPIO_MODER_MODE4_0
							| GPIO_MODER_MODE5_0
							| GPIO_MODER_MODE6_0
							| GPIO_MODER_MODE7_0);

	GPIOD->OTYPER  &= ~(GPIO_OTYPER_OT0
 800062a:	4b2b      	ldr	r3, [pc, #172]	@ (80006d8 <Lcd_Init+0xdc>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	4a2a      	ldr	r2, [pc, #168]	@ (80006d8 <Lcd_Init+0xdc>)
 8000630:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000634:	6053      	str	r3, [r2, #4]
							| GPIO_OTYPER_OT4
							| GPIO_OTYPER_OT5
							| GPIO_OTYPER_OT6
							| GPIO_OTYPER_OT7);

	GPIOD->PUPDR   &= ~(GPIO_PUPDR_PUPD0
 8000636:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <Lcd_Init+0xdc>)
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <Lcd_Init+0xdc>)
 800063c:	0c1b      	lsrs	r3, r3, #16
 800063e:	041b      	lsls	r3, r3, #16
 8000640:	60d3      	str	r3, [r2, #12]
							| GPIO_PUPDR_PUPD4
							| GPIO_PUPDR_PUPD5
							| GPIO_PUPDR_PUPD6
							| GPIO_PUPDR_PUPD7);

	GPIOD->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 8000642:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <Lcd_Init+0xdc>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <Lcd_Init+0xdc>)
 8000648:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800064c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8000650:	6093      	str	r3, [r2, #8]
							  (3 << GPIO_OSPEEDR_OSPEED5_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED6_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED7_Pos) );

	 // preset PC0 thru PC7 to 0
	GPIOD->BRR |= (GPIO_PIN_0
 8000652:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <Lcd_Init+0xdc>)
 8000654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000656:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <Lcd_Init+0xdc>)
 8000658:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 800065c:	6293      	str	r3, [r2, #40]	@ 0x28
					 | GPIO_PIN_5
					 | GPIO_PIN_6
					 | GPIO_PIN_7);

	//Turn on Backlight
	GPIOD->BSRR |= GPIO_PIN_7;
 800065e:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <Lcd_Init+0xdc>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a1d      	ldr	r2, [pc, #116]	@ (80006d8 <Lcd_Init+0xdc>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000668:	6193      	str	r3, [r2, #24]



   delay_us( 40000 );                     // power-up wait 40 ms
 800066a:	f649 4040 	movw	r0, #40000	@ 0x9c40
 800066e:	f7ff febb 	bl	80003e8 <delay_us>
   for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	e008      	b.n	800068a <Lcd_Init+0x8e>
      Lcd_4b_command( 0x30 );             // HI 4b of 8b cmd, low nibble = X
 8000678:	2030      	movs	r0, #48	@ 0x30
 800067a:	f7ff fefb 	bl	8000474 <Lcd_4b_command>
      delay_us( 200 );
 800067e:	20c8      	movs	r0, #200	@ 0xc8
 8000680:	f7ff feb2 	bl	80003e8 <delay_us>
   for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3301      	adds	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b02      	cmp	r3, #2
 800068e:	ddf3      	ble.n	8000678 <Lcd_Init+0x7c>
   }
   Lcd_4b_command( 0x20 ); // fcn set #4: 4b cmd set 4b mode - next 0x28:2-line
 8000690:	2020      	movs	r0, #32
 8000692:	f7ff feef 	bl	8000474 <Lcd_4b_command>
   delay_us( 40 );         // remainder of LCD init removed - see LCD datasheets
 8000696:	2028      	movs	r0, #40	@ 0x28
 8000698:	f7ff fea6 	bl	80003e8 <delay_us>


   Lcd_command( 0x28 );
 800069c:	2028      	movs	r0, #40	@ 0x28
 800069e:	f7ff ff09 	bl	80004b4 <Lcd_command>
   delay_us( 40 );
 80006a2:	2028      	movs	r0, #40	@ 0x28
 80006a4:	f7ff fea0 	bl	80003e8 <delay_us>
   Lcd_command( 0x10 ); //Set cursor
 80006a8:	2010      	movs	r0, #16
 80006aa:	f7ff ff03 	bl	80004b4 <Lcd_command>
   delay_us( 40 );
 80006ae:	2028      	movs	r0, #40	@ 0x28
 80006b0:	f7ff fe9a 	bl	80003e8 <delay_us>
   Lcd_command( 0x0D ); //Display ON; Blinking cursor
 80006b4:	200d      	movs	r0, #13
 80006b6:	f7ff fefd 	bl	80004b4 <Lcd_command>
   delay_us( 40 );
 80006ba:	2028      	movs	r0, #40	@ 0x28
 80006bc:	f7ff fe94 	bl	80003e8 <delay_us>
   Lcd_command( 0x06 ); //Entry mode set
 80006c0:	2006      	movs	r0, #6
 80006c2:	f7ff fef7 	bl	80004b4 <Lcd_command>
   delay_us( 40 );
 80006c6:	2028      	movs	r0, #40	@ 0x28
 80006c8:	f7ff fe8e 	bl	80003e8 <delay_us>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000
 80006d8:	48000c00 	.word	0x48000c00

080006dc <main>:
#include "ctype.h"

void SystemClock_Config(void);

int main(void)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0


  HAL_Init();
 80006e2:	f000 fa40 	bl	8000b66 <HAL_Init>

  SystemClock_Config();
 80006e6:	f000 f961 	bl	80009ac <SystemClock_Config>
  Keypad_Init();
 80006ea:	f7ff fd7f 	bl	80001ec <Keypad_Init>
  Lcd_Init();
 80006ee:	f7ff ff85 	bl	80005fc <Lcd_Init>


  Lcd_write_string("EE 329 A3 TIMER", 0);
 80006f2:	2100      	movs	r1, #0
 80006f4:	48a1      	ldr	r0, [pc, #644]	@ (800097c <main+0x2a0>)
 80006f6:	f7ff ff31 	bl	800055c <Lcd_write_string>
  char bottom_string[] = "*=SET #=GO 00:00";
 80006fa:	4ba1      	ldr	r3, [pc, #644]	@ (8000980 <main+0x2a4>)
 80006fc:	463c      	mov	r4, r7
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	682b      	ldr	r3, [r5, #0]
 8000706:	7023      	strb	r3, [r4, #0]


  uint8_t state = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	75fb      	strb	r3, [r7, #23]
  uint8_t time_idx;

  uint8_t current_input;
  uint8_t last_input = '\0';
 800070c:	2300      	movs	r3, #0
 800070e:	757b      	strb	r3, [r7, #21]


  while (1)
  {
	  //Get currently pressed key
	  current_input = Keypad_Read();
 8000710:	f7ff fe20 	bl	8000354 <Keypad_Read>
 8000714:	4603      	mov	r3, r0
 8000716:	74bb      	strb	r3, [r7, #18]

	  //Check every cycle if '*' is pressed, and if so, send us to reset state
	  if (last_input != current_input){
 8000718:	7d7a      	ldrb	r2, [r7, #21]
 800071a:	7cbb      	ldrb	r3, [r7, #18]
 800071c:	429a      	cmp	r2, r3
 800071e:	d004      	beq.n	800072a <main+0x4e>
		  if(current_input == '*'){
 8000720:	7cbb      	ldrb	r3, [r7, #18]
 8000722:	2b2a      	cmp	r3, #42	@ 0x2a
 8000724:	d101      	bne.n	800072a <main+0x4e>
			  state = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	75fb      	strb	r3, [r7, #23]
		  }
	  }

	  // Print the string on row 2 every cycle
	  Lcd_write_string(bottom_string, 1);
 800072a:	463b      	mov	r3, r7
 800072c:	2101      	movs	r1, #1
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff14 	bl	800055c <Lcd_write_string>

	  //debug: prints the current state on the bottom row just before the count
//	  bottom_string[10] = state | 0x30;

	  switch (state){
 8000734:	7dfb      	ldrb	r3, [r7, #23]
 8000736:	2b04      	cmp	r3, #4
 8000738:	f200 811c 	bhi.w	8000974 <main+0x298>
 800073c:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <main+0x68>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	08000759 	.word	0x08000759
 8000748:	080007a1 	.word	0x080007a1
 800074c:	08000861 	.word	0x08000861
 8000750:	0800087b 	.word	0x0800087b
 8000754:	08000937 	.word	0x08000937

	  case 0: //Idle or 'Reset' state

		  Lcd_backlight_on();
 8000758:	f7ff ff30 	bl	80005bc <Lcd_backlight_on>
		  //Let user know what this is
		  Lcd_write_string("EE 329 A3 TIMER", 0);
 800075c:	2100      	movs	r1, #0
 800075e:	4887      	ldr	r0, [pc, #540]	@ (800097c <main+0x2a0>)
 8000760:	f7ff fefc 	bl	800055c <Lcd_write_string>
		  //Reset everything
		  bottom_string[11] = '0';
 8000764:	2330      	movs	r3, #48	@ 0x30
 8000766:	72fb      	strb	r3, [r7, #11]
		  bottom_string[12] = '0';
 8000768:	2330      	movs	r3, #48	@ 0x30
 800076a:	733b      	strb	r3, [r7, #12]
		  bottom_string[14] = '0';
 800076c:	2330      	movs	r3, #48	@ 0x30
 800076e:	73bb      	strb	r3, [r7, #14]
		  bottom_string[15] = '0';
 8000770:	2330      	movs	r3, #48	@ 0x30
 8000772:	73fb      	strb	r3, [r7, #15]
		  minutes = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	753b      	strb	r3, [r7, #20]
		  seconds = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	74fb      	strb	r3, [r7, #19]
		  time_idx = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	75bb      	strb	r3, [r7, #22]

		  //Delay for '*' reset
		  delay_us(500000);
 8000780:	4880      	ldr	r0, [pc, #512]	@ (8000984 <main+0x2a8>)
 8000782:	f7ff fe31 	bl	80003e8 <delay_us>
		  if (last_input != current_input){
 8000786:	7d7a      	ldrb	r2, [r7, #21]
 8000788:	7cbb      	ldrb	r3, [r7, #18]
 800078a:	429a      	cmp	r2, r3
 800078c:	f000 80ed 	beq.w	800096a <main+0x28e>
		  		  if(current_input == '*'){
 8000790:	7cbb      	ldrb	r3, [r7, #18]
 8000792:	2b2a      	cmp	r3, #42	@ 0x2a
 8000794:	f040 80e9 	bne.w	800096a <main+0x28e>
		  			  state++;
 8000798:	7dfb      	ldrb	r3, [r7, #23]
 800079a:	3301      	adds	r3, #1
 800079c:	75fb      	strb	r3, [r7, #23]
		  			  break;
 800079e:	e0e9      	b.n	8000974 <main+0x298>
		  }
		  break;
	  case 1:

		  // Let user know that they can input now
		  Lcd_write_string("Enter a time:", 0);
 80007a0:	2100      	movs	r1, #0
 80007a2:	4879      	ldr	r0, [pc, #484]	@ (8000988 <main+0x2ac>)
 80007a4:	f7ff feda 	bl	800055c <Lcd_write_string>

		  //If the current input is a number
		  if (isdigit(current_input) && current_input != '\0' && current_input != '#'){
 80007a8:	7cbb      	ldrb	r3, [r7, #18]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a77      	ldr	r2, [pc, #476]	@ (800098c <main+0x2b0>)
 80007ae:	4413      	add	r3, r2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d01e      	beq.n	80007f8 <main+0x11c>
 80007ba:	7cbb      	ldrb	r3, [r7, #18]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d01b      	beq.n	80007f8 <main+0x11c>
 80007c0:	7cbb      	ldrb	r3, [r7, #18]
 80007c2:	2b23      	cmp	r3, #35	@ 0x23
 80007c4:	d018      	beq.n	80007f8 <main+0x11c>
			  //And if there is an input delta
			  if (last_input != current_input){
 80007c6:	7d7a      	ldrb	r2, [r7, #21]
 80007c8:	7cbb      	ldrb	r3, [r7, #18]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d014      	beq.n	80007f8 <main+0x11c>
				  //if the index is at the first 2 digits
				  if(time_idx < 2){
 80007ce:	7dbb      	ldrb	r3, [r7, #22]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d807      	bhi.n	80007e4 <main+0x108>
					  bottom_string[time_idx + 11] = current_input;
 80007d4:	7dbb      	ldrb	r3, [r7, #22]
 80007d6:	330b      	adds	r3, #11
 80007d8:	3318      	adds	r3, #24
 80007da:	443b      	add	r3, r7
 80007dc:	7cba      	ldrb	r2, [r7, #18]
 80007de:	f803 2c18 	strb.w	r2, [r3, #-24]
 80007e2:	e006      	b.n	80007f2 <main+0x116>
				  }
				  //if the index is at the last 2 digits
				  else{
					  bottom_string[time_idx + 12] = current_input;
 80007e4:	7dbb      	ldrb	r3, [r7, #22]
 80007e6:	330c      	adds	r3, #12
 80007e8:	3318      	adds	r3, #24
 80007ea:	443b      	add	r3, r7
 80007ec:	7cba      	ldrb	r2, [r7, #18]
 80007ee:	f803 2c18 	strb.w	r2, [r3, #-24]
				  }
				  //Add to time digit index
				  time_idx++;
 80007f2:	7dbb      	ldrb	r3, [r7, #22]
 80007f4:	3301      	adds	r3, #1
 80007f6:	75bb      	strb	r3, [r7, #22]
			  }

		  }
		  //Check if we have reached the 4th digit
		  if (time_idx >= 4) {
 80007f8:	7dbb      	ldrb	r3, [r7, #22]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	f240 80b7 	bls.w	800096e <main+0x292>
			  //Jump to state 2
			  state++;
 8000800:	7dfb      	ldrb	r3, [r7, #23]
 8000802:	3301      	adds	r3, #1
 8000804:	75fb      	strb	r3, [r7, #23]
			  //Limiting times to be only up to 59 minutes and 59 seconds
			  if( ((int)bottom_string[11] & 0x0f) > 5){
 8000806:	7afb      	ldrb	r3, [r7, #11]
 8000808:	f003 030f 	and.w	r3, r3, #15
 800080c:	2b05      	cmp	r3, #5
 800080e:	dd01      	ble.n	8000814 <main+0x138>
				  bottom_string[11] = '5';
 8000810:	2335      	movs	r3, #53	@ 0x35
 8000812:	72fb      	strb	r3, [r7, #11]
			  }
			  if( ((int)bottom_string[14] & 0x0f) > 5){
 8000814:	7bbb      	ldrb	r3, [r7, #14]
 8000816:	f003 030f 	and.w	r3, r3, #15
 800081a:	2b05      	cmp	r3, #5
 800081c:	dd01      	ble.n	8000822 <main+0x146>
				  bottom_string[14] = '5';
 800081e:	2335      	movs	r3, #53	@ 0x35
 8000820:	73bb      	strb	r3, [r7, #14]
			  }

			  //recording what time was entered as an integer
			  minutes = ((bottom_string[11] & 0x0f) * 10) + (bottom_string[12] & 0x0f);
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	f003 030f 	and.w	r3, r3, #15
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	0092      	lsls	r2, r2, #2
 800082e:	4413      	add	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	b2da      	uxtb	r2, r3
 8000834:	7b3b      	ldrb	r3, [r7, #12]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4413      	add	r3, r2
 800083e:	753b      	strb	r3, [r7, #20]
			  seconds = ((bottom_string[14] & 0x0f) * 10) + (bottom_string[15] & 0x0f);
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	b2db      	uxtb	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	0092      	lsls	r2, r2, #2
 800084c:	4413      	add	r3, r2
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	b2da      	uxtb	r2, r3
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4413      	add	r3, r2
 800085c:	74fb      	strb	r3, [r7, #19]
			  break;
 800085e:	e089      	b.n	8000974 <main+0x298>
		  }
		  break;

	  case 2:
		  //Prompt user to start the count down
		  Lcd_write_string("'#' to start", 0);
 8000860:	2100      	movs	r1, #0
 8000862:	484b      	ldr	r0, [pc, #300]	@ (8000990 <main+0x2b4>)
 8000864:	f7ff fe7a 	bl	800055c <Lcd_write_string>
		  if(Keypad_Read() == '#'){
 8000868:	f7ff fd74 	bl	8000354 <Keypad_Read>
 800086c:	4603      	mov	r3, r0
 800086e:	2b23      	cmp	r3, #35	@ 0x23
 8000870:	d17f      	bne.n	8000972 <main+0x296>
			  state++;
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	3301      	adds	r3, #1
 8000876:	75fb      	strb	r3, [r7, #23]
		  }


		  break;
 8000878:	e07b      	b.n	8000972 <main+0x296>
	  case 3:
		  //Let user know that count down has begun
		  Lcd_write_string("Counting down!", 0);
 800087a:	2100      	movs	r1, #0
 800087c:	4845      	ldr	r0, [pc, #276]	@ (8000994 <main+0x2b8>)
 800087e:	f7ff fe6d 	bl	800055c <Lcd_write_string>

		  //When count down is complete, move to next state
		  if (minutes == 0 && seconds == 0){
 8000882:	7d3b      	ldrb	r3, [r7, #20]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d106      	bne.n	8000896 <main+0x1ba>
 8000888:	7cfb      	ldrb	r3, [r7, #19]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d103      	bne.n	8000896 <main+0x1ba>
			  state++;
 800088e:	7dfb      	ldrb	r3, [r7, #23]
 8000890:	3301      	adds	r3, #1
 8000892:	75fb      	strb	r3, [r7, #23]
			  break;
 8000894:	e06e      	b.n	8000974 <main+0x298>

		  }
		  //If we've counted down on the seconds timer, roll us over and subtract from minutes
		  else if(seconds == 0){
 8000896:	7cfb      	ldrb	r3, [r7, #19]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d105      	bne.n	80008a8 <main+0x1cc>
			  seconds = 59;
 800089c:	233b      	movs	r3, #59	@ 0x3b
 800089e:	74fb      	strb	r3, [r7, #19]
			  --minutes;
 80008a0:	7d3b      	ldrb	r3, [r7, #20]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	753b      	strb	r3, [r7, #20]
 80008a6:	e002      	b.n	80008ae <main+0x1d2>
		  }
		  //Otherwise, tick a second down
		  else{
			  seconds = seconds - 1;
 80008a8:	7cfb      	ldrb	r3, [r7, #19]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	74fb      	strb	r3, [r7, #19]
		  }

		  //Update string for the count down to be displayed
		  bottom_string[11] = (minutes / 10) | 0x30;
 80008ae:	7d3b      	ldrb	r3, [r7, #20]
 80008b0:	4a39      	ldr	r2, [pc, #228]	@ (8000998 <main+0x2bc>)
 80008b2:	fba2 2303 	umull	r2, r3, r2, r3
 80008b6:	08db      	lsrs	r3, r3, #3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	72fb      	strb	r3, [r7, #11]
		  bottom_string[12] = (minutes - (minutes / 10)*10) | 0x30;
 80008c2:	7d3b      	ldrb	r3, [r7, #20]
 80008c4:	4a34      	ldr	r2, [pc, #208]	@ (8000998 <main+0x2bc>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	08db      	lsrs	r3, r3, #3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	0152      	lsls	r2, r2, #5
 80008d2:	1ad2      	subs	r2, r2, r3
 80008d4:	0092      	lsls	r2, r2, #2
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	7d3b      	ldrb	r3, [r7, #20]
 80008de:	4413      	add	r3, r2
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	733b      	strb	r3, [r7, #12]


		  bottom_string[14] = (seconds / 10) | 0x30;
 80008ee:	7cfb      	ldrb	r3, [r7, #19]
 80008f0:	4a29      	ldr	r2, [pc, #164]	@ (8000998 <main+0x2bc>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	73bb      	strb	r3, [r7, #14]
		  bottom_string[15] = (seconds - (seconds / 10)*10) | 0x30;
 8000902:	7cfb      	ldrb	r3, [r7, #19]
 8000904:	4a24      	ldr	r2, [pc, #144]	@ (8000998 <main+0x2bc>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	0152      	lsls	r2, r2, #5
 8000912:	1ad2      	subs	r2, r2, r3
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	7cfb      	ldrb	r3, [r7, #19]
 800091e:	4413      	add	r3, r2
 8000920:	b2db      	uxtb	r3, r3
 8000922:	b25b      	sxtb	r3, r3
 8000924:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000928:	b25b      	sxtb	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	73fb      	strb	r3, [r7, #15]

		  // One seconds delay (Theoretically)
		  delay_us(1000000);
 800092e:	481b      	ldr	r0, [pc, #108]	@ (800099c <main+0x2c0>)
 8000930:	f7ff fd5a 	bl	80003e8 <delay_us>
		  break;
 8000934:	e01e      	b.n	8000974 <main+0x298>
	  case 4:
		  //Let user know that count down is finished, flash back light
		  Lcd_write_string("Timer done!!", 0);
 8000936:	2100      	movs	r1, #0
 8000938:	4819      	ldr	r0, [pc, #100]	@ (80009a0 <main+0x2c4>)
 800093a:	f7ff fe0f 	bl	800055c <Lcd_write_string>
		  Lcd_backlight_off();
 800093e:	f7ff fe4d 	bl	80005dc <Lcd_backlight_off>
		  delay_us(250000);
 8000942:	4818      	ldr	r0, [pc, #96]	@ (80009a4 <main+0x2c8>)
 8000944:	f7ff fd50 	bl	80003e8 <delay_us>
		  Lcd_backlight_on();
 8000948:	f7ff fe38 	bl	80005bc <Lcd_backlight_on>
		  delay_us(125000);
 800094c:	4816      	ldr	r0, [pc, #88]	@ (80009a8 <main+0x2cc>)
 800094e:	f7ff fd4b 	bl	80003e8 <delay_us>
		  Lcd_backlight_off();
 8000952:	f7ff fe43 	bl	80005dc <Lcd_backlight_off>
		  delay_us(125000/2);
 8000956:	f24f 4024 	movw	r0, #62500	@ 0xf424
 800095a:	f7ff fd45 	bl	80003e8 <delay_us>
		  Lcd_backlight_on();
 800095e:	f7ff fe2d 	bl	80005bc <Lcd_backlight_on>
		  delay_us(250000);
 8000962:	4810      	ldr	r0, [pc, #64]	@ (80009a4 <main+0x2c8>)
 8000964:	f7ff fd40 	bl	80003e8 <delay_us>
		  break;
 8000968:	e004      	b.n	8000974 <main+0x298>
		  break;
 800096a:	bf00      	nop
 800096c:	e002      	b.n	8000974 <main+0x298>
		  break;
 800096e:	bf00      	nop
 8000970:	e000      	b.n	8000974 <main+0x298>
		  break;
 8000972:	bf00      	nop


	  }

	  //Record last known input for checking delta later
	  last_input = current_input;
 8000974:	7cbb      	ldrb	r3, [r7, #18]
 8000976:	757b      	strb	r3, [r7, #21]
	  current_input = Keypad_Read();
 8000978:	e6ca      	b.n	8000710 <main+0x34>
 800097a:	bf00      	nop
 800097c:	08001b60 	.word	0x08001b60
 8000980:	08001bb0 	.word	0x08001bb0
 8000984:	0007a120 	.word	0x0007a120
 8000988:	08001b70 	.word	0x08001b70
 800098c:	08001c04 	.word	0x08001c04
 8000990:	08001b80 	.word	0x08001b80
 8000994:	08001b90 	.word	0x08001b90
 8000998:	cccccccd 	.word	0xcccccccd
 800099c:	000f4240 	.word	0x000f4240
 80009a0:	08001ba0 	.word	0x08001ba0
 80009a4:	0003d090 	.word	0x0003d090
 80009a8:	0001e848 	.word	0x0001e848

080009ac <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b096      	sub	sp, #88	@ 0x58
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2244      	movs	r2, #68	@ 0x44
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 f898 	bl	8001af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009d2:	f000 fa31 	bl	8000e38 <HAL_PWREx_ControlVoltageScaling>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009dc:	f000 f82d 	bl	8000a3a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009e0:	2310      	movs	r3, #16
 80009e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009ec:	2360      	movs	r3, #96	@ 0x60
 80009ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fa73 	bl	8000ee4 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a04:	f000 f819 	bl	8000a3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fe78 	bl	8001718 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000a2e:	f000 f804 	bl	8000a3a <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3758      	adds	r7, #88	@ 0x58
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <Error_Handler>:
    ITM_SendChar(ch);
    return ch;
}

void Error_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3e:	b672      	cpsid	i
}
 8000a40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a42:	bf00      	nop
 8000a44:	e7fd      	b.n	8000a42 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a52:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6a:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae6:	f000 f893 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopForever+0xe>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopForever+0x16>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f000 ffdd 	bl	8001b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b46:	f7ff fdc9 	bl	80006dc <main>

08000b4a <LoopForever>:

LoopForever:
    b LoopForever
 8000b4a:	e7fe      	b.n	8000b4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b58:	08001d10 	.word	0x08001d10
  ldr r2, =_sbss
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b60:	2000002c 	.word	0x2000002c

08000b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_2_IRQHandler>

08000b66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f91f 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f80e 	bl	8000b98 <HAL_InitTick>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	71fb      	strb	r3, [r7, #7]
 8000b86:	e001      	b.n	8000b8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b88:	f7ff ff5e 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <HAL_InitTick+0x6c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d023      	beq.n	8000bf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_InitTick+0x70>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <HAL_InitTick+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f91d 	bl	8000e02 <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10f      	bne.n	8000bee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d809      	bhi.n	8000be8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f8f5 	bl	8000dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_InitTick+0x74>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e004      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e001      	b.n	8000bf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000028 	.word	0x20000028

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000028 	.word	0x20000028

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	@ (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	@ 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff47 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff5c 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffb0 	bl	8000d70 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e20:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40007000 	.word	0x40007000

08000e38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e46:	d130      	bne.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e54:	d038      	beq.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e56:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2232      	movs	r2, #50	@ 0x32
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	0c9b      	lsrs	r3, r3, #18
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e7c:	e002      	b.n	8000e84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e84:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e90:	d102      	bne.n	8000e98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1f2      	bne.n	8000e7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ea4:	d110      	bne.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e00f      	b.n	8000eca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eb6:	d007      	beq.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ec0:	4a05      	ldr	r2, [pc, #20]	@ (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40007000 	.word	0x40007000
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	431bde83 	.word	0x431bde83

08000ee4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f000 bc08 	b.w	8001708 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ef8:	4b96      	ldr	r3, [pc, #600]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f02:	4b94      	ldr	r3, [pc, #592]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 80e4 	beq.w	80010e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <HAL_RCC_OscConfig+0x4c>
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2b0c      	cmp	r3, #12
 8000f24:	f040 808b 	bne.w	800103e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	f040 8087 	bne.w	800103e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f30:	4b88      	ldr	r3, [pc, #544]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_OscConfig+0x64>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e3df      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
 8000f4c:	4b81      	ldr	r3, [pc, #516]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d004      	beq.n	8000f62 <HAL_RCC_OscConfig+0x7e>
 8000f58:	4b7e      	ldr	r3, [pc, #504]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f60:	e005      	b.n	8000f6e <HAL_RCC_OscConfig+0x8a>
 8000f62:	4b7c      	ldr	r3, [pc, #496]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d223      	bcs.n	8000fba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fd5a 	bl	8001a30 <RCC_SetFlashLatencyFromMSIRange>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e3c0      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f86:	4b73      	ldr	r3, [pc, #460]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a72      	ldr	r2, [pc, #456]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b70      	ldr	r3, [pc, #448]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	496d      	ldr	r1, [pc, #436]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	4968      	ldr	r1, [pc, #416]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
 8000fb8:	e025      	b.n	8001006 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fba:	4b66      	ldr	r3, [pc, #408]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a65      	ldr	r2, [pc, #404]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b63      	ldr	r3, [pc, #396]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4960      	ldr	r1, [pc, #384]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	495b      	ldr	r1, [pc, #364]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fd1a 	bl	8001a30 <RCC_SetFlashLatencyFromMSIRange>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e380      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001006:	f000 fc87 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 800100a:	4602      	mov	r2, r0
 800100c:	4b51      	ldr	r3, [pc, #324]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	4950      	ldr	r1, [pc, #320]	@ (8001158 <HAL_RCC_OscConfig+0x274>)
 8001018:	5ccb      	ldrb	r3, [r1, r3]
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	fa22 f303 	lsr.w	r3, r2, r3
 8001022:	4a4e      	ldr	r2, [pc, #312]	@ (800115c <HAL_RCC_OscConfig+0x278>)
 8001024:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001026:	4b4e      	ldr	r3, [pc, #312]	@ (8001160 <HAL_RCC_OscConfig+0x27c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fdb4 	bl	8000b98 <HAL_InitTick>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d052      	beq.n	80010e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	e364      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d032      	beq.n	80010ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001046:	4b43      	ldr	r3, [pc, #268]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a42      	ldr	r2, [pc, #264]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001052:	f7ff fdf1 	bl	8000c38 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800105a:	f7ff fded 	bl	8000c38 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e34d      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800106c:	4b39      	ldr	r3, [pc, #228]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001078:	4b36      	ldr	r3, [pc, #216]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a35      	ldr	r2, [pc, #212]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b33      	ldr	r3, [pc, #204]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4930      	ldr	r1, [pc, #192]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001096:	4b2f      	ldr	r3, [pc, #188]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	492b      	ldr	r1, [pc, #172]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	604b      	str	r3, [r1, #4]
 80010aa:	e01a      	b.n	80010e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010ac:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a28      	ldr	r2, [pc, #160]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fdbe 	bl	8000c38 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010c0:	f7ff fdba 	bl	8000c38 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e31a      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010d2:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f0      	bne.n	80010c0 <HAL_RCC_OscConfig+0x1dc>
 80010de:	e000      	b.n	80010e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d073      	beq.n	80011d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_OscConfig+0x21c>
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	2b0c      	cmp	r3, #12
 80010f8:	d10e      	bne.n	8001118 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d10b      	bne.n	8001118 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d063      	beq.n	80011d4 <HAL_RCC_OscConfig+0x2f0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d15f      	bne.n	80011d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e2f7      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001120:	d106      	bne.n	8001130 <HAL_RCC_OscConfig+0x24c>
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e025      	b.n	800117c <HAL_RCC_OscConfig+0x298>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001138:	d114      	bne.n	8001164 <HAL_RCC_OscConfig+0x280>
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a02      	ldr	r2, [pc, #8]	@ (8001154 <HAL_RCC_OscConfig+0x270>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e013      	b.n	800117c <HAL_RCC_OscConfig+0x298>
 8001154:	40021000 	.word	0x40021000
 8001158:	08001bc4 	.word	0x08001bc4
 800115c:	20000000 	.word	0x20000000
 8001160:	20000004 	.word	0x20000004
 8001164:	4ba0      	ldr	r3, [pc, #640]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a9f      	ldr	r2, [pc, #636]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 800116a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b9d      	ldr	r3, [pc, #628]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a9c      	ldr	r2, [pc, #624]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800117a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff fd58 	bl	8000c38 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fd54 	bl	8000c38 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	@ 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e2b4      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800119e:	4b92      	ldr	r3, [pc, #584]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0x2a8>
 80011aa:	e014      	b.n	80011d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ac:	f7ff fd44 	bl	8000c38 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fd40 	bl	8000c38 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	@ 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e2a0      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011c6:	4b88      	ldr	r3, [pc, #544]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x2d0>
 80011d2:	e000      	b.n	80011d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d060      	beq.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d005      	beq.n	80011f4 <HAL_RCC_OscConfig+0x310>
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2b0c      	cmp	r3, #12
 80011ec:	d119      	bne.n	8001222 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d116      	bne.n	8001222 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f4:	4b7c      	ldr	r3, [pc, #496]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_RCC_OscConfig+0x328>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e27d      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b76      	ldr	r3, [pc, #472]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	061b      	lsls	r3, r3, #24
 800121a:	4973      	ldr	r1, [pc, #460]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001220:	e040      	b.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d023      	beq.n	8001272 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122a:	4b6f      	ldr	r3, [pc, #444]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6e      	ldr	r2, [pc, #440]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001236:	f7ff fcff 	bl	8000c38 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fcfb 	bl	8000c38 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e25b      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001250:	4b65      	ldr	r3, [pc, #404]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b62      	ldr	r3, [pc, #392]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	061b      	lsls	r3, r3, #24
 800126a:	495f      	ldr	r1, [pc, #380]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
 8001270:	e018      	b.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001272:	4b5d      	ldr	r3, [pc, #372]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a5c      	ldr	r2, [pc, #368]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800127c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127e:	f7ff fcdb 	bl	8000c38 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff fcd7 	bl	8000c38 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e237      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001298:	4b53      	ldr	r3, [pc, #332]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f0      	bne.n	8001286 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d03c      	beq.n	800132a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01c      	beq.n	80012f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b8:	4b4b      	ldr	r3, [pc, #300]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80012ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012be:	4a4a      	ldr	r2, [pc, #296]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c8:	f7ff fcb6 	bl	8000c38 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff fcb2 	bl	8000c38 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e212      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012e2:	4b41      	ldr	r3, [pc, #260]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80012e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0ef      	beq.n	80012d0 <HAL_RCC_OscConfig+0x3ec>
 80012f0:	e01b      	b.n	800132a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f2:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80012f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012f8:	4a3b      	ldr	r2, [pc, #236]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001302:	f7ff fc99 	bl	8000c38 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130a:	f7ff fc95 	bl	8000c38 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e1f5      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800131c:	4b32      	ldr	r3, [pc, #200]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 800131e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1ef      	bne.n	800130a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80a6 	beq.w	8001484 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800133c:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10d      	bne.n	8001364 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001348:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	4a26      	ldr	r2, [pc, #152]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001352:	6593      	str	r3, [r2, #88]	@ 0x58
 8001354:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001360:	2301      	movs	r3, #1
 8001362:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001364:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <HAL_RCC_OscConfig+0x508>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d118      	bne.n	80013a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001370:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <HAL_RCC_OscConfig+0x508>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1d      	ldr	r2, [pc, #116]	@ (80013ec <HAL_RCC_OscConfig+0x508>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137c:	f7ff fc5c 	bl	8000c38 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001384:	f7ff fc58 	bl	8000c38 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e1b8      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <HAL_RCC_OscConfig+0x508>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d108      	bne.n	80013bc <HAL_RCC_OscConfig+0x4d8>
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013ba:	e029      	b.n	8001410 <HAL_RCC_OscConfig+0x52c>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b05      	cmp	r3, #5
 80013c2:	d115      	bne.n	80013f0 <HAL_RCC_OscConfig+0x50c>
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ca:	4a07      	ldr	r2, [pc, #28]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013da:	4a03      	ldr	r2, [pc, #12]	@ (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013e4:	e014      	b.n	8001410 <HAL_RCC_OscConfig+0x52c>
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40007000 	.word	0x40007000
 80013f0:	4b9d      	ldr	r3, [pc, #628]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013f6:	4a9c      	ldr	r2, [pc, #624]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001400:	4b99      	ldr	r3, [pc, #612]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 8001402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001406:	4a98      	ldr	r2, [pc, #608]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d016      	beq.n	8001446 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fc0e 	bl	8000c38 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fc0a 	bl	8000c38 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e168      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001436:	4b8c      	ldr	r3, [pc, #560]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 8001438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0ed      	beq.n	8001420 <HAL_RCC_OscConfig+0x53c>
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001446:	f7ff fbf7 	bl	8000c38 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff fbf3 	bl	8000c38 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e151      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001464:	4b80      	ldr	r3, [pc, #512]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 8001466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ed      	bne.n	800144e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001472:	7ffb      	ldrb	r3, [r7, #31]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001478:	4b7b      	ldr	r3, [pc, #492]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147c:	4a7a      	ldr	r2, [pc, #488]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 800147e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001482:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0320 	and.w	r3, r3, #32
 800148c:	2b00      	cmp	r3, #0
 800148e:	d03c      	beq.n	800150a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01c      	beq.n	80014d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001498:	4b73      	ldr	r3, [pc, #460]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 800149a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800149e:	4a72      	ldr	r2, [pc, #456]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a8:	f7ff fbc6 	bl	8000c38 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014b0:	f7ff fbc2 	bl	8000c38 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e122      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014c2:	4b69      	ldr	r3, [pc, #420]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80014c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0ef      	beq.n	80014b0 <HAL_RCC_OscConfig+0x5cc>
 80014d0:	e01b      	b.n	800150a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014d2:	4b65      	ldr	r3, [pc, #404]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80014d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014d8:	4a63      	ldr	r2, [pc, #396]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e2:	f7ff fba9 	bl	8000c38 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ea:	f7ff fba5 	bl	8000c38 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e105      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80014fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1ef      	bne.n	80014ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80f9 	beq.w	8001706 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001518:	2b02      	cmp	r3, #2
 800151a:	f040 80cf 	bne.w	80016bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800151e:	4b52      	ldr	r3, [pc, #328]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f003 0203 	and.w	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152e:	429a      	cmp	r2, r3
 8001530:	d12c      	bne.n	800158c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	3b01      	subs	r3, #1
 800153e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d123      	bne.n	800158c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800154e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d11b      	bne.n	800158c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800155e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d113      	bne.n	800158c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800156e:	085b      	lsrs	r3, r3, #1
 8001570:	3b01      	subs	r3, #1
 8001572:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d109      	bne.n	800158c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	3b01      	subs	r3, #1
 8001586:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d071      	beq.n	8001670 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b0c      	cmp	r3, #12
 8001590:	d068      	beq.n	8001664 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001592:	4b35      	ldr	r3, [pc, #212]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d105      	bne.n	80015aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800159e:	4b32      	ldr	r3, [pc, #200]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0ac      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80015b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015ba:	f7ff fb3d 	bl	8000c38 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff fb39 	bl	8000c38 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e099      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d4:	4b24      	ldr	r3, [pc, #144]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e0:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	4b21      	ldr	r3, [pc, #132]	@ (800166c <HAL_RCC_OscConfig+0x788>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80015f0:	3a01      	subs	r2, #1
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	4311      	orrs	r1, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80015fa:	0212      	lsls	r2, r2, #8
 80015fc:	4311      	orrs	r1, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001602:	0852      	lsrs	r2, r2, #1
 8001604:	3a01      	subs	r2, #1
 8001606:	0552      	lsls	r2, r2, #21
 8001608:	4311      	orrs	r1, r2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800160e:	0852      	lsrs	r2, r2, #1
 8001610:	3a01      	subs	r2, #1
 8001612:	0652      	lsls	r2, r2, #25
 8001614:	4311      	orrs	r1, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800161a:	06d2      	lsls	r2, r2, #27
 800161c:	430a      	orrs	r2, r1
 800161e:	4912      	ldr	r1, [pc, #72]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 8001620:	4313      	orrs	r3, r2
 8001622:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001624:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0f      	ldr	r2, [pc, #60]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 800162a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800162e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001630:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a0c      	ldr	r2, [pc, #48]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 8001636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800163a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800163c:	f7ff fafc 	bl	8000c38 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff faf8 	bl	8000c38 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e058      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001656:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <HAL_RCC_OscConfig+0x784>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001662:	e050      	b.n	8001706 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e04f      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
 8001668:	40021000 	.word	0x40021000
 800166c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <HAL_RCC_OscConfig+0x82c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d144      	bne.n	8001706 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800167c:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <HAL_RCC_OscConfig+0x82c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a23      	ldr	r2, [pc, #140]	@ (8001710 <HAL_RCC_OscConfig+0x82c>)
 8001682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001686:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001688:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <HAL_RCC_OscConfig+0x82c>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a20      	ldr	r2, [pc, #128]	@ (8001710 <HAL_RCC_OscConfig+0x82c>)
 800168e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001692:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001694:	f7ff fad0 	bl	8000c38 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff facc 	bl	8000c38 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e02c      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ae:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <HAL_RCC_OscConfig+0x82c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x7b8>
 80016ba:	e024      	b.n	8001706 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	d01f      	beq.n	8001702 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <HAL_RCC_OscConfig+0x82c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <HAL_RCC_OscConfig+0x82c>)
 80016c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff fab3 	bl	8000c38 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff faaf 	bl	8000c38 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e00f      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <HAL_RCC_OscConfig+0x82c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f0      	bne.n	80016d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <HAL_RCC_OscConfig+0x82c>)
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	4905      	ldr	r1, [pc, #20]	@ (8001710 <HAL_RCC_OscConfig+0x82c>)
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_RCC_OscConfig+0x830>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	60cb      	str	r3, [r1, #12]
 8001700:	e001      	b.n	8001706 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3720      	adds	r7, #32
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000
 8001714:	feeefffc 	.word	0xfeeefffc

08001718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0e7      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b75      	ldr	r3, [pc, #468]	@ (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d910      	bls.n	800175c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b72      	ldr	r3, [pc, #456]	@ (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 0207 	bic.w	r2, r3, #7
 8001742:	4970      	ldr	r1, [pc, #448]	@ (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b6e      	ldr	r3, [pc, #440]	@ (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0cf      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d010      	beq.n	800178a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	4b66      	ldr	r3, [pc, #408]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001774:	429a      	cmp	r2, r3
 8001776:	d908      	bls.n	800178a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001778:	4b63      	ldr	r3, [pc, #396]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4960      	ldr	r1, [pc, #384]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d04c      	beq.n	8001830 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179e:	4b5a      	ldr	r3, [pc, #360]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d121      	bne.n	80017ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0a6      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b6:	4b54      	ldr	r3, [pc, #336]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d115      	bne.n	80017ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e09a      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e08e      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017de:	4b4a      	ldr	r3, [pc, #296]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e086      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b46      	ldr	r3, [pc, #280]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4943      	ldr	r1, [pc, #268]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001800:	f7ff fa1a 	bl	8000c38 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff fa16 	bl	8000c38 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e06e      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b3a      	ldr	r3, [pc, #232]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d010      	beq.n	800185e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001848:	429a      	cmp	r2, r3
 800184a:	d208      	bcs.n	800185e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b2e      	ldr	r3, [pc, #184]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	492b      	ldr	r1, [pc, #172]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800185e:	4b29      	ldr	r3, [pc, #164]	@ (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d210      	bcs.n	800188e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186c:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 0207 	bic.w	r2, r3, #7
 8001874:	4923      	ldr	r1, [pc, #140]	@ (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187c:	4b21      	ldr	r3, [pc, #132]	@ (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e036      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4918      	ldr	r1, [pc, #96]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d009      	beq.n	80018cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4910      	ldr	r1, [pc, #64]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018cc:	f000 f824 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	490b      	ldr	r1, [pc, #44]	@ (800190c <HAL_RCC_ClockConfig+0x1f4>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	4a09      	ldr	r2, [pc, #36]	@ (8001910 <HAL_RCC_ClockConfig+0x1f8>)
 80018ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <HAL_RCC_ClockConfig+0x1fc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff f951 	bl	8000b98 <HAL_InitTick>
 80018f6:	4603      	mov	r3, r0
 80018f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80018fa:	7afb      	ldrb	r3, [r7, #11]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40022000 	.word	0x40022000
 8001908:	40021000 	.word	0x40021000
 800190c:	08001bc4 	.word	0x08001bc4
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	@ 0x24
 800191c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001926:	4b3e      	ldr	r3, [pc, #248]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001930:	4b3b      	ldr	r3, [pc, #236]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x34>
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d121      	bne.n	800198a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d11e      	bne.n	800198a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800194c:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d107      	bne.n	8001968 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001958:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800195e:	0a1b      	lsrs	r3, r3, #8
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e005      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001968:	4b2d      	ldr	r3, [pc, #180]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001974:	4a2b      	ldr	r2, [pc, #172]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10d      	bne.n	80019a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d102      	bne.n	8001996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001990:	4b25      	ldr	r3, [pc, #148]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	e004      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2b08      	cmp	r3, #8
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800199c:	4b23      	ldr	r3, [pc, #140]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x114>)
 800199e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d134      	bne.n	8001a10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0xa6>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d003      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0xac>
 80019bc:	e005      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019be:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x110>)
 80019c0:	617b      	str	r3, [r7, #20]
      break;
 80019c2:	e005      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x114>)
 80019c6:	617b      	str	r3, [r7, #20]
      break;
 80019c8:	e002      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	617b      	str	r3, [r7, #20]
      break;
 80019ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019d0:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	3301      	adds	r3, #1
 80019dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	fb03 f202 	mul.w	r2, r3, r2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	0e5b      	lsrs	r3, r3, #25
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	3301      	adds	r3, #1
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a10:	69bb      	ldr	r3, [r7, #24]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	@ 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	08001bd4 	.word	0x08001bd4
 8001a28:	00f42400 	.word	0x00f42400
 8001a2c:	007a1200 	.word	0x007a1200

08001a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a48:	f7ff f9e8 	bl	8000e1c <HAL_PWREx_GetVoltageRange>
 8001a4c:	6178      	str	r0, [r7, #20]
 8001a4e:	e014      	b.n	8001a7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a54:	4a24      	ldr	r2, [pc, #144]	@ (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a68:	f7ff f9d8 	bl	8000e1c <HAL_PWREx_GetVoltageRange>
 8001a6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a80:	d10b      	bne.n	8001a9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b80      	cmp	r3, #128	@ 0x80
 8001a86:	d919      	bls.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a8c:	d902      	bls.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a8e:	2302      	movs	r3, #2
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	e013      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a94:	2301      	movs	r3, #1
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e010      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b80      	cmp	r3, #128	@ 0x80
 8001a9e:	d902      	bls.n	8001aa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	e00a      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b80      	cmp	r3, #128	@ 0x80
 8001aaa:	d102      	bne.n	8001ab2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aac:	2302      	movs	r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	e004      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b70      	cmp	r3, #112	@ 0x70
 8001ab6:	d101      	bne.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ab8:	2301      	movs	r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 0207 	bic.w	r2, r3, #7
 8001ac4:	4909      	ldr	r1, [pc, #36]	@ (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001acc:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40022000 	.word	0x40022000

08001af0 <memset>:
 8001af0:	4402      	add	r2, r0
 8001af2:	4603      	mov	r3, r0
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d100      	bne.n	8001afa <memset+0xa>
 8001af8:	4770      	bx	lr
 8001afa:	f803 1b01 	strb.w	r1, [r3], #1
 8001afe:	e7f9      	b.n	8001af4 <memset+0x4>

08001b00 <__libc_init_array>:
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	4d0d      	ldr	r5, [pc, #52]	@ (8001b38 <__libc_init_array+0x38>)
 8001b04:	4c0d      	ldr	r4, [pc, #52]	@ (8001b3c <__libc_init_array+0x3c>)
 8001b06:	1b64      	subs	r4, r4, r5
 8001b08:	10a4      	asrs	r4, r4, #2
 8001b0a:	2600      	movs	r6, #0
 8001b0c:	42a6      	cmp	r6, r4
 8001b0e:	d109      	bne.n	8001b24 <__libc_init_array+0x24>
 8001b10:	4d0b      	ldr	r5, [pc, #44]	@ (8001b40 <__libc_init_array+0x40>)
 8001b12:	4c0c      	ldr	r4, [pc, #48]	@ (8001b44 <__libc_init_array+0x44>)
 8001b14:	f000 f818 	bl	8001b48 <_init>
 8001b18:	1b64      	subs	r4, r4, r5
 8001b1a:	10a4      	asrs	r4, r4, #2
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	42a6      	cmp	r6, r4
 8001b20:	d105      	bne.n	8001b2e <__libc_init_array+0x2e>
 8001b22:	bd70      	pop	{r4, r5, r6, pc}
 8001b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b28:	4798      	blx	r3
 8001b2a:	3601      	adds	r6, #1
 8001b2c:	e7ee      	b.n	8001b0c <__libc_init_array+0xc>
 8001b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b32:	4798      	blx	r3
 8001b34:	3601      	adds	r6, #1
 8001b36:	e7f2      	b.n	8001b1e <__libc_init_array+0x1e>
 8001b38:	08001d08 	.word	0x08001d08
 8001b3c:	08001d08 	.word	0x08001d08
 8001b40:	08001d08 	.word	0x08001d08
 8001b44:	08001d0c 	.word	0x08001d0c

08001b48 <_init>:
 8001b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4a:	bf00      	nop
 8001b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b4e:	bc08      	pop	{r3}
 8001b50:	469e      	mov	lr, r3
 8001b52:	4770      	bx	lr

08001b54 <_fini>:
 8001b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b56:	bf00      	nop
 8001b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b5a:	bc08      	pop	{r3}
 8001b5c:	469e      	mov	lr, r3
 8001b5e:	4770      	bx	lr
