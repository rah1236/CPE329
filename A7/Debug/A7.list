
A7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023d8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08002588  08002588  00003588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d8  080027d8  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  080027d8  080027d8  000037d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027e0  080027e0  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e0  080027e0  000037e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027e4  080027e4  000037e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080027e8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08002844  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002844  000041cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049f5  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001137  00000000  00000000  00008a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00009bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000043d  00000000  00000000  0000a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f17  00000000  00000000  0000a5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000060c2  00000000  00000000  000324e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2628  00000000  00000000  000385a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012abce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a3c  00000000  00000000  0012ac14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0012c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002570 	.word	0x08002570

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08002570 	.word	0x08002570

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
void SystemClock_Config(void);

extern char keyPressed;

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	f5ad 6df6 	sub.w	sp, sp, #1968	@ 0x7b0
 8000296:	af00      	add	r7, sp, #0

  HAL_Init();
 8000298:	f000 fd05 	bl	8000ca6 <HAL_Init>
  SystemClock_Config();
 800029c:	f000 fa81 	bl	80007a2 <SystemClock_Config>
  //Init UART and clear the screen
  LPUART_init();
 80002a0:	f000 fb68 	bl	8000974 <LPUART_init>
  LPUART_clearScreen();
 80002a4:	f000 fcac 	bl	8000c00 <LPUART_clearScreen>

  // Player location array, where [0] is on the X axis, and [1] is on the Y axis
  // Positive is going down and to the right
  int8_t player_location[2] = {40, 12};
 80002a8:	f640 4328 	movw	r3, #3112	@ 0xc28
 80002ac:	f8a7 3798 	strh.w	r3, [r7, #1944]	@ 0x798
  //Defining Display buffer
  char display_buffer[24][81];

  //For loop for the splash screen
  //Does a funky little animation for a few seconds
  for (int i; i < 10; i++){
 80002b0:	e0a2      	b.n	80003f8 <main+0x168>

	  for (int row = 0; row < 24; row++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	f8c7 37a8 	str.w	r3, [r7, #1960]	@ 0x7a8
 80002b8:	e042      	b.n	8000340 <main+0xb0>
		  if(row < 10){
 80002ba:	f8d7 37a8 	ldr.w	r3, [r7, #1960]	@ 0x7a8
 80002be:	2b09      	cmp	r3, #9
 80002c0:	dc10      	bgt.n	80002e4 <main+0x54>
			strcpy(display_buffer[row],
 80002c2:	4639      	mov	r1, r7
 80002c4:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	@ 0x7a8
 80002c8:	4613      	mov	r3, r2
 80002ca:	00db      	lsls	r3, r3, #3
 80002cc:	4413      	add	r3, r2
 80002ce:	00da      	lsls	r2, r3, #3
 80002d0:	4413      	add	r3, r2
 80002d2:	440b      	add	r3, r1
 80002d4:	4a80      	ldr	r2, [pc, #512]	@ (80004d8 <main+0x248>)
 80002d6:	4618      	mov	r0, r3
 80002d8:	4611      	mov	r1, r2
 80002da:	2351      	movs	r3, #81	@ 0x51
 80002dc:	461a      	mov	r2, r3
 80002de:	f001 fcfb 	bl	8001cd8 <memcpy>
 80002e2:	e028      	b.n	8000336 <main+0xa6>
					"////////////////////----------------------------------------||||||||||||||||||||\0");
		  }
		  else if (row > 10 && row < 12){
 80002e4:	f8d7 37a8 	ldr.w	r3, [r7, #1960]	@ 0x7a8
 80002e8:	2b0a      	cmp	r3, #10
 80002ea:	dd14      	ble.n	8000316 <main+0x86>
 80002ec:	f8d7 37a8 	ldr.w	r3, [r7, #1960]	@ 0x7a8
 80002f0:	2b0b      	cmp	r3, #11
 80002f2:	dc10      	bgt.n	8000316 <main+0x86>
			strcpy(display_buffer[row],
 80002f4:	4639      	mov	r1, r7
 80002f6:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	@ 0x7a8
 80002fa:	4613      	mov	r3, r2
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	4413      	add	r3, r2
 8000300:	00da      	lsls	r2, r3, #3
 8000302:	4413      	add	r3, r2
 8000304:	440b      	add	r3, r1
 8000306:	4a75      	ldr	r2, [pc, #468]	@ (80004dc <main+0x24c>)
 8000308:	4618      	mov	r0, r3
 800030a:	4611      	mov	r1, r2
 800030c:	2351      	movs	r3, #81	@ 0x51
 800030e:	461a      	mov	r2, r3
 8000310:	f001 fce2 	bl	8001cd8 <memcpy>
 8000314:	e00f      	b.n	8000336 <main+0xa6>
					"----------------------------- Mike's Floating Eye ------------------------------\0");
		  }
		  else{
			strcpy(display_buffer[row],
 8000316:	4639      	mov	r1, r7
 8000318:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	@ 0x7a8
 800031c:	4613      	mov	r3, r2
 800031e:	00db      	lsls	r3, r3, #3
 8000320:	4413      	add	r3, r2
 8000322:	00da      	lsls	r2, r3, #3
 8000324:	4413      	add	r3, r2
 8000326:	440b      	add	r3, r1
 8000328:	4a6d      	ldr	r2, [pc, #436]	@ (80004e0 <main+0x250>)
 800032a:	4618      	mov	r0, r3
 800032c:	4611      	mov	r1, r2
 800032e:	2351      	movs	r3, #81	@ 0x51
 8000330:	461a      	mov	r2, r3
 8000332:	f001 fcd1 	bl	8001cd8 <memcpy>
	  for (int row = 0; row < 24; row++){
 8000336:	f8d7 37a8 	ldr.w	r3, [r7, #1960]	@ 0x7a8
 800033a:	3301      	adds	r3, #1
 800033c:	f8c7 37a8 	str.w	r3, [r7, #1960]	@ 0x7a8
 8000340:	f8d7 37a8 	ldr.w	r3, [r7, #1960]	@ 0x7a8
 8000344:	2b17      	cmp	r3, #23
 8000346:	ddb8      	ble.n	80002ba <main+0x2a>
					"||||||||||||||||||||----------------------------------------////////////////////\0");
		  }

	  }

	  refresh_screen(display_buffer);
 8000348:	463b      	mov	r3, r7
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fa08 	bl	8000760 <refresh_screen>


	  for (int row = 0; row < 24; row++){
 8000350:	2300      	movs	r3, #0
 8000352:	f8c7 37a4 	str.w	r3, [r7, #1956]	@ 0x7a4
 8000356:	e042      	b.n	80003de <main+0x14e>
		  if(row < 10){
 8000358:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	@ 0x7a4
 800035c:	2b09      	cmp	r3, #9
 800035e:	dc10      	bgt.n	8000382 <main+0xf2>
			strcpy(display_buffer[row],
 8000360:	4639      	mov	r1, r7
 8000362:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	@ 0x7a4
 8000366:	4613      	mov	r3, r2
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	4413      	add	r3, r2
 800036c:	00da      	lsls	r2, r3, #3
 800036e:	4413      	add	r3, r2
 8000370:	440b      	add	r3, r1
 8000372:	4a5b      	ldr	r2, [pc, #364]	@ (80004e0 <main+0x250>)
 8000374:	4618      	mov	r0, r3
 8000376:	4611      	mov	r1, r2
 8000378:	2351      	movs	r3, #81	@ 0x51
 800037a:	461a      	mov	r2, r3
 800037c:	f001 fcac 	bl	8001cd8 <memcpy>
 8000380:	e028      	b.n	80003d4 <main+0x144>
					"||||||||||||||||||||----------------------------------------////////////////////\0");
		  }
		  else if (row > 10 && row < 12){
 8000382:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	@ 0x7a4
 8000386:	2b0a      	cmp	r3, #10
 8000388:	dd14      	ble.n	80003b4 <main+0x124>
 800038a:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	@ 0x7a4
 800038e:	2b0b      	cmp	r3, #11
 8000390:	dc10      	bgt.n	80003b4 <main+0x124>
			strcpy(display_buffer[row],
 8000392:	4639      	mov	r1, r7
 8000394:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	@ 0x7a4
 8000398:	4613      	mov	r3, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	4413      	add	r3, r2
 800039e:	00da      	lsls	r2, r3, #3
 80003a0:	4413      	add	r3, r2
 80003a2:	440b      	add	r3, r1
 80003a4:	4a4d      	ldr	r2, [pc, #308]	@ (80004dc <main+0x24c>)
 80003a6:	4618      	mov	r0, r3
 80003a8:	4611      	mov	r1, r2
 80003aa:	2351      	movs	r3, #81	@ 0x51
 80003ac:	461a      	mov	r2, r3
 80003ae:	f001 fc93 	bl	8001cd8 <memcpy>
 80003b2:	e00f      	b.n	80003d4 <main+0x144>
					"----------------------------- Mike's Floating Eye ------------------------------\0");
		  }
		  else{
			strcpy(display_buffer[row],
 80003b4:	4639      	mov	r1, r7
 80003b6:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	@ 0x7a4
 80003ba:	4613      	mov	r3, r2
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4413      	add	r3, r2
 80003c0:	00da      	lsls	r2, r3, #3
 80003c2:	4413      	add	r3, r2
 80003c4:	440b      	add	r3, r1
 80003c6:	4a44      	ldr	r2, [pc, #272]	@ (80004d8 <main+0x248>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	4611      	mov	r1, r2
 80003cc:	2351      	movs	r3, #81	@ 0x51
 80003ce:	461a      	mov	r2, r3
 80003d0:	f001 fc82 	bl	8001cd8 <memcpy>
	  for (int row = 0; row < 24; row++){
 80003d4:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	@ 0x7a4
 80003d8:	3301      	adds	r3, #1
 80003da:	f8c7 37a4 	str.w	r3, [r7, #1956]	@ 0x7a4
 80003de:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	@ 0x7a4
 80003e2:	2b17      	cmp	r3, #23
 80003e4:	ddb8      	ble.n	8000358 <main+0xc8>
					"////////////////////----------------------------------------||||||||||||||||||||\0");
		  }

	  }

	  refresh_screen(display_buffer);
 80003e6:	463b      	mov	r3, r7
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 f9b9 	bl	8000760 <refresh_screen>
  for (int i; i < 10; i++){
 80003ee:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	@ 0x7ac
 80003f2:	3301      	adds	r3, #1
 80003f4:	f8c7 37ac 	str.w	r3, [r7, #1964]	@ 0x7ac
 80003f8:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	@ 0x7ac
 80003fc:	2b09      	cmp	r3, #9
 80003fe:	f77f af58 	ble.w	80002b2 <main+0x22>
  }
  int refreshing = 1;
 8000402:	2301      	movs	r3, #1
 8000404:	f8c7 37a0 	str.w	r3, [r7, #1952]	@ 0x7a0
  //Starting infinite loop
  while (1)
  {

	  //Defining border
	  for (int row = 0; row < 24; row++){
 8000408:	2300      	movs	r3, #0
 800040a:	f8c7 379c 	str.w	r3, [r7, #1948]	@ 0x79c
 800040e:	e031      	b.n	8000474 <main+0x1e4>
	  		strcpy(display_buffer[row],
 8000410:	4639      	mov	r1, r7
 8000412:	f8d7 279c 	ldr.w	r2, [r7, #1948]	@ 0x79c
 8000416:	4613      	mov	r3, r2
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	4413      	add	r3, r2
 800041c:	00da      	lsls	r2, r3, #3
 800041e:	4413      	add	r3, r2
 8000420:	440b      	add	r3, r1
 8000422:	4a30      	ldr	r2, [pc, #192]	@ (80004e4 <main+0x254>)
 8000424:	4618      	mov	r0, r3
 8000426:	4611      	mov	r1, r2
 8000428:	2351      	movs	r3, #81	@ 0x51
 800042a:	461a      	mov	r2, r3
 800042c:	f001 fc54 	bl	8001cd8 <memcpy>
	  				"                                                                                \0");
	  		display_buffer [row] [0] = '@';
 8000430:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8000434:	f5a3 61f6 	sub.w	r1, r3, #1968	@ 0x7b0
 8000438:	f8d7 279c 	ldr.w	r2, [r7, #1948]	@ 0x79c
 800043c:	4613      	mov	r3, r2
 800043e:	00db      	lsls	r3, r3, #3
 8000440:	4413      	add	r3, r2
 8000442:	00da      	lsls	r2, r3, #3
 8000444:	4413      	add	r3, r2
 8000446:	440b      	add	r3, r1
 8000448:	2240      	movs	r2, #64	@ 0x40
 800044a:	701a      	strb	r2, [r3, #0]
	  		display_buffer [row] [79] = '@';
 800044c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8000450:	f5a3 61f6 	sub.w	r1, r3, #1968	@ 0x7b0
 8000454:	f8d7 279c 	ldr.w	r2, [r7, #1948]	@ 0x79c
 8000458:	4613      	mov	r3, r2
 800045a:	00db      	lsls	r3, r3, #3
 800045c:	4413      	add	r3, r2
 800045e:	00da      	lsls	r2, r3, #3
 8000460:	4413      	add	r3, r2
 8000462:	440b      	add	r3, r1
 8000464:	334f      	adds	r3, #79	@ 0x4f
 8000466:	2240      	movs	r2, #64	@ 0x40
 8000468:	701a      	strb	r2, [r3, #0]
	  for (int row = 0; row < 24; row++){
 800046a:	f8d7 379c 	ldr.w	r3, [r7, #1948]	@ 0x79c
 800046e:	3301      	adds	r3, #1
 8000470:	f8c7 379c 	str.w	r3, [r7, #1948]	@ 0x79c
 8000474:	f8d7 379c 	ldr.w	r3, [r7, #1948]	@ 0x79c
 8000478:	2b17      	cmp	r3, #23
 800047a:	ddc9      	ble.n	8000410 <main+0x180>
	   }
	  strcpy(display_buffer [1] ,
 800047c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8000480:	f5a3 63f6 	sub.w	r3, r3, #1968	@ 0x7b0
 8000484:	4a18      	ldr	r2, [pc, #96]	@ (80004e8 <main+0x258>)
 8000486:	3351      	adds	r3, #81	@ 0x51
 8000488:	4611      	mov	r1, r2
 800048a:	2251      	movs	r2, #81	@ 0x51
 800048c:	4618      	mov	r0, r3
 800048e:	f001 fc23 	bl	8001cd8 <memcpy>
			  "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\0");
	  strcpy(display_buffer [23],
 8000492:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8000496:	f5a3 63f6 	sub.w	r3, r3, #1968	@ 0x7b0
 800049a:	4a13      	ldr	r2, [pc, #76]	@ (80004e8 <main+0x258>)
 800049c:	f203 7347 	addw	r3, r3, #1863	@ 0x747
 80004a0:	4611      	mov	r1, r2
 80004a2:	2251      	movs	r2, #81	@ 0x51
 80004a4:	4618      	mov	r0, r3
 80004a6:	f001 fc17 	bl	8001cd8 <memcpy>
			  "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\0");

	  //Defining player deadzones (to bring them to the otherside of the border)
	  if (player_location[0] < 3) {
 80004aa:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	dc03      	bgt.n	80004ba <main+0x22a>
		  player_location[0] = 77;
 80004b2:	234d      	movs	r3, #77	@ 0x4d
 80004b4:	f887 3798 	strb.w	r3, [r7, #1944]	@ 0x798
 80004b8:	e006      	b.n	80004c8 <main+0x238>
	  }
	  else if(player_location[0] > 77){
 80004ba:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 80004be:	2b4d      	cmp	r3, #77	@ 0x4d
 80004c0:	dd02      	ble.n	80004c8 <main+0x238>
		  player_location[0] = 3;
 80004c2:	2303      	movs	r3, #3
 80004c4:	f887 3798 	strb.w	r3, [r7, #1944]	@ 0x798
	  }
	  if (player_location[1] < 3) {
 80004c8:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	dc0d      	bgt.n	80004ec <main+0x25c>
	  		  player_location[1] = 21;
 80004d0:	2315      	movs	r3, #21
 80004d2:	f887 3799 	strb.w	r3, [r7, #1945]	@ 0x799
 80004d6:	e010      	b.n	80004fa <main+0x26a>
 80004d8:	08002588 	.word	0x08002588
 80004dc:	080025dc 	.word	0x080025dc
 80004e0:	08002630 	.word	0x08002630
 80004e4:	08002684 	.word	0x08002684
 80004e8:	080026d8 	.word	0x080026d8
	  }
	  else if(player_location[1] > 21){
 80004ec:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 80004f0:	2b15      	cmp	r3, #21
 80004f2:	dd02      	ble.n	80004fa <main+0x26a>
		  player_location[1] = 3;
 80004f4:	2303      	movs	r3, #3
 80004f6:	f887 3799 	strb.w	r3, [r7, #1945]	@ 0x799
	  }

	  //defining the 'sprite' for the player character
	  display_buffer [player_location[1]] [player_location[0]] = '*';
 80004fa:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 80004fe:	4619      	mov	r1, r3
 8000500:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 8000504:	4618      	mov	r0, r3
 8000506:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800050a:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 800050e:	460b      	mov	r3, r1
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	440b      	add	r3, r1
 8000514:	00d9      	lsls	r1, r3, #3
 8000516:	440b      	add	r3, r1
 8000518:	4413      	add	r3, r2
 800051a:	4403      	add	r3, r0
 800051c:	222a      	movs	r2, #42	@ 0x2a
 800051e:	701a      	strb	r2, [r3, #0]
	  display_buffer [player_location[1] + 1] [player_location[0]+1] = '/';
 8000520:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 800052a:	1c59      	adds	r1, r3, #1
 800052c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8000530:	f5a3 60f6 	sub.w	r0, r3, #1968	@ 0x7b0
 8000534:	4613      	mov	r3, r2
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	4413      	add	r3, r2
 800053a:	00da      	lsls	r2, r3, #3
 800053c:	4413      	add	r3, r2
 800053e:	4403      	add	r3, r0
 8000540:	440b      	add	r3, r1
 8000542:	222f      	movs	r2, #47	@ 0x2f
 8000544:	701a      	strb	r2, [r3, #0]
	  display_buffer [player_location[1] - 1] [player_location[0]-1] = '/';
 8000546:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 8000550:	1e59      	subs	r1, r3, #1
 8000552:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8000556:	f5a3 60f6 	sub.w	r0, r3, #1968	@ 0x7b0
 800055a:	4613      	mov	r3, r2
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	4413      	add	r3, r2
 8000560:	00da      	lsls	r2, r3, #3
 8000562:	4413      	add	r3, r2
 8000564:	4403      	add	r3, r0
 8000566:	440b      	add	r3, r1
 8000568:	222f      	movs	r2, #47	@ 0x2f
 800056a:	701a      	strb	r2, [r3, #0]
	  display_buffer [player_location[1] - 1] [player_location[0]+1] = '\\';
 800056c:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 8000570:	1e5a      	subs	r2, r3, #1
 8000572:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 8000576:	1c59      	adds	r1, r3, #1
 8000578:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800057c:	f5a3 60f6 	sub.w	r0, r3, #1968	@ 0x7b0
 8000580:	4613      	mov	r3, r2
 8000582:	00db      	lsls	r3, r3, #3
 8000584:	4413      	add	r3, r2
 8000586:	00da      	lsls	r2, r3, #3
 8000588:	4413      	add	r3, r2
 800058a:	4403      	add	r3, r0
 800058c:	440b      	add	r3, r1
 800058e:	225c      	movs	r2, #92	@ 0x5c
 8000590:	701a      	strb	r2, [r3, #0]
	  display_buffer [player_location[1] + 1] [player_location[0]-1] = '\\';
 8000592:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 800059c:	1e59      	subs	r1, r3, #1
 800059e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80005a2:	f5a3 60f6 	sub.w	r0, r3, #1968	@ 0x7b0
 80005a6:	4613      	mov	r3, r2
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	4413      	add	r3, r2
 80005ac:	00da      	lsls	r2, r3, #3
 80005ae:	4413      	add	r3, r2
 80005b0:	4403      	add	r3, r0
 80005b2:	440b      	add	r3, r1
 80005b4:	225c      	movs	r2, #92	@ 0x5c
 80005b6:	701a      	strb	r2, [r3, #0]
	  display_buffer [player_location[1]] [player_location[0]+1] = '|';
 80005b8:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 80005bc:	4618      	mov	r0, r3
 80005be:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80005c8:	f5a3 61f6 	sub.w	r1, r3, #1968	@ 0x7b0
 80005cc:	4603      	mov	r3, r0
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	4403      	add	r3, r0
 80005d2:	00d8      	lsls	r0, r3, #3
 80005d4:	4403      	add	r3, r0
 80005d6:	440b      	add	r3, r1
 80005d8:	4413      	add	r3, r2
 80005da:	227c      	movs	r2, #124	@ 0x7c
 80005dc:	701a      	strb	r2, [r3, #0]
	  display_buffer [player_location[1]] [player_location[0]-1] = '|';
 80005de:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 80005e2:	4618      	mov	r0, r3
 80005e4:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80005ee:	f5a3 61f6 	sub.w	r1, r3, #1968	@ 0x7b0
 80005f2:	4603      	mov	r3, r0
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	4403      	add	r3, r0
 80005f8:	00d8      	lsls	r0, r3, #3
 80005fa:	4403      	add	r3, r0
 80005fc:	440b      	add	r3, r1
 80005fe:	4413      	add	r3, r2
 8000600:	227c      	movs	r2, #124	@ 0x7c
 8000602:	701a      	strb	r2, [r3, #0]
	  display_buffer [player_location[1] - 1] [player_location[0]] = '-';
 8000604:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 8000608:	1e5a      	subs	r2, r3, #1
 800060a:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 800060e:	4618      	mov	r0, r3
 8000610:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8000614:	f5a3 61f6 	sub.w	r1, r3, #1968	@ 0x7b0
 8000618:	4613      	mov	r3, r2
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4413      	add	r3, r2
 800061e:	00da      	lsls	r2, r3, #3
 8000620:	4413      	add	r3, r2
 8000622:	440b      	add	r3, r1
 8000624:	4403      	add	r3, r0
 8000626:	222d      	movs	r2, #45	@ 0x2d
 8000628:	701a      	strb	r2, [r3, #0]
	  display_buffer [player_location[1] + 1] [player_location[0]] = '-';
 800062a:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 8000634:	4618      	mov	r0, r3
 8000636:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800063a:	f5a3 61f6 	sub.w	r1, r3, #1968	@ 0x7b0
 800063e:	4613      	mov	r3, r2
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	4413      	add	r3, r2
 8000644:	00da      	lsls	r2, r3, #3
 8000646:	4413      	add	r3, r2
 8000648:	440b      	add	r3, r1
 800064a:	4403      	add	r3, r0
 800064c:	222d      	movs	r2, #45	@ 0x2d
 800064e:	701a      	strb	r2, [r3, #0]


	  //Refresh the screen when the flag is set to do so
	  if (refreshing == 1){
 8000650:	f8d7 37a0 	ldr.w	r3, [r7, #1952]	@ 0x7a0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d106      	bne.n	8000666 <main+0x3d6>
		  refresh_screen(display_buffer);
 8000658:	463b      	mov	r3, r7
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f880 	bl	8000760 <refresh_screen>
		  refreshing = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 37a0 	str.w	r3, [r7, #1952]	@ 0x7a0
	  }

	  //Switch case to check for player input, refresh upon key press, also moves the player location
	  switch(keyPressed){
 8000666:	4b3d      	ldr	r3, [pc, #244]	@ (800075c <main+0x4cc>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	3b61      	subs	r3, #97	@ 0x61
 800066c:	2b16      	cmp	r3, #22
 800066e:	d86d      	bhi.n	800074c <main+0x4bc>
 8000670:	a201      	add	r2, pc, #4	@ (adr r2, 8000678 <main+0x3e8>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000711 	.word	0x08000711
 800067c:	0800074d 	.word	0x0800074d
 8000680:	0800074d 	.word	0x0800074d
 8000684:	0800072f 	.word	0x0800072f
 8000688:	0800074d 	.word	0x0800074d
 800068c:	0800074d 	.word	0x0800074d
 8000690:	0800074d 	.word	0x0800074d
 8000694:	0800074d 	.word	0x0800074d
 8000698:	0800074d 	.word	0x0800074d
 800069c:	0800074d 	.word	0x0800074d
 80006a0:	0800074d 	.word	0x0800074d
 80006a4:	0800074d 	.word	0x0800074d
 80006a8:	0800074d 	.word	0x0800074d
 80006ac:	0800074d 	.word	0x0800074d
 80006b0:	0800074d 	.word	0x0800074d
 80006b4:	0800074d 	.word	0x0800074d
 80006b8:	0800074d 	.word	0x0800074d
 80006bc:	0800074d 	.word	0x0800074d
 80006c0:	080006f3 	.word	0x080006f3
 80006c4:	0800074d 	.word	0x0800074d
 80006c8:	0800074d 	.word	0x0800074d
 80006cc:	0800074d 	.word	0x0800074d
 80006d0:	080006d5 	.word	0x080006d5
	  case 'w':
		  refreshing = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	f8c7 37a0 	str.w	r3, [r7, #1952]	@ 0x7a0
		  player_location[1]--;
 80006da:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	3b01      	subs	r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	f887 3799 	strb.w	r3, [r7, #1945]	@ 0x799
		  keyPressed = 0;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <main+0x4cc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
		  break;
 80006f0:	e033      	b.n	800075a <main+0x4ca>
	  case 's':
		  refreshing = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f8c7 37a0 	str.w	r3, [r7, #1952]	@ 0x7a0
		  player_location[1]++;
 80006f8:	f997 3799 	ldrsb.w	r3, [r7, #1945]	@ 0x799
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	3301      	adds	r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	b25b      	sxtb	r3, r3
 8000704:	f887 3799 	strb.w	r3, [r7, #1945]	@ 0x799
		  keyPressed = 0;
 8000708:	4b14      	ldr	r3, [pc, #80]	@ (800075c <main+0x4cc>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
		  break;
 800070e:	e024      	b.n	800075a <main+0x4ca>
	  case 'a':
		  refreshing = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	f8c7 37a0 	str.w	r3, [r7, #1952]	@ 0x7a0
		  player_location[0]--;
 8000716:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 800071a:	b2db      	uxtb	r3, r3
 800071c:	3b01      	subs	r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	b25b      	sxtb	r3, r3
 8000722:	f887 3798 	strb.w	r3, [r7, #1944]	@ 0x798
		  keyPressed = 0;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <main+0x4cc>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
		  break;
 800072c:	e015      	b.n	800075a <main+0x4ca>
	  case 'd':
		  refreshing = 1;
 800072e:	2301      	movs	r3, #1
 8000730:	f8c7 37a0 	str.w	r3, [r7, #1952]	@ 0x7a0
		  player_location[0]++;
 8000734:	f997 3798 	ldrsb.w	r3, [r7, #1944]	@ 0x798
 8000738:	b2db      	uxtb	r3, r3
 800073a:	3301      	adds	r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	b25b      	sxtb	r3, r3
 8000740:	f887 3798 	strb.w	r3, [r7, #1944]	@ 0x798
		  keyPressed = 0;
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <main+0x4cc>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
		  break;
 800074a:	e006      	b.n	800075a <main+0x4ca>
	  default:
		  refreshing = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 37a0 	str.w	r3, [r7, #1952]	@ 0x7a0
		  keyPressed = 0;
 8000752:	4b02      	ldr	r3, [pc, #8]	@ (800075c <main+0x4cc>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
		  break;
 8000758:	bf00      	nop
	  for (int row = 0; row < 24; row++){
 800075a:	e655      	b.n	8000408 <main+0x178>
 800075c:	2000007c 	.word	0x2000007c

08000760 <refresh_screen>:



// Refreshes the screen, accepts a display_buffer 2D array,
// Expects a display that is 24 rows long, and 80 characters wide
void refresh_screen(char displayBuffer[24][81]) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

	for (int row = 0; row < 24; row++){
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e011      	b.n	8000792 <refresh_screen+0x32>
		LPUART_moveCursor(row, 0); // Move cursor to the beginning of the current row
 800076e:	2100      	movs	r1, #0
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f000 fa17 	bl	8000ba4 <LPUART_moveCursor>
		LPUART_print(displayBuffer[row]); // Print the string from the current row
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	4613      	mov	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	4413      	add	r3, r2
 800077e:	00da      	lsls	r2, r3, #3
 8000780:	4413      	add	r3, r2
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f974 	bl	8000a74 <LPUART_print>
	for (int row = 0; row < 24; row++){
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2b17      	cmp	r3, #23
 8000796:	ddea      	ble.n	800076e <refresh_screen+0xe>
	}
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b096      	sub	sp, #88	@ 0x58
 80007a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2244      	movs	r2, #68	@ 0x44
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fa5d 	bl	8001c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007c8:	f000 fbd6 	bl	8000f78 <HAL_PWREx_ControlVoltageScaling>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d2:	f000 f82d 	bl	8000830 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007d6:	2310      	movs	r3, #16
 80007d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007da:	2301      	movs	r3, #1
 80007dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007e2:	2360      	movs	r3, #96	@ 0x60
 80007e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fc18 	bl	8001024 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007fa:	f000 f819 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f001 f81d 	bl	8001858 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000824:	f000 f804 	bl	8000830 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3758      	adds	r7, #88	@ 0x58
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <Error_Handler>:


void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <HAL_MspInit+0x44>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000846:	4a0e      	ldr	r2, [pc, #56]	@ (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6613      	str	r3, [r2, #96]	@ 0x60
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <HAL_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000864:	6593      	str	r3, [r2, #88]	@ 0x58
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <NMI_Handler+0x4>

0800088c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <MemManage_Handler+0x4>

0800089c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <UsageFault_Handler+0x4>

080008ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008da:	f000 fa39 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ec:	4a14      	ldr	r2, [pc, #80]	@ (8000940 <_sbrk+0x5c>)
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <_sbrk+0x60>)
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f8:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <_sbrk+0x64>)
 8000902:	4a12      	ldr	r2, [pc, #72]	@ (800094c <_sbrk+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	d207      	bcs.n	8000924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000914:	f001 f9b4 	bl	8001c80 <__errno>
 8000918:	4603      	mov	r3, r0
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000922:	e009      	b.n	8000938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092a:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	4a05      	ldr	r2, [pc, #20]	@ (8000948 <_sbrk+0x64>)
 8000934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20050000 	.word	0x20050000
 8000944:	00000400 	.word	0x00000400
 8000948:	20000078 	.word	0x20000078
 800094c:	200001d0 	.word	0x200001d0

08000950 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	@ (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <LPUART_init>:
#include "uart.h"

char keyPressed;

void LPUART_init(){
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	//power avail and RCC config
	PWR->CR2 |= (PWR_CR2_IOSV);
 8000978:	4b39      	ldr	r3, [pc, #228]	@ (8000a60 <LPUART_init+0xec>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	4a38      	ldr	r2, [pc, #224]	@ (8000a60 <LPUART_init+0xec>)
 800097e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000982:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);
 8000984:	4b37      	ldr	r3, [pc, #220]	@ (8000a64 <LPUART_init+0xf0>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000988:	4a36      	ldr	r2, [pc, #216]	@ (8000a64 <LPUART_init+0xf0>)
 800098a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800098e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN;
 8000990:	4b34      	ldr	r3, [pc, #208]	@ (8000a64 <LPUART_init+0xf0>)
 8000992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000994:	4a33      	ldr	r2, [pc, #204]	@ (8000a64 <LPUART_init+0xf0>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	65d3      	str	r3, [r2, #92]	@ 0x5c

	//GPIOG pins and Alt Func config
	//PG7 (TX) and PG8 (RX)
	GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
 800099c:	4b32      	ldr	r3, [pc, #200]	@ (8000a68 <LPUART_init+0xf4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a31      	ldr	r2, [pc, #196]	@ (8000a68 <LPUART_init+0xf4>)
 80009a2:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 80009a6:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //AF mode
 80009a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <LPUART_init+0xf4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a2e      	ldr	r2, [pc, #184]	@ (8000a68 <LPUART_init+0xf4>)
 80009ae:	f443 3320 	orr.w	r3, r3, #163840	@ 0x28000
 80009b2:	6013      	str	r3, [r2, #0]
	GPIOG->OTYPER &= ~(GPIO_PIN_7 | GPIO_PIN_8);
 80009b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <LPUART_init+0xf4>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a68 <LPUART_init+0xf4>)
 80009ba:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80009be:	6053      	str	r3, [r2, #4]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
 80009c0:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <LPUART_init+0xf4>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <LPUART_init+0xf4>)
 80009c6:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 80009ca:	60d3      	str	r3, [r2, #12]
	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8);
 80009cc:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <LPUART_init+0xf4>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	4a25      	ldr	r2, [pc, #148]	@ (8000a68 <LPUART_init+0xf4>)
 80009d2:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 80009d6:	6093      	str	r3, [r2, #8]
	GPIOG->AFR[0] &= ~(GPIO_AFRL_AFSEL7); //pin7 AF to FN8
 80009d8:	4b23      	ldr	r3, [pc, #140]	@ (8000a68 <LPUART_init+0xf4>)
 80009da:	6a1b      	ldr	r3, [r3, #32]
 80009dc:	4a22      	ldr	r2, [pc, #136]	@ (8000a68 <LPUART_init+0xf4>)
 80009de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80009e2:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[0] |= (GPIO_AFRL_AFSEL7_3);
 80009e4:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <LPUART_init+0xf4>)
 80009e6:	6a1b      	ldr	r3, [r3, #32]
 80009e8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a68 <LPUART_init+0xf4>)
 80009ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ee:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[1] &= ~(GPIO_AFRH_AFSEL8); //pin8 AF to FN8
 80009f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <LPUART_init+0xf4>)
 80009f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <LPUART_init+0xf4>)
 80009f6:	f023 030f 	bic.w	r3, r3, #15
 80009fa:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL8_3);
 80009fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <LPUART_init+0xf4>)
 80009fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a00:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <LPUART_init+0xf4>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6253      	str	r3, [r2, #36]	@ 0x24

	//UART control reg config
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); //8b data mode
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <LPUART_init+0xf8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <LPUART_init+0xf8>)
 8000a0e:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8000a12:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE; //en LPUART1
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <LPUART_init+0xf8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <LPUART_init+0xf8>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE); //en xmit & recv
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <LPUART_init+0xf8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a11      	ldr	r2, [pc, #68]	@ (8000a6c <LPUART_init+0xf8>)
 8000a26:	f043 030c 	orr.w	r3, r3, #12
 8000a2a:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE; //en LPUART1 recv int
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <LPUART_init+0xf8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <LPUART_init+0xf8>)
 8000a32:	f043 0320 	orr.w	r3, r3, #32
 8000a36:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE); //clr Recv-Not-Empty flag
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <LPUART_init+0xf8>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a6c <LPUART_init+0xf8>)
 8000a3e:	f023 0320 	bic.w	r3, r3, #32
 8000a42:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 256*2000000/115200; //set baud-rate reg
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <LPUART_init+0xf8>)
 8000a46:	f241 125c 	movw	r2, #4444	@ 0x115c
 8000a4a:	60da      	str	r2, [r3, #12]

	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   //en LPUART1 ISR
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <LPUART_init+0xfc>)
 8000a4e:	2240      	movs	r2, #64	@ 0x40
 8000a50:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a52:	b662      	cpsie	i
}
 8000a54:	bf00      	nop
	__enable_irq();
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40007000 	.word	0x40007000
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48001800 	.word	0x48001800
 8000a6c:	40008000 	.word	0x40008000
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <LPUART_print>:

void LPUART_print(const char* message){
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	//send chars until empty
	uint16_t iStrIdx = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	81fb      	strh	r3, [r7, #14]
	while(message[iStrIdx]!=0){
 8000a80:	e00f      	b.n	8000aa2 <LPUART_print+0x2e>
		while(!(LPUART1->ISR & USART_ISR_TXE));
 8000a82:	bf00      	nop
 8000a84:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <LPUART_print+0x48>)
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0f9      	beq.n	8000a84 <LPUART_print+0x10>
		LPUART1->TDR = message[iStrIdx++];
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	81fa      	strh	r2, [r7, #14]
 8000a96:	461a      	mov	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	781a      	ldrb	r2, [r3, #0]
 8000a9e:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <LPUART_print+0x48>)
 8000aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
	while(message[iStrIdx]!=0){
 8000aa2:	89fb      	ldrh	r3, [r7, #14]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1e9      	bne.n	8000a82 <LPUART_print+0xe>
	}
}
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	40008000 	.word	0x40008000

08000ac0 <LPUART_printESC>:

void LPUART_printESC(const char* message){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	LPUART_print("\x1B");//ESC
 8000ac8:	4806      	ldr	r0, [pc, #24]	@ (8000ae4 <LPUART_printESC+0x24>)
 8000aca:	f7ff ffd3 	bl	8000a74 <LPUART_print>
	LPUART_print("[");
 8000ace:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <LPUART_printESC+0x28>)
 8000ad0:	f7ff ffd0 	bl	8000a74 <LPUART_print>
	LPUART_print(message);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ffcd 	bl	8000a74 <LPUART_print>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	0800272c 	.word	0x0800272c
 8000ae8:	08002730 	.word	0x08002730

08000aec <LPUART1_IRQHandler>:

void LPUART1_IRQHandler(void){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
	//if data is in recieve buffer then read and decode
    uint8_t character;
	if (LPUART1->ISR & USART_ISR_RXNE){
 8000af2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <LPUART1_IRQHandler+0xb0>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d04a      	beq.n	8000b94 <LPUART1_IRQHandler+0xa8>
	  character = LPUART1->RDR;
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <LPUART1_IRQHandler+0xb0>)
 8000b00:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	71fb      	strb	r3, [r7, #7]
	  switch(character){
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	3b42      	subs	r3, #66	@ 0x42
 8000b0a:	2b15      	cmp	r3, #21
 8000b0c:	d83e      	bhi.n	8000b8c <LPUART1_IRQHandler+0xa0>
 8000b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b14 <LPUART1_IRQHandler+0x28>)
 8000b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b14:	08000b7d 	.word	0x08000b7d
 8000b18:	08000b8d 	.word	0x08000b8d
 8000b1c:	08000b8d 	.word	0x08000b8d
 8000b20:	08000b8d 	.word	0x08000b8d
 8000b24:	08000b8d 	.word	0x08000b8d
 8000b28:	08000b75 	.word	0x08000b75
 8000b2c:	08000b8d 	.word	0x08000b8d
 8000b30:	08000b8d 	.word	0x08000b8d
 8000b34:	08000b8d 	.word	0x08000b8d
 8000b38:	08000b8d 	.word	0x08000b8d
 8000b3c:	08000b8d 	.word	0x08000b8d
 8000b40:	08000b8d 	.word	0x08000b8d
 8000b44:	08000b8d 	.word	0x08000b8d
 8000b48:	08000b8d 	.word	0x08000b8d
 8000b4c:	08000b8d 	.word	0x08000b8d
 8000b50:	08000b8d 	.word	0x08000b8d
 8000b54:	08000b6d 	.word	0x08000b6d
 8000b58:	08000b8d 	.word	0x08000b8d
 8000b5c:	08000b8d 	.word	0x08000b8d
 8000b60:	08000b8d 	.word	0x08000b8d
 8000b64:	08000b8d 	.word	0x08000b8d
 8000b68:	08000b85 	.word	0x08000b85
	   case 'R':
		   LPUART_setTextColor(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f000 f851 	bl	8000c14 <LPUART_setTextColor>
		   break;
 8000b72:	e00f      	b.n	8000b94 <LPUART1_IRQHandler+0xa8>
	   case 'G':
		   LPUART_setTextColor(2);
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 f84d 	bl	8000c14 <LPUART_setTextColor>
		   break;
 8000b7a:	e00b      	b.n	8000b94 <LPUART1_IRQHandler+0xa8>
	   case 'B':
		   LPUART_setTextColor(4);
 8000b7c:	2004      	movs	r0, #4
 8000b7e:	f000 f849 	bl	8000c14 <LPUART_setTextColor>
		   break;
 8000b82:	e007      	b.n	8000b94 <LPUART1_IRQHandler+0xa8>
	   case 'W':
		   LPUART_setTextColor(7);
 8000b84:	2007      	movs	r0, #7
 8000b86:	f000 f845 	bl	8000c14 <LPUART_setTextColor>
		   break;
 8000b8a:	e003      	b.n	8000b94 <LPUART1_IRQHandler+0xa8>
	   default:
		   keyPressed = character;
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <LPUART1_IRQHandler+0xb4>)
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	7013      	strb	r3, [r2, #0]
//		  while(!(LPUART1->ISR & USART_ISR_TXE));
//		  LPUART1->TDR = character;
	  }
	}
}
 8000b92:	e7ff      	b.n	8000b94 <LPUART1_IRQHandler+0xa8>
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40008000 	.word	0x40008000
 8000ba0:	2000007c 	.word	0x2000007c

08000ba4 <LPUART_moveCursor>:

void LPUART_moveCursor(int spaces, int lines){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
	char spacesStr[16];
	sprintf(spacesStr, "%d", spaces);
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	490f      	ldr	r1, [pc, #60]	@ (8000bf4 <LPUART_moveCursor+0x50>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 f83a 	bl	8001c30 <siprintf>
	LPUART_printESC(spacesStr);
 8000bbc:	f107 0318 	add.w	r3, r7, #24
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff7d 	bl	8000ac0 <LPUART_printESC>
	char linesStr[16];
	sprintf(linesStr, "%d", lines);
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	4909      	ldr	r1, [pc, #36]	@ (8000bf4 <LPUART_moveCursor+0x50>)
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 f82e 	bl	8001c30 <siprintf>
	LPUART_print(";");
 8000bd4:	4808      	ldr	r0, [pc, #32]	@ (8000bf8 <LPUART_moveCursor+0x54>)
 8000bd6:	f7ff ff4d 	bl	8000a74 <LPUART_print>
	LPUART_print(linesStr);
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff48 	bl	8000a74 <LPUART_print>
	LPUART_print("H");
 8000be4:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <LPUART_moveCursor+0x58>)
 8000be6:	f7ff ff45 	bl	8000a74 <LPUART_print>
}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	@ 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08002734 	.word	0x08002734
 8000bf8:	08002738 	.word	0x08002738
 8000bfc:	0800273c 	.word	0x0800273c

08000c00 <LPUART_clearScreen>:

void LPUART_clearLine(){
	LPUART_printESC("2K");
}

void LPUART_clearScreen(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	LPUART_printESC("2J");
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <LPUART_clearScreen+0x10>)
 8000c06:	f7ff ff5b 	bl	8000ac0 <LPUART_printESC>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	08002744 	.word	0x08002744

08000c14 <LPUART_setTextColor>:

void LPUART_setBlink(){
	LPUART_printESC("5m");
}

void LPUART_setTextColor(unsigned int color){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	char colorStr[16];
	sprintf(colorStr, "%d", color);
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	4909      	ldr	r1, [pc, #36]	@ (8000c48 <LPUART_setTextColor+0x34>)
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 f803 	bl	8001c30 <siprintf>
	LPUART_printESC("3");
 8000c2a:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <LPUART_setTextColor+0x38>)
 8000c2c:	f7ff ff48 	bl	8000ac0 <LPUART_printESC>
	LPUART_print(colorStr);
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff1d 	bl	8000a74 <LPUART_print>
	LPUART_print("m");
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <LPUART_setTextColor+0x3c>)
 8000c3c:	f7ff ff1a 	bl	8000a74 <LPUART_print>
}
 8000c40:	bf00      	nop
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	08002734 	.word	0x08002734
 8000c4c:	08002758 	.word	0x08002758
 8000c50:	0800275c 	.word	0x0800275c

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff fe7a 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f001 f803 	bl	8001c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fb03 	bl	8000290 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c8c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c98:	080027e8 	.word	0x080027e8
  ldr r2, =_sbss
 8000c9c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ca0:	200001cc 	.word	0x200001cc

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>

08000ca6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f91f 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f80e 	bl	8000cd8 <HAL_InitTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc8:	f7ff fdb8 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ce4:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <HAL_InitTick+0x6c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d023      	beq.n	8000d34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <HAL_InitTick+0x70>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <HAL_InitTick+0x6c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f91d 	bl	8000f42 <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d10f      	bne.n	8000d2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d809      	bhi.n	8000d28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d1c:	f000 f8f5 	bl	8000f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d20:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <HAL_InitTick+0x74>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	e007      	b.n	8000d38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e004      	b.n	8000d38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	73fb      	strb	r3, [r7, #15]
 8000d32:	e001      	b.n	8000d38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000004 	.word	0x20000004

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000080 	.word	0x20000080

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <HAL_GetTick+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000080 	.word	0x20000080

08000d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	f003 0307 	and.w	r3, r3, #7
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	@ (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	@ (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	@ 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ed4:	f7ff ff8e 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff47 	bl	8000d90 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff5c 	bl	8000dd8 <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff8e 	bl	8000e48 <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffb0 	bl	8000eb0 <SysTick_Config>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40007000 	.word	0x40007000

08000f78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f86:	d130      	bne.n	8000fea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f88:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f94:	d038      	beq.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fa4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2232      	movs	r2, #50	@ 0x32
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001020 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	0c9b      	lsrs	r3, r3, #18
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fbc:	e002      	b.n	8000fc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fd0:	d102      	bne.n	8000fd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f2      	bne.n	8000fbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fe4:	d110      	bne.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e00f      	b.n	800100a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ff6:	d007      	beq.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff8:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001000:	4a05      	ldr	r2, [pc, #20]	@ (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001002:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001006:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40007000 	.word	0x40007000
 800101c:	20000000 	.word	0x20000000
 8001020:	431bde83 	.word	0x431bde83

08001024 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	f000 bc08 	b.w	8001848 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001038:	4b96      	ldr	r3, [pc, #600]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 030c 	and.w	r3, r3, #12
 8001040:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001042:	4b94      	ldr	r3, [pc, #592]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80e4 	beq.w	8001222 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <HAL_RCC_OscConfig+0x4c>
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2b0c      	cmp	r3, #12
 8001064:	f040 808b 	bne.w	800117e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b01      	cmp	r3, #1
 800106c:	f040 8087 	bne.w	800117e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001070:	4b88      	ldr	r3, [pc, #544]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_OscConfig+0x64>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e3df      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1a      	ldr	r2, [r3, #32]
 800108c:	4b81      	ldr	r3, [pc, #516]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <HAL_RCC_OscConfig+0x7e>
 8001098:	4b7e      	ldr	r3, [pc, #504]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010a0:	e005      	b.n	80010ae <HAL_RCC_OscConfig+0x8a>
 80010a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80010a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d223      	bcs.n	80010fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fd5a 	bl	8001b70 <RCC_SetFlashLatencyFromMSIRange>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e3c0      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c6:	4b73      	ldr	r3, [pc, #460]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a72      	ldr	r2, [pc, #456]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b70      	ldr	r3, [pc, #448]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	496d      	ldr	r1, [pc, #436]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	4968      	ldr	r1, [pc, #416]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
 80010f8:	e025      	b.n	8001146 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010fa:	4b66      	ldr	r3, [pc, #408]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a65      	ldr	r2, [pc, #404]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b63      	ldr	r3, [pc, #396]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	4960      	ldr	r1, [pc, #384]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001118:	4b5e      	ldr	r3, [pc, #376]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	495b      	ldr	r1, [pc, #364]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fd1a 	bl	8001b70 <RCC_SetFlashLatencyFromMSIRange>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e380      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001146:	f000 fc87 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 800114a:	4602      	mov	r2, r0
 800114c:	4b51      	ldr	r3, [pc, #324]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	4950      	ldr	r1, [pc, #320]	@ (8001298 <HAL_RCC_OscConfig+0x274>)
 8001158:	5ccb      	ldrb	r3, [r1, r3]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	fa22 f303 	lsr.w	r3, r2, r3
 8001162:	4a4e      	ldr	r2, [pc, #312]	@ (800129c <HAL_RCC_OscConfig+0x278>)
 8001164:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001166:	4b4e      	ldr	r3, [pc, #312]	@ (80012a0 <HAL_RCC_OscConfig+0x27c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fdb4 	bl	8000cd8 <HAL_InitTick>
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d052      	beq.n	8001220 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	e364      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d032      	beq.n	80011ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001186:	4b43      	ldr	r3, [pc, #268]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a42      	ldr	r2, [pc, #264]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001192:	f7ff fdf1 	bl	8000d78 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800119a:	f7ff fded 	bl	8000d78 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e34d      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ac:	4b39      	ldr	r3, [pc, #228]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b8:	4b36      	ldr	r3, [pc, #216]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a35      	ldr	r2, [pc, #212]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b33      	ldr	r3, [pc, #204]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4930      	ldr	r1, [pc, #192]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	492b      	ldr	r1, [pc, #172]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
 80011ea:	e01a      	b.n	8001222 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011ec:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a28      	ldr	r2, [pc, #160]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fdbe 	bl	8000d78 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001200:	f7ff fdba 	bl	8000d78 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e31a      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x1dc>
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001220:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d073      	beq.n	8001316 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b08      	cmp	r3, #8
 8001232:	d005      	beq.n	8001240 <HAL_RCC_OscConfig+0x21c>
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2b0c      	cmp	r3, #12
 8001238:	d10e      	bne.n	8001258 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b03      	cmp	r3, #3
 800123e:	d10b      	bne.n	8001258 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d063      	beq.n	8001314 <HAL_RCC_OscConfig+0x2f0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d15f      	bne.n	8001314 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e2f7      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001260:	d106      	bne.n	8001270 <HAL_RCC_OscConfig+0x24c>
 8001262:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a0b      	ldr	r2, [pc, #44]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e025      	b.n	80012bc <HAL_RCC_OscConfig+0x298>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001278:	d114      	bne.n	80012a4 <HAL_RCC_OscConfig+0x280>
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a02      	ldr	r2, [pc, #8]	@ (8001294 <HAL_RCC_OscConfig+0x270>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e013      	b.n	80012bc <HAL_RCC_OscConfig+0x298>
 8001294:	40021000 	.word	0x40021000
 8001298:	08002764 	.word	0x08002764
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004
 80012a4:	4ba0      	ldr	r3, [pc, #640]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a9f      	ldr	r2, [pc, #636]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b9d      	ldr	r3, [pc, #628]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a9c      	ldr	r2, [pc, #624]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fd58 	bl	8000d78 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fd54 	bl	8000d78 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	@ 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e2b4      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012de:	4b92      	ldr	r3, [pc, #584]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x2a8>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fd44 	bl	8000d78 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fd40 	bl	8000d78 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	@ 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e2a0      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001306:	4b88      	ldr	r3, [pc, #544]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x2d0>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d060      	beq.n	80013e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b04      	cmp	r3, #4
 8001326:	d005      	beq.n	8001334 <HAL_RCC_OscConfig+0x310>
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b0c      	cmp	r3, #12
 800132c:	d119      	bne.n	8001362 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d116      	bne.n	8001362 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001334:	4b7c      	ldr	r3, [pc, #496]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_RCC_OscConfig+0x328>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e27d      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b76      	ldr	r3, [pc, #472]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	061b      	lsls	r3, r3, #24
 800135a:	4973      	ldr	r1, [pc, #460]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001360:	e040      	b.n	80013e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d023      	beq.n	80013b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136a:	4b6f      	ldr	r3, [pc, #444]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a6e      	ldr	r2, [pc, #440]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fcff 	bl	8000d78 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fcfb 	bl	8000d78 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e25b      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001390:	4b65      	ldr	r3, [pc, #404]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b62      	ldr	r3, [pc, #392]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	061b      	lsls	r3, r3, #24
 80013aa:	495f      	ldr	r1, [pc, #380]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
 80013b0:	e018      	b.n	80013e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a5c      	ldr	r2, [pc, #368]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80013b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fcdb 	bl	8000d78 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fcd7 	bl	8000d78 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e237      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d8:	4b53      	ldr	r3, [pc, #332]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d03c      	beq.n	800146a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01c      	beq.n	8001432 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80013fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001408:	f7ff fcb6 	bl	8000d78 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff fcb2 	bl	8000d78 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e212      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001422:	4b41      	ldr	r3, [pc, #260]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 8001424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0ef      	beq.n	8001410 <HAL_RCC_OscConfig+0x3ec>
 8001430:	e01b      	b.n	800146a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001432:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 8001434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001438:	4a3b      	ldr	r2, [pc, #236]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001442:	f7ff fc99 	bl	8000d78 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff fc95 	bl	8000d78 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e1f5      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800145c:	4b32      	ldr	r3, [pc, #200]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 800145e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ef      	bne.n	800144a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80a6 	beq.w	80015c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800147c:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10d      	bne.n	80014a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 800148a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148c:	4a26      	ldr	r2, [pc, #152]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001492:	6593      	str	r3, [r2, #88]	@ 0x58
 8001494:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a0:	2301      	movs	r3, #1
 80014a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a4:	4b21      	ldr	r3, [pc, #132]	@ (800152c <HAL_RCC_OscConfig+0x508>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d118      	bne.n	80014e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014b0:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <HAL_RCC_OscConfig+0x508>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a1d      	ldr	r2, [pc, #116]	@ (800152c <HAL_RCC_OscConfig+0x508>)
 80014b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc5c 	bl	8000d78 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c4:	f7ff fc58 	bl	8000d78 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1b8      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_RCC_OscConfig+0x508>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d108      	bne.n	80014fc <HAL_RCC_OscConfig+0x4d8>
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80014ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014fa:	e029      	b.n	8001550 <HAL_RCC_OscConfig+0x52c>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d115      	bne.n	8001530 <HAL_RCC_OscConfig+0x50c>
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 8001506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800150a:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001514:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151a:	4a03      	ldr	r2, [pc, #12]	@ (8001528 <HAL_RCC_OscConfig+0x504>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001524:	e014      	b.n	8001550 <HAL_RCC_OscConfig+0x52c>
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	40007000 	.word	0x40007000
 8001530:	4b9d      	ldr	r3, [pc, #628]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001536:	4a9c      	ldr	r2, [pc, #624]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001540:	4b99      	ldr	r3, [pc, #612]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001546:	4a98      	ldr	r2, [pc, #608]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001548:	f023 0304 	bic.w	r3, r3, #4
 800154c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d016      	beq.n	8001586 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff fc0e 	bl	8000d78 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800155e:	e00a      	b.n	8001576 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff fc0a 	bl	8000d78 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e168      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001576:	4b8c      	ldr	r3, [pc, #560]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ed      	beq.n	8001560 <HAL_RCC_OscConfig+0x53c>
 8001584:	e015      	b.n	80015b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff fbf7 	bl	8000d78 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff fbf3 	bl	8000d78 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e151      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a4:	4b80      	ldr	r3, [pc, #512]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 80015a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ed      	bne.n	800158e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b8:	4b7b      	ldr	r3, [pc, #492]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015bc:	4a7a      	ldr	r2, [pc, #488]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 80015be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d03c      	beq.n	800164a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01c      	beq.n	8001612 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015d8:	4b73      	ldr	r3, [pc, #460]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 80015da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015de:	4a72      	ldr	r2, [pc, #456]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fbc6 	bl	8000d78 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f0:	f7ff fbc2 	bl	8000d78 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e122      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001602:	4b69      	ldr	r3, [pc, #420]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001604:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ef      	beq.n	80015f0 <HAL_RCC_OscConfig+0x5cc>
 8001610:	e01b      	b.n	800164a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001612:	4b65      	ldr	r3, [pc, #404]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001614:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001618:	4a63      	ldr	r2, [pc, #396]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff fba9 	bl	8000d78 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800162a:	f7ff fba5 	bl	8000d78 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e105      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800163c:	4b5a      	ldr	r3, [pc, #360]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 800163e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ef      	bne.n	800162a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80f9 	beq.w	8001846 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001658:	2b02      	cmp	r3, #2
 800165a:	f040 80cf 	bne.w	80017fc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800165e:	4b52      	ldr	r3, [pc, #328]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f003 0203 	and.w	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	429a      	cmp	r2, r3
 8001670:	d12c      	bne.n	80016cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	3b01      	subs	r3, #1
 800167e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d123      	bne.n	80016cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800168e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d11b      	bne.n	80016cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800169e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d113      	bne.n	80016cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ae:	085b      	lsrs	r3, r3, #1
 80016b0:	3b01      	subs	r3, #1
 80016b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d109      	bne.n	80016cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	085b      	lsrs	r3, r3, #1
 80016c4:	3b01      	subs	r3, #1
 80016c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d071      	beq.n	80017b0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d068      	beq.n	80017a4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016d2:	4b35      	ldr	r3, [pc, #212]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d105      	bne.n	80016ea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016de:	4b32      	ldr	r3, [pc, #200]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0ac      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016ee:	4b2e      	ldr	r3, [pc, #184]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a2d      	ldr	r2, [pc, #180]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 80016f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016fa:	f7ff fb3d 	bl	8000d78 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fb39 	bl	8000d78 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e099      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001714:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001720:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <HAL_RCC_OscConfig+0x788>)
 8001726:	4013      	ands	r3, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001730:	3a01      	subs	r2, #1
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	4311      	orrs	r1, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800173a:	0212      	lsls	r2, r2, #8
 800173c:	4311      	orrs	r1, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001742:	0852      	lsrs	r2, r2, #1
 8001744:	3a01      	subs	r2, #1
 8001746:	0552      	lsls	r2, r2, #21
 8001748:	4311      	orrs	r1, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800174e:	0852      	lsrs	r2, r2, #1
 8001750:	3a01      	subs	r2, #1
 8001752:	0652      	lsls	r2, r2, #25
 8001754:	4311      	orrs	r1, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800175a:	06d2      	lsls	r2, r2, #27
 800175c:	430a      	orrs	r2, r1
 800175e:	4912      	ldr	r1, [pc, #72]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001760:	4313      	orrs	r3, r2
 8001762:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0f      	ldr	r2, [pc, #60]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 800176a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800176e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001770:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4a0c      	ldr	r2, [pc, #48]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800177a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800177c:	f7ff fafc 	bl	8000d78 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff faf8 	bl	8000d78 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e058      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001796:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017a2:	e050      	b.n	8001846 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e04f      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
 80017a8:	40021000 	.word	0x40021000
 80017ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d144      	bne.n	8001846 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a23      	ldr	r2, [pc, #140]	@ (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a20      	ldr	r2, [pc, #128]	@ (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017d4:	f7ff fad0 	bl	8000d78 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff facc 	bl	8000d78 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e02c      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ee:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x7b8>
 80017fa:	e024      	b.n	8001846 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d01f      	beq.n	8001842 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a12      	ldr	r2, [pc, #72]	@ (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001808:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800180c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff fab3 	bl	8000d78 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff faaf 	bl	8000d78 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e00f      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <HAL_RCC_OscConfig+0x82c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f0      	bne.n	8001816 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4905      	ldr	r1, [pc, #20]	@ (8001850 <HAL_RCC_OscConfig+0x82c>)
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_RCC_OscConfig+0x830>)
 800183c:	4013      	ands	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
 8001840:	e001      	b.n	8001846 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	feeefffc 	.word	0xfeeefffc

08001858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0e7      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b75      	ldr	r3, [pc, #468]	@ (8001a44 <HAL_RCC_ClockConfig+0x1ec>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d910      	bls.n	800189c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b72      	ldr	r3, [pc, #456]	@ (8001a44 <HAL_RCC_ClockConfig+0x1ec>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 0207 	bic.w	r2, r3, #7
 8001882:	4970      	ldr	r1, [pc, #448]	@ (8001a44 <HAL_RCC_ClockConfig+0x1ec>)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b6e      	ldr	r3, [pc, #440]	@ (8001a44 <HAL_RCC_ClockConfig+0x1ec>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0cf      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d010      	beq.n	80018ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	4b66      	ldr	r3, [pc, #408]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d908      	bls.n	80018ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b63      	ldr	r3, [pc, #396]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4960      	ldr	r1, [pc, #384]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d04c      	beq.n	8001970 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018de:	4b5a      	ldr	r3, [pc, #360]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d121      	bne.n	800192e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e0a6      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f6:	4b54      	ldr	r3, [pc, #336]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d115      	bne.n	800192e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e09a      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800190e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e08e      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e086      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800192e:	4b46      	ldr	r3, [pc, #280]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f023 0203 	bic.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4943      	ldr	r1, [pc, #268]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001940:	f7ff fa1a 	bl	8000d78 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff fa16 	bl	8000d78 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e06e      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 020c 	and.w	r2, r3, #12
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d1eb      	bne.n	8001948 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d010      	beq.n	800199e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4b31      	ldr	r3, [pc, #196]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001988:	429a      	cmp	r2, r3
 800198a:	d208      	bcs.n	800199e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	492b      	ldr	r1, [pc, #172]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800199e:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <HAL_RCC_ClockConfig+0x1ec>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d210      	bcs.n	80019ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ac:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <HAL_RCC_ClockConfig+0x1ec>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 0207 	bic.w	r2, r3, #7
 80019b4:	4923      	ldr	r1, [pc, #140]	@ (8001a44 <HAL_RCC_ClockConfig+0x1ec>)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019bc:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <HAL_RCC_ClockConfig+0x1ec>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e036      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d008      	beq.n	80019ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019da:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	4918      	ldr	r1, [pc, #96]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d009      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019f8:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4910      	ldr	r1, [pc, #64]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a0c:	f000 f824 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	490b      	ldr	r1, [pc, #44]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f4>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_RCC_ClockConfig+0x1fc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f951 	bl	8000cd8 <HAL_InitTick>
 8001a36:	4603      	mov	r3, r0
 8001a38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	08002764 	.word	0x08002764
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	@ 0x24
 8001a5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a66:	4b3e      	ldr	r3, [pc, #248]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a70:	4b3b      	ldr	r3, [pc, #236]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x34>
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d121      	bne.n	8001aca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d11e      	bne.n	8001aca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a8c:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a98:	4b31      	ldr	r3, [pc, #196]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e005      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10d      	bne.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d102      	bne.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ad0:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	e004      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001adc:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ade:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d134      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0xa6>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d003      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0xac>
 8001afc:	e005      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b00:	617b      	str	r3, [r7, #20]
      break;
 8001b02:	e005      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001b06:	617b      	str	r3, [r7, #20]
      break;
 8001b08:	e002      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	617b      	str	r3, [r7, #20]
      break;
 8001b0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	fb03 f202 	mul.w	r2, r3, r2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	0e5b      	lsrs	r3, r3, #25
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	3301      	adds	r3, #1
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b50:	69bb      	ldr	r3, [r7, #24]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	@ 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08002774 	.word	0x08002774
 8001b68:	00f42400 	.word	0x00f42400
 8001b6c:	007a1200 	.word	0x007a1200

08001b70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b88:	f7ff f9e8 	bl	8000f5c <HAL_PWREx_GetVoltageRange>
 8001b8c:	6178      	str	r0, [r7, #20]
 8001b8e:	e014      	b.n	8001bba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b94:	4a24      	ldr	r2, [pc, #144]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b9c:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ba8:	f7ff f9d8 	bl	8000f5c <HAL_PWREx_GetVoltageRange>
 8001bac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bae:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bc0:	d10b      	bne.n	8001bda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b80      	cmp	r3, #128	@ 0x80
 8001bc6:	d919      	bls.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bcc:	d902      	bls.n	8001bd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bce:	2302      	movs	r3, #2
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	e013      	b.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	e010      	b.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b80      	cmp	r3, #128	@ 0x80
 8001bde:	d902      	bls.n	8001be6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001be0:	2303      	movs	r3, #3
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	e00a      	b.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b80      	cmp	r3, #128	@ 0x80
 8001bea:	d102      	bne.n	8001bf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bec:	2302      	movs	r3, #2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	e004      	b.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b70      	cmp	r3, #112	@ 0x70
 8001bf6:	d101      	bne.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 0207 	bic.w	r2, r3, #7
 8001c04:	4909      	ldr	r1, [pc, #36]	@ (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c0c:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40022000 	.word	0x40022000

08001c30 <siprintf>:
 8001c30:	b40e      	push	{r1, r2, r3}
 8001c32:	b500      	push	{lr}
 8001c34:	b09c      	sub	sp, #112	@ 0x70
 8001c36:	ab1d      	add	r3, sp, #116	@ 0x74
 8001c38:	9002      	str	r0, [sp, #8]
 8001c3a:	9006      	str	r0, [sp, #24]
 8001c3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001c40:	4809      	ldr	r0, [pc, #36]	@ (8001c68 <siprintf+0x38>)
 8001c42:	9107      	str	r1, [sp, #28]
 8001c44:	9104      	str	r1, [sp, #16]
 8001c46:	4909      	ldr	r1, [pc, #36]	@ (8001c6c <siprintf+0x3c>)
 8001c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c4c:	9105      	str	r1, [sp, #20]
 8001c4e:	6800      	ldr	r0, [r0, #0]
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	a902      	add	r1, sp, #8
 8001c54:	f000 f8aa 	bl	8001dac <_svfiprintf_r>
 8001c58:	9b02      	ldr	r3, [sp, #8]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	b01c      	add	sp, #112	@ 0x70
 8001c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c64:	b003      	add	sp, #12
 8001c66:	4770      	bx	lr
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	ffff0208 	.word	0xffff0208

08001c70 <memset>:
 8001c70:	4402      	add	r2, r0
 8001c72:	4603      	mov	r3, r0
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d100      	bne.n	8001c7a <memset+0xa>
 8001c78:	4770      	bx	lr
 8001c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8001c7e:	e7f9      	b.n	8001c74 <memset+0x4>

08001c80 <__errno>:
 8001c80:	4b01      	ldr	r3, [pc, #4]	@ (8001c88 <__errno+0x8>)
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	2000000c 	.word	0x2000000c

08001c8c <__libc_init_array>:
 8001c8c:	b570      	push	{r4, r5, r6, lr}
 8001c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8001cc4 <__libc_init_array+0x38>)
 8001c90:	4c0d      	ldr	r4, [pc, #52]	@ (8001cc8 <__libc_init_array+0x3c>)
 8001c92:	1b64      	subs	r4, r4, r5
 8001c94:	10a4      	asrs	r4, r4, #2
 8001c96:	2600      	movs	r6, #0
 8001c98:	42a6      	cmp	r6, r4
 8001c9a:	d109      	bne.n	8001cb0 <__libc_init_array+0x24>
 8001c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8001ccc <__libc_init_array+0x40>)
 8001c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8001cd0 <__libc_init_array+0x44>)
 8001ca0:	f000 fc66 	bl	8002570 <_init>
 8001ca4:	1b64      	subs	r4, r4, r5
 8001ca6:	10a4      	asrs	r4, r4, #2
 8001ca8:	2600      	movs	r6, #0
 8001caa:	42a6      	cmp	r6, r4
 8001cac:	d105      	bne.n	8001cba <__libc_init_array+0x2e>
 8001cae:	bd70      	pop	{r4, r5, r6, pc}
 8001cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cb4:	4798      	blx	r3
 8001cb6:	3601      	adds	r6, #1
 8001cb8:	e7ee      	b.n	8001c98 <__libc_init_array+0xc>
 8001cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cbe:	4798      	blx	r3
 8001cc0:	3601      	adds	r6, #1
 8001cc2:	e7f2      	b.n	8001caa <__libc_init_array+0x1e>
 8001cc4:	080027e0 	.word	0x080027e0
 8001cc8:	080027e0 	.word	0x080027e0
 8001ccc:	080027e0 	.word	0x080027e0
 8001cd0:	080027e4 	.word	0x080027e4

08001cd4 <__retarget_lock_acquire_recursive>:
 8001cd4:	4770      	bx	lr

08001cd6 <__retarget_lock_release_recursive>:
 8001cd6:	4770      	bx	lr

08001cd8 <memcpy>:
 8001cd8:	440a      	add	r2, r1
 8001cda:	4291      	cmp	r1, r2
 8001cdc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001ce0:	d100      	bne.n	8001ce4 <memcpy+0xc>
 8001ce2:	4770      	bx	lr
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001cee:	4291      	cmp	r1, r2
 8001cf0:	d1f9      	bne.n	8001ce6 <memcpy+0xe>
 8001cf2:	bd10      	pop	{r4, pc}

08001cf4 <__ssputs_r>:
 8001cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cf8:	688e      	ldr	r6, [r1, #8]
 8001cfa:	461f      	mov	r7, r3
 8001cfc:	42be      	cmp	r6, r7
 8001cfe:	680b      	ldr	r3, [r1, #0]
 8001d00:	4682      	mov	sl, r0
 8001d02:	460c      	mov	r4, r1
 8001d04:	4690      	mov	r8, r2
 8001d06:	d82d      	bhi.n	8001d64 <__ssputs_r+0x70>
 8001d08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001d10:	d026      	beq.n	8001d60 <__ssputs_r+0x6c>
 8001d12:	6965      	ldr	r5, [r4, #20]
 8001d14:	6909      	ldr	r1, [r1, #16]
 8001d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001d1a:	eba3 0901 	sub.w	r9, r3, r1
 8001d1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001d22:	1c7b      	adds	r3, r7, #1
 8001d24:	444b      	add	r3, r9
 8001d26:	106d      	asrs	r5, r5, #1
 8001d28:	429d      	cmp	r5, r3
 8001d2a:	bf38      	it	cc
 8001d2c:	461d      	movcc	r5, r3
 8001d2e:	0553      	lsls	r3, r2, #21
 8001d30:	d527      	bpl.n	8001d82 <__ssputs_r+0x8e>
 8001d32:	4629      	mov	r1, r5
 8001d34:	f000 f958 	bl	8001fe8 <_malloc_r>
 8001d38:	4606      	mov	r6, r0
 8001d3a:	b360      	cbz	r0, 8001d96 <__ssputs_r+0xa2>
 8001d3c:	6921      	ldr	r1, [r4, #16]
 8001d3e:	464a      	mov	r2, r9
 8001d40:	f7ff ffca 	bl	8001cd8 <memcpy>
 8001d44:	89a3      	ldrh	r3, [r4, #12]
 8001d46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d4e:	81a3      	strh	r3, [r4, #12]
 8001d50:	6126      	str	r6, [r4, #16]
 8001d52:	6165      	str	r5, [r4, #20]
 8001d54:	444e      	add	r6, r9
 8001d56:	eba5 0509 	sub.w	r5, r5, r9
 8001d5a:	6026      	str	r6, [r4, #0]
 8001d5c:	60a5      	str	r5, [r4, #8]
 8001d5e:	463e      	mov	r6, r7
 8001d60:	42be      	cmp	r6, r7
 8001d62:	d900      	bls.n	8001d66 <__ssputs_r+0x72>
 8001d64:	463e      	mov	r6, r7
 8001d66:	6820      	ldr	r0, [r4, #0]
 8001d68:	4632      	mov	r2, r6
 8001d6a:	4641      	mov	r1, r8
 8001d6c:	f000 fb84 	bl	8002478 <memmove>
 8001d70:	68a3      	ldr	r3, [r4, #8]
 8001d72:	1b9b      	subs	r3, r3, r6
 8001d74:	60a3      	str	r3, [r4, #8]
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	4433      	add	r3, r6
 8001d7a:	6023      	str	r3, [r4, #0]
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d82:	462a      	mov	r2, r5
 8001d84:	f000 fb4a 	bl	800241c <_realloc_r>
 8001d88:	4606      	mov	r6, r0
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d1e0      	bne.n	8001d50 <__ssputs_r+0x5c>
 8001d8e:	6921      	ldr	r1, [r4, #16]
 8001d90:	4650      	mov	r0, sl
 8001d92:	f000 fb9b 	bl	80024cc <_free_r>
 8001d96:	230c      	movs	r3, #12
 8001d98:	f8ca 3000 	str.w	r3, [sl]
 8001d9c:	89a3      	ldrh	r3, [r4, #12]
 8001d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001da2:	81a3      	strh	r3, [r4, #12]
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001da8:	e7e9      	b.n	8001d7e <__ssputs_r+0x8a>
	...

08001dac <_svfiprintf_r>:
 8001dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db0:	4698      	mov	r8, r3
 8001db2:	898b      	ldrh	r3, [r1, #12]
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	b09d      	sub	sp, #116	@ 0x74
 8001db8:	4607      	mov	r7, r0
 8001dba:	460d      	mov	r5, r1
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	d510      	bpl.n	8001de2 <_svfiprintf_r+0x36>
 8001dc0:	690b      	ldr	r3, [r1, #16]
 8001dc2:	b973      	cbnz	r3, 8001de2 <_svfiprintf_r+0x36>
 8001dc4:	2140      	movs	r1, #64	@ 0x40
 8001dc6:	f000 f90f 	bl	8001fe8 <_malloc_r>
 8001dca:	6028      	str	r0, [r5, #0]
 8001dcc:	6128      	str	r0, [r5, #16]
 8001dce:	b930      	cbnz	r0, 8001dde <_svfiprintf_r+0x32>
 8001dd0:	230c      	movs	r3, #12
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dd8:	b01d      	add	sp, #116	@ 0x74
 8001dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dde:	2340      	movs	r3, #64	@ 0x40
 8001de0:	616b      	str	r3, [r5, #20]
 8001de2:	2300      	movs	r3, #0
 8001de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8001de6:	2320      	movs	r3, #32
 8001de8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8001df0:	2330      	movs	r3, #48	@ 0x30
 8001df2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001f90 <_svfiprintf_r+0x1e4>
 8001df6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001dfa:	f04f 0901 	mov.w	r9, #1
 8001dfe:	4623      	mov	r3, r4
 8001e00:	469a      	mov	sl, r3
 8001e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e06:	b10a      	cbz	r2, 8001e0c <_svfiprintf_r+0x60>
 8001e08:	2a25      	cmp	r2, #37	@ 0x25
 8001e0a:	d1f9      	bne.n	8001e00 <_svfiprintf_r+0x54>
 8001e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8001e10:	d00b      	beq.n	8001e2a <_svfiprintf_r+0x7e>
 8001e12:	465b      	mov	r3, fp
 8001e14:	4622      	mov	r2, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	4638      	mov	r0, r7
 8001e1a:	f7ff ff6b 	bl	8001cf4 <__ssputs_r>
 8001e1e:	3001      	adds	r0, #1
 8001e20:	f000 80a7 	beq.w	8001f72 <_svfiprintf_r+0x1c6>
 8001e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001e26:	445a      	add	r2, fp
 8001e28:	9209      	str	r2, [sp, #36]	@ 0x24
 8001e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 809f 	beq.w	8001f72 <_svfiprintf_r+0x1c6>
 8001e34:	2300      	movs	r3, #0
 8001e36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e3e:	f10a 0a01 	add.w	sl, sl, #1
 8001e42:	9304      	str	r3, [sp, #16]
 8001e44:	9307      	str	r3, [sp, #28]
 8001e46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8001e4c:	4654      	mov	r4, sl
 8001e4e:	2205      	movs	r2, #5
 8001e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e54:	484e      	ldr	r0, [pc, #312]	@ (8001f90 <_svfiprintf_r+0x1e4>)
 8001e56:	f7fe f9cb 	bl	80001f0 <memchr>
 8001e5a:	9a04      	ldr	r2, [sp, #16]
 8001e5c:	b9d8      	cbnz	r0, 8001e96 <_svfiprintf_r+0xea>
 8001e5e:	06d0      	lsls	r0, r2, #27
 8001e60:	bf44      	itt	mi
 8001e62:	2320      	movmi	r3, #32
 8001e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e68:	0711      	lsls	r1, r2, #28
 8001e6a:	bf44      	itt	mi
 8001e6c:	232b      	movmi	r3, #43	@ 0x2b
 8001e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e72:	f89a 3000 	ldrb.w	r3, [sl]
 8001e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e78:	d015      	beq.n	8001ea6 <_svfiprintf_r+0xfa>
 8001e7a:	9a07      	ldr	r2, [sp, #28]
 8001e7c:	4654      	mov	r4, sl
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f04f 0c0a 	mov.w	ip, #10
 8001e84:	4621      	mov	r1, r4
 8001e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e8a:	3b30      	subs	r3, #48	@ 0x30
 8001e8c:	2b09      	cmp	r3, #9
 8001e8e:	d94b      	bls.n	8001f28 <_svfiprintf_r+0x17c>
 8001e90:	b1b0      	cbz	r0, 8001ec0 <_svfiprintf_r+0x114>
 8001e92:	9207      	str	r2, [sp, #28]
 8001e94:	e014      	b.n	8001ec0 <_svfiprintf_r+0x114>
 8001e96:	eba0 0308 	sub.w	r3, r0, r8
 8001e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	9304      	str	r3, [sp, #16]
 8001ea2:	46a2      	mov	sl, r4
 8001ea4:	e7d2      	b.n	8001e4c <_svfiprintf_r+0xa0>
 8001ea6:	9b03      	ldr	r3, [sp, #12]
 8001ea8:	1d19      	adds	r1, r3, #4
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	9103      	str	r1, [sp, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bfbb      	ittet	lt
 8001eb2:	425b      	neglt	r3, r3
 8001eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8001eb8:	9307      	strge	r3, [sp, #28]
 8001eba:	9307      	strlt	r3, [sp, #28]
 8001ebc:	bfb8      	it	lt
 8001ebe:	9204      	strlt	r2, [sp, #16]
 8001ec0:	7823      	ldrb	r3, [r4, #0]
 8001ec2:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ec4:	d10a      	bne.n	8001edc <_svfiprintf_r+0x130>
 8001ec6:	7863      	ldrb	r3, [r4, #1]
 8001ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8001eca:	d132      	bne.n	8001f32 <_svfiprintf_r+0x186>
 8001ecc:	9b03      	ldr	r3, [sp, #12]
 8001ece:	1d1a      	adds	r2, r3, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	9203      	str	r2, [sp, #12]
 8001ed4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001ed8:	3402      	adds	r4, #2
 8001eda:	9305      	str	r3, [sp, #20]
 8001edc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001fa0 <_svfiprintf_r+0x1f4>
 8001ee0:	7821      	ldrb	r1, [r4, #0]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	4650      	mov	r0, sl
 8001ee6:	f7fe f983 	bl	80001f0 <memchr>
 8001eea:	b138      	cbz	r0, 8001efc <_svfiprintf_r+0x150>
 8001eec:	9b04      	ldr	r3, [sp, #16]
 8001eee:	eba0 000a 	sub.w	r0, r0, sl
 8001ef2:	2240      	movs	r2, #64	@ 0x40
 8001ef4:	4082      	lsls	r2, r0
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	3401      	adds	r4, #1
 8001efa:	9304      	str	r3, [sp, #16]
 8001efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f00:	4824      	ldr	r0, [pc, #144]	@ (8001f94 <_svfiprintf_r+0x1e8>)
 8001f02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001f06:	2206      	movs	r2, #6
 8001f08:	f7fe f972 	bl	80001f0 <memchr>
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	d036      	beq.n	8001f7e <_svfiprintf_r+0x1d2>
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <_svfiprintf_r+0x1ec>)
 8001f12:	bb1b      	cbnz	r3, 8001f5c <_svfiprintf_r+0x1b0>
 8001f14:	9b03      	ldr	r3, [sp, #12]
 8001f16:	3307      	adds	r3, #7
 8001f18:	f023 0307 	bic.w	r3, r3, #7
 8001f1c:	3308      	adds	r3, #8
 8001f1e:	9303      	str	r3, [sp, #12]
 8001f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f22:	4433      	add	r3, r6
 8001f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f26:	e76a      	b.n	8001dfe <_svfiprintf_r+0x52>
 8001f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f2c:	460c      	mov	r4, r1
 8001f2e:	2001      	movs	r0, #1
 8001f30:	e7a8      	b.n	8001e84 <_svfiprintf_r+0xd8>
 8001f32:	2300      	movs	r3, #0
 8001f34:	3401      	adds	r4, #1
 8001f36:	9305      	str	r3, [sp, #20]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f04f 0c0a 	mov.w	ip, #10
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f44:	3a30      	subs	r2, #48	@ 0x30
 8001f46:	2a09      	cmp	r2, #9
 8001f48:	d903      	bls.n	8001f52 <_svfiprintf_r+0x1a6>
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0c6      	beq.n	8001edc <_svfiprintf_r+0x130>
 8001f4e:	9105      	str	r1, [sp, #20]
 8001f50:	e7c4      	b.n	8001edc <_svfiprintf_r+0x130>
 8001f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f56:	4604      	mov	r4, r0
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e7f0      	b.n	8001f3e <_svfiprintf_r+0x192>
 8001f5c:	ab03      	add	r3, sp, #12
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	462a      	mov	r2, r5
 8001f62:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <_svfiprintf_r+0x1f0>)
 8001f64:	a904      	add	r1, sp, #16
 8001f66:	4638      	mov	r0, r7
 8001f68:	f3af 8000 	nop.w
 8001f6c:	1c42      	adds	r2, r0, #1
 8001f6e:	4606      	mov	r6, r0
 8001f70:	d1d6      	bne.n	8001f20 <_svfiprintf_r+0x174>
 8001f72:	89ab      	ldrh	r3, [r5, #12]
 8001f74:	065b      	lsls	r3, r3, #25
 8001f76:	f53f af2d 	bmi.w	8001dd4 <_svfiprintf_r+0x28>
 8001f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001f7c:	e72c      	b.n	8001dd8 <_svfiprintf_r+0x2c>
 8001f7e:	ab03      	add	r3, sp, #12
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	462a      	mov	r2, r5
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <_svfiprintf_r+0x1f0>)
 8001f86:	a904      	add	r1, sp, #16
 8001f88:	4638      	mov	r0, r7
 8001f8a:	f000 f91b 	bl	80021c4 <_printf_i>
 8001f8e:	e7ed      	b.n	8001f6c <_svfiprintf_r+0x1c0>
 8001f90:	080027a4 	.word	0x080027a4
 8001f94:	080027ae 	.word	0x080027ae
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	08001cf5 	.word	0x08001cf5
 8001fa0:	080027aa 	.word	0x080027aa

08001fa4 <sbrk_aligned>:
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	4e0f      	ldr	r6, [pc, #60]	@ (8001fe4 <sbrk_aligned+0x40>)
 8001fa8:	460c      	mov	r4, r1
 8001faa:	6831      	ldr	r1, [r6, #0]
 8001fac:	4605      	mov	r5, r0
 8001fae:	b911      	cbnz	r1, 8001fb6 <sbrk_aligned+0x12>
 8001fb0:	f000 fa7c 	bl	80024ac <_sbrk_r>
 8001fb4:	6030      	str	r0, [r6, #0]
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f000 fa77 	bl	80024ac <_sbrk_r>
 8001fbe:	1c43      	adds	r3, r0, #1
 8001fc0:	d103      	bne.n	8001fca <sbrk_aligned+0x26>
 8001fc2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	bd70      	pop	{r4, r5, r6, pc}
 8001fca:	1cc4      	adds	r4, r0, #3
 8001fcc:	f024 0403 	bic.w	r4, r4, #3
 8001fd0:	42a0      	cmp	r0, r4
 8001fd2:	d0f8      	beq.n	8001fc6 <sbrk_aligned+0x22>
 8001fd4:	1a21      	subs	r1, r4, r0
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f000 fa68 	bl	80024ac <_sbrk_r>
 8001fdc:	3001      	adds	r0, #1
 8001fde:	d1f2      	bne.n	8001fc6 <sbrk_aligned+0x22>
 8001fe0:	e7ef      	b.n	8001fc2 <sbrk_aligned+0x1e>
 8001fe2:	bf00      	nop
 8001fe4:	200001c0 	.word	0x200001c0

08001fe8 <_malloc_r>:
 8001fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fec:	1ccd      	adds	r5, r1, #3
 8001fee:	f025 0503 	bic.w	r5, r5, #3
 8001ff2:	3508      	adds	r5, #8
 8001ff4:	2d0c      	cmp	r5, #12
 8001ff6:	bf38      	it	cc
 8001ff8:	250c      	movcc	r5, #12
 8001ffa:	2d00      	cmp	r5, #0
 8001ffc:	4606      	mov	r6, r0
 8001ffe:	db01      	blt.n	8002004 <_malloc_r+0x1c>
 8002000:	42a9      	cmp	r1, r5
 8002002:	d904      	bls.n	800200e <_malloc_r+0x26>
 8002004:	230c      	movs	r3, #12
 8002006:	6033      	str	r3, [r6, #0]
 8002008:	2000      	movs	r0, #0
 800200a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800200e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80020e4 <_malloc_r+0xfc>
 8002012:	f000 f9f7 	bl	8002404 <__malloc_lock>
 8002016:	f8d8 3000 	ldr.w	r3, [r8]
 800201a:	461c      	mov	r4, r3
 800201c:	bb44      	cbnz	r4, 8002070 <_malloc_r+0x88>
 800201e:	4629      	mov	r1, r5
 8002020:	4630      	mov	r0, r6
 8002022:	f7ff ffbf 	bl	8001fa4 <sbrk_aligned>
 8002026:	1c43      	adds	r3, r0, #1
 8002028:	4604      	mov	r4, r0
 800202a:	d158      	bne.n	80020de <_malloc_r+0xf6>
 800202c:	f8d8 4000 	ldr.w	r4, [r8]
 8002030:	4627      	mov	r7, r4
 8002032:	2f00      	cmp	r7, #0
 8002034:	d143      	bne.n	80020be <_malloc_r+0xd6>
 8002036:	2c00      	cmp	r4, #0
 8002038:	d04b      	beq.n	80020d2 <_malloc_r+0xea>
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	4639      	mov	r1, r7
 800203e:	4630      	mov	r0, r6
 8002040:	eb04 0903 	add.w	r9, r4, r3
 8002044:	f000 fa32 	bl	80024ac <_sbrk_r>
 8002048:	4581      	cmp	r9, r0
 800204a:	d142      	bne.n	80020d2 <_malloc_r+0xea>
 800204c:	6821      	ldr	r1, [r4, #0]
 800204e:	1a6d      	subs	r5, r5, r1
 8002050:	4629      	mov	r1, r5
 8002052:	4630      	mov	r0, r6
 8002054:	f7ff ffa6 	bl	8001fa4 <sbrk_aligned>
 8002058:	3001      	adds	r0, #1
 800205a:	d03a      	beq.n	80020d2 <_malloc_r+0xea>
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	442b      	add	r3, r5
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	f8d8 3000 	ldr.w	r3, [r8]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	bb62      	cbnz	r2, 80020c4 <_malloc_r+0xdc>
 800206a:	f8c8 7000 	str.w	r7, [r8]
 800206e:	e00f      	b.n	8002090 <_malloc_r+0xa8>
 8002070:	6822      	ldr	r2, [r4, #0]
 8002072:	1b52      	subs	r2, r2, r5
 8002074:	d420      	bmi.n	80020b8 <_malloc_r+0xd0>
 8002076:	2a0b      	cmp	r2, #11
 8002078:	d917      	bls.n	80020aa <_malloc_r+0xc2>
 800207a:	1961      	adds	r1, r4, r5
 800207c:	42a3      	cmp	r3, r4
 800207e:	6025      	str	r5, [r4, #0]
 8002080:	bf18      	it	ne
 8002082:	6059      	strne	r1, [r3, #4]
 8002084:	6863      	ldr	r3, [r4, #4]
 8002086:	bf08      	it	eq
 8002088:	f8c8 1000 	streq.w	r1, [r8]
 800208c:	5162      	str	r2, [r4, r5]
 800208e:	604b      	str	r3, [r1, #4]
 8002090:	4630      	mov	r0, r6
 8002092:	f000 f9bd 	bl	8002410 <__malloc_unlock>
 8002096:	f104 000b 	add.w	r0, r4, #11
 800209a:	1d23      	adds	r3, r4, #4
 800209c:	f020 0007 	bic.w	r0, r0, #7
 80020a0:	1ac2      	subs	r2, r0, r3
 80020a2:	bf1c      	itt	ne
 80020a4:	1a1b      	subne	r3, r3, r0
 80020a6:	50a3      	strne	r3, [r4, r2]
 80020a8:	e7af      	b.n	800200a <_malloc_r+0x22>
 80020aa:	6862      	ldr	r2, [r4, #4]
 80020ac:	42a3      	cmp	r3, r4
 80020ae:	bf0c      	ite	eq
 80020b0:	f8c8 2000 	streq.w	r2, [r8]
 80020b4:	605a      	strne	r2, [r3, #4]
 80020b6:	e7eb      	b.n	8002090 <_malloc_r+0xa8>
 80020b8:	4623      	mov	r3, r4
 80020ba:	6864      	ldr	r4, [r4, #4]
 80020bc:	e7ae      	b.n	800201c <_malloc_r+0x34>
 80020be:	463c      	mov	r4, r7
 80020c0:	687f      	ldr	r7, [r7, #4]
 80020c2:	e7b6      	b.n	8002032 <_malloc_r+0x4a>
 80020c4:	461a      	mov	r2, r3
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	42a3      	cmp	r3, r4
 80020ca:	d1fb      	bne.n	80020c4 <_malloc_r+0xdc>
 80020cc:	2300      	movs	r3, #0
 80020ce:	6053      	str	r3, [r2, #4]
 80020d0:	e7de      	b.n	8002090 <_malloc_r+0xa8>
 80020d2:	230c      	movs	r3, #12
 80020d4:	6033      	str	r3, [r6, #0]
 80020d6:	4630      	mov	r0, r6
 80020d8:	f000 f99a 	bl	8002410 <__malloc_unlock>
 80020dc:	e794      	b.n	8002008 <_malloc_r+0x20>
 80020de:	6005      	str	r5, [r0, #0]
 80020e0:	e7d6      	b.n	8002090 <_malloc_r+0xa8>
 80020e2:	bf00      	nop
 80020e4:	200001c4 	.word	0x200001c4

080020e8 <_printf_common>:
 80020e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020ec:	4616      	mov	r6, r2
 80020ee:	4698      	mov	r8, r3
 80020f0:	688a      	ldr	r2, [r1, #8]
 80020f2:	690b      	ldr	r3, [r1, #16]
 80020f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	bfb8      	it	lt
 80020fc:	4613      	movlt	r3, r2
 80020fe:	6033      	str	r3, [r6, #0]
 8002100:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002104:	4607      	mov	r7, r0
 8002106:	460c      	mov	r4, r1
 8002108:	b10a      	cbz	r2, 800210e <_printf_common+0x26>
 800210a:	3301      	adds	r3, #1
 800210c:	6033      	str	r3, [r6, #0]
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	0699      	lsls	r1, r3, #26
 8002112:	bf42      	ittt	mi
 8002114:	6833      	ldrmi	r3, [r6, #0]
 8002116:	3302      	addmi	r3, #2
 8002118:	6033      	strmi	r3, [r6, #0]
 800211a:	6825      	ldr	r5, [r4, #0]
 800211c:	f015 0506 	ands.w	r5, r5, #6
 8002120:	d106      	bne.n	8002130 <_printf_common+0x48>
 8002122:	f104 0a19 	add.w	sl, r4, #25
 8002126:	68e3      	ldr	r3, [r4, #12]
 8002128:	6832      	ldr	r2, [r6, #0]
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	42ab      	cmp	r3, r5
 800212e:	dc26      	bgt.n	800217e <_printf_common+0x96>
 8002130:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002134:	6822      	ldr	r2, [r4, #0]
 8002136:	3b00      	subs	r3, #0
 8002138:	bf18      	it	ne
 800213a:	2301      	movne	r3, #1
 800213c:	0692      	lsls	r2, r2, #26
 800213e:	d42b      	bmi.n	8002198 <_printf_common+0xb0>
 8002140:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002144:	4641      	mov	r1, r8
 8002146:	4638      	mov	r0, r7
 8002148:	47c8      	blx	r9
 800214a:	3001      	adds	r0, #1
 800214c:	d01e      	beq.n	800218c <_printf_common+0xa4>
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	6922      	ldr	r2, [r4, #16]
 8002152:	f003 0306 	and.w	r3, r3, #6
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf02      	ittt	eq
 800215a:	68e5      	ldreq	r5, [r4, #12]
 800215c:	6833      	ldreq	r3, [r6, #0]
 800215e:	1aed      	subeq	r5, r5, r3
 8002160:	68a3      	ldr	r3, [r4, #8]
 8002162:	bf0c      	ite	eq
 8002164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002168:	2500      	movne	r5, #0
 800216a:	4293      	cmp	r3, r2
 800216c:	bfc4      	itt	gt
 800216e:	1a9b      	subgt	r3, r3, r2
 8002170:	18ed      	addgt	r5, r5, r3
 8002172:	2600      	movs	r6, #0
 8002174:	341a      	adds	r4, #26
 8002176:	42b5      	cmp	r5, r6
 8002178:	d11a      	bne.n	80021b0 <_printf_common+0xc8>
 800217a:	2000      	movs	r0, #0
 800217c:	e008      	b.n	8002190 <_printf_common+0xa8>
 800217e:	2301      	movs	r3, #1
 8002180:	4652      	mov	r2, sl
 8002182:	4641      	mov	r1, r8
 8002184:	4638      	mov	r0, r7
 8002186:	47c8      	blx	r9
 8002188:	3001      	adds	r0, #1
 800218a:	d103      	bne.n	8002194 <_printf_common+0xac>
 800218c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002194:	3501      	adds	r5, #1
 8002196:	e7c6      	b.n	8002126 <_printf_common+0x3e>
 8002198:	18e1      	adds	r1, r4, r3
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	2030      	movs	r0, #48	@ 0x30
 800219e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80021a2:	4422      	add	r2, r4
 80021a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80021a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80021ac:	3302      	adds	r3, #2
 80021ae:	e7c7      	b.n	8002140 <_printf_common+0x58>
 80021b0:	2301      	movs	r3, #1
 80021b2:	4622      	mov	r2, r4
 80021b4:	4641      	mov	r1, r8
 80021b6:	4638      	mov	r0, r7
 80021b8:	47c8      	blx	r9
 80021ba:	3001      	adds	r0, #1
 80021bc:	d0e6      	beq.n	800218c <_printf_common+0xa4>
 80021be:	3601      	adds	r6, #1
 80021c0:	e7d9      	b.n	8002176 <_printf_common+0x8e>
	...

080021c4 <_printf_i>:
 80021c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021c8:	7e0f      	ldrb	r7, [r1, #24]
 80021ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80021cc:	2f78      	cmp	r7, #120	@ 0x78
 80021ce:	4691      	mov	r9, r2
 80021d0:	4680      	mov	r8, r0
 80021d2:	460c      	mov	r4, r1
 80021d4:	469a      	mov	sl, r3
 80021d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80021da:	d807      	bhi.n	80021ec <_printf_i+0x28>
 80021dc:	2f62      	cmp	r7, #98	@ 0x62
 80021de:	d80a      	bhi.n	80021f6 <_printf_i+0x32>
 80021e0:	2f00      	cmp	r7, #0
 80021e2:	f000 80d2 	beq.w	800238a <_printf_i+0x1c6>
 80021e6:	2f58      	cmp	r7, #88	@ 0x58
 80021e8:	f000 80b9 	beq.w	800235e <_printf_i+0x19a>
 80021ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80021f4:	e03a      	b.n	800226c <_printf_i+0xa8>
 80021f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80021fa:	2b15      	cmp	r3, #21
 80021fc:	d8f6      	bhi.n	80021ec <_printf_i+0x28>
 80021fe:	a101      	add	r1, pc, #4	@ (adr r1, 8002204 <_printf_i+0x40>)
 8002200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002204:	0800225d 	.word	0x0800225d
 8002208:	08002271 	.word	0x08002271
 800220c:	080021ed 	.word	0x080021ed
 8002210:	080021ed 	.word	0x080021ed
 8002214:	080021ed 	.word	0x080021ed
 8002218:	080021ed 	.word	0x080021ed
 800221c:	08002271 	.word	0x08002271
 8002220:	080021ed 	.word	0x080021ed
 8002224:	080021ed 	.word	0x080021ed
 8002228:	080021ed 	.word	0x080021ed
 800222c:	080021ed 	.word	0x080021ed
 8002230:	08002371 	.word	0x08002371
 8002234:	0800229b 	.word	0x0800229b
 8002238:	0800232b 	.word	0x0800232b
 800223c:	080021ed 	.word	0x080021ed
 8002240:	080021ed 	.word	0x080021ed
 8002244:	08002393 	.word	0x08002393
 8002248:	080021ed 	.word	0x080021ed
 800224c:	0800229b 	.word	0x0800229b
 8002250:	080021ed 	.word	0x080021ed
 8002254:	080021ed 	.word	0x080021ed
 8002258:	08002333 	.word	0x08002333
 800225c:	6833      	ldr	r3, [r6, #0]
 800225e:	1d1a      	adds	r2, r3, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6032      	str	r2, [r6, #0]
 8002264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002268:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800226c:	2301      	movs	r3, #1
 800226e:	e09d      	b.n	80023ac <_printf_i+0x1e8>
 8002270:	6833      	ldr	r3, [r6, #0]
 8002272:	6820      	ldr	r0, [r4, #0]
 8002274:	1d19      	adds	r1, r3, #4
 8002276:	6031      	str	r1, [r6, #0]
 8002278:	0606      	lsls	r6, r0, #24
 800227a:	d501      	bpl.n	8002280 <_printf_i+0xbc>
 800227c:	681d      	ldr	r5, [r3, #0]
 800227e:	e003      	b.n	8002288 <_printf_i+0xc4>
 8002280:	0645      	lsls	r5, r0, #25
 8002282:	d5fb      	bpl.n	800227c <_printf_i+0xb8>
 8002284:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002288:	2d00      	cmp	r5, #0
 800228a:	da03      	bge.n	8002294 <_printf_i+0xd0>
 800228c:	232d      	movs	r3, #45	@ 0x2d
 800228e:	426d      	negs	r5, r5
 8002290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002294:	4859      	ldr	r0, [pc, #356]	@ (80023fc <_printf_i+0x238>)
 8002296:	230a      	movs	r3, #10
 8002298:	e011      	b.n	80022be <_printf_i+0xfa>
 800229a:	6821      	ldr	r1, [r4, #0]
 800229c:	6833      	ldr	r3, [r6, #0]
 800229e:	0608      	lsls	r0, r1, #24
 80022a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80022a4:	d402      	bmi.n	80022ac <_printf_i+0xe8>
 80022a6:	0649      	lsls	r1, r1, #25
 80022a8:	bf48      	it	mi
 80022aa:	b2ad      	uxthmi	r5, r5
 80022ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80022ae:	4853      	ldr	r0, [pc, #332]	@ (80023fc <_printf_i+0x238>)
 80022b0:	6033      	str	r3, [r6, #0]
 80022b2:	bf14      	ite	ne
 80022b4:	230a      	movne	r3, #10
 80022b6:	2308      	moveq	r3, #8
 80022b8:	2100      	movs	r1, #0
 80022ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80022be:	6866      	ldr	r6, [r4, #4]
 80022c0:	60a6      	str	r6, [r4, #8]
 80022c2:	2e00      	cmp	r6, #0
 80022c4:	bfa2      	ittt	ge
 80022c6:	6821      	ldrge	r1, [r4, #0]
 80022c8:	f021 0104 	bicge.w	r1, r1, #4
 80022cc:	6021      	strge	r1, [r4, #0]
 80022ce:	b90d      	cbnz	r5, 80022d4 <_printf_i+0x110>
 80022d0:	2e00      	cmp	r6, #0
 80022d2:	d04b      	beq.n	800236c <_printf_i+0x1a8>
 80022d4:	4616      	mov	r6, r2
 80022d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80022da:	fb03 5711 	mls	r7, r3, r1, r5
 80022de:	5dc7      	ldrb	r7, [r0, r7]
 80022e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022e4:	462f      	mov	r7, r5
 80022e6:	42bb      	cmp	r3, r7
 80022e8:	460d      	mov	r5, r1
 80022ea:	d9f4      	bls.n	80022d6 <_printf_i+0x112>
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d10b      	bne.n	8002308 <_printf_i+0x144>
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	07df      	lsls	r7, r3, #31
 80022f4:	d508      	bpl.n	8002308 <_printf_i+0x144>
 80022f6:	6923      	ldr	r3, [r4, #16]
 80022f8:	6861      	ldr	r1, [r4, #4]
 80022fa:	4299      	cmp	r1, r3
 80022fc:	bfde      	ittt	le
 80022fe:	2330      	movle	r3, #48	@ 0x30
 8002300:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002304:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002308:	1b92      	subs	r2, r2, r6
 800230a:	6122      	str	r2, [r4, #16]
 800230c:	f8cd a000 	str.w	sl, [sp]
 8002310:	464b      	mov	r3, r9
 8002312:	aa03      	add	r2, sp, #12
 8002314:	4621      	mov	r1, r4
 8002316:	4640      	mov	r0, r8
 8002318:	f7ff fee6 	bl	80020e8 <_printf_common>
 800231c:	3001      	adds	r0, #1
 800231e:	d14a      	bne.n	80023b6 <_printf_i+0x1f2>
 8002320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002324:	b004      	add	sp, #16
 8002326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	f043 0320 	orr.w	r3, r3, #32
 8002330:	6023      	str	r3, [r4, #0]
 8002332:	4833      	ldr	r0, [pc, #204]	@ (8002400 <_printf_i+0x23c>)
 8002334:	2778      	movs	r7, #120	@ 0x78
 8002336:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	6831      	ldr	r1, [r6, #0]
 800233e:	061f      	lsls	r7, r3, #24
 8002340:	f851 5b04 	ldr.w	r5, [r1], #4
 8002344:	d402      	bmi.n	800234c <_printf_i+0x188>
 8002346:	065f      	lsls	r7, r3, #25
 8002348:	bf48      	it	mi
 800234a:	b2ad      	uxthmi	r5, r5
 800234c:	6031      	str	r1, [r6, #0]
 800234e:	07d9      	lsls	r1, r3, #31
 8002350:	bf44      	itt	mi
 8002352:	f043 0320 	orrmi.w	r3, r3, #32
 8002356:	6023      	strmi	r3, [r4, #0]
 8002358:	b11d      	cbz	r5, 8002362 <_printf_i+0x19e>
 800235a:	2310      	movs	r3, #16
 800235c:	e7ac      	b.n	80022b8 <_printf_i+0xf4>
 800235e:	4827      	ldr	r0, [pc, #156]	@ (80023fc <_printf_i+0x238>)
 8002360:	e7e9      	b.n	8002336 <_printf_i+0x172>
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	f023 0320 	bic.w	r3, r3, #32
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	e7f6      	b.n	800235a <_printf_i+0x196>
 800236c:	4616      	mov	r6, r2
 800236e:	e7bd      	b.n	80022ec <_printf_i+0x128>
 8002370:	6833      	ldr	r3, [r6, #0]
 8002372:	6825      	ldr	r5, [r4, #0]
 8002374:	6961      	ldr	r1, [r4, #20]
 8002376:	1d18      	adds	r0, r3, #4
 8002378:	6030      	str	r0, [r6, #0]
 800237a:	062e      	lsls	r6, r5, #24
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	d501      	bpl.n	8002384 <_printf_i+0x1c0>
 8002380:	6019      	str	r1, [r3, #0]
 8002382:	e002      	b.n	800238a <_printf_i+0x1c6>
 8002384:	0668      	lsls	r0, r5, #25
 8002386:	d5fb      	bpl.n	8002380 <_printf_i+0x1bc>
 8002388:	8019      	strh	r1, [r3, #0]
 800238a:	2300      	movs	r3, #0
 800238c:	6123      	str	r3, [r4, #16]
 800238e:	4616      	mov	r6, r2
 8002390:	e7bc      	b.n	800230c <_printf_i+0x148>
 8002392:	6833      	ldr	r3, [r6, #0]
 8002394:	1d1a      	adds	r2, r3, #4
 8002396:	6032      	str	r2, [r6, #0]
 8002398:	681e      	ldr	r6, [r3, #0]
 800239a:	6862      	ldr	r2, [r4, #4]
 800239c:	2100      	movs	r1, #0
 800239e:	4630      	mov	r0, r6
 80023a0:	f7fd ff26 	bl	80001f0 <memchr>
 80023a4:	b108      	cbz	r0, 80023aa <_printf_i+0x1e6>
 80023a6:	1b80      	subs	r0, r0, r6
 80023a8:	6060      	str	r0, [r4, #4]
 80023aa:	6863      	ldr	r3, [r4, #4]
 80023ac:	6123      	str	r3, [r4, #16]
 80023ae:	2300      	movs	r3, #0
 80023b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023b4:	e7aa      	b.n	800230c <_printf_i+0x148>
 80023b6:	6923      	ldr	r3, [r4, #16]
 80023b8:	4632      	mov	r2, r6
 80023ba:	4649      	mov	r1, r9
 80023bc:	4640      	mov	r0, r8
 80023be:	47d0      	blx	sl
 80023c0:	3001      	adds	r0, #1
 80023c2:	d0ad      	beq.n	8002320 <_printf_i+0x15c>
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	079b      	lsls	r3, r3, #30
 80023c8:	d413      	bmi.n	80023f2 <_printf_i+0x22e>
 80023ca:	68e0      	ldr	r0, [r4, #12]
 80023cc:	9b03      	ldr	r3, [sp, #12]
 80023ce:	4298      	cmp	r0, r3
 80023d0:	bfb8      	it	lt
 80023d2:	4618      	movlt	r0, r3
 80023d4:	e7a6      	b.n	8002324 <_printf_i+0x160>
 80023d6:	2301      	movs	r3, #1
 80023d8:	4632      	mov	r2, r6
 80023da:	4649      	mov	r1, r9
 80023dc:	4640      	mov	r0, r8
 80023de:	47d0      	blx	sl
 80023e0:	3001      	adds	r0, #1
 80023e2:	d09d      	beq.n	8002320 <_printf_i+0x15c>
 80023e4:	3501      	adds	r5, #1
 80023e6:	68e3      	ldr	r3, [r4, #12]
 80023e8:	9903      	ldr	r1, [sp, #12]
 80023ea:	1a5b      	subs	r3, r3, r1
 80023ec:	42ab      	cmp	r3, r5
 80023ee:	dcf2      	bgt.n	80023d6 <_printf_i+0x212>
 80023f0:	e7eb      	b.n	80023ca <_printf_i+0x206>
 80023f2:	2500      	movs	r5, #0
 80023f4:	f104 0619 	add.w	r6, r4, #25
 80023f8:	e7f5      	b.n	80023e6 <_printf_i+0x222>
 80023fa:	bf00      	nop
 80023fc:	080027b5 	.word	0x080027b5
 8002400:	080027c6 	.word	0x080027c6

08002404 <__malloc_lock>:
 8002404:	4801      	ldr	r0, [pc, #4]	@ (800240c <__malloc_lock+0x8>)
 8002406:	f7ff bc65 	b.w	8001cd4 <__retarget_lock_acquire_recursive>
 800240a:	bf00      	nop
 800240c:	200001bc 	.word	0x200001bc

08002410 <__malloc_unlock>:
 8002410:	4801      	ldr	r0, [pc, #4]	@ (8002418 <__malloc_unlock+0x8>)
 8002412:	f7ff bc60 	b.w	8001cd6 <__retarget_lock_release_recursive>
 8002416:	bf00      	nop
 8002418:	200001bc 	.word	0x200001bc

0800241c <_realloc_r>:
 800241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002420:	4680      	mov	r8, r0
 8002422:	4615      	mov	r5, r2
 8002424:	460c      	mov	r4, r1
 8002426:	b921      	cbnz	r1, 8002432 <_realloc_r+0x16>
 8002428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800242c:	4611      	mov	r1, r2
 800242e:	f7ff bddb 	b.w	8001fe8 <_malloc_r>
 8002432:	b92a      	cbnz	r2, 8002440 <_realloc_r+0x24>
 8002434:	f000 f84a 	bl	80024cc <_free_r>
 8002438:	2400      	movs	r4, #0
 800243a:	4620      	mov	r0, r4
 800243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002440:	f000 f88e 	bl	8002560 <_malloc_usable_size_r>
 8002444:	4285      	cmp	r5, r0
 8002446:	4606      	mov	r6, r0
 8002448:	d802      	bhi.n	8002450 <_realloc_r+0x34>
 800244a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800244e:	d8f4      	bhi.n	800243a <_realloc_r+0x1e>
 8002450:	4629      	mov	r1, r5
 8002452:	4640      	mov	r0, r8
 8002454:	f7ff fdc8 	bl	8001fe8 <_malloc_r>
 8002458:	4607      	mov	r7, r0
 800245a:	2800      	cmp	r0, #0
 800245c:	d0ec      	beq.n	8002438 <_realloc_r+0x1c>
 800245e:	42b5      	cmp	r5, r6
 8002460:	462a      	mov	r2, r5
 8002462:	4621      	mov	r1, r4
 8002464:	bf28      	it	cs
 8002466:	4632      	movcs	r2, r6
 8002468:	f7ff fc36 	bl	8001cd8 <memcpy>
 800246c:	4621      	mov	r1, r4
 800246e:	4640      	mov	r0, r8
 8002470:	f000 f82c 	bl	80024cc <_free_r>
 8002474:	463c      	mov	r4, r7
 8002476:	e7e0      	b.n	800243a <_realloc_r+0x1e>

08002478 <memmove>:
 8002478:	4288      	cmp	r0, r1
 800247a:	b510      	push	{r4, lr}
 800247c:	eb01 0402 	add.w	r4, r1, r2
 8002480:	d902      	bls.n	8002488 <memmove+0x10>
 8002482:	4284      	cmp	r4, r0
 8002484:	4623      	mov	r3, r4
 8002486:	d807      	bhi.n	8002498 <memmove+0x20>
 8002488:	1e43      	subs	r3, r0, #1
 800248a:	42a1      	cmp	r1, r4
 800248c:	d008      	beq.n	80024a0 <memmove+0x28>
 800248e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002496:	e7f8      	b.n	800248a <memmove+0x12>
 8002498:	4402      	add	r2, r0
 800249a:	4601      	mov	r1, r0
 800249c:	428a      	cmp	r2, r1
 800249e:	d100      	bne.n	80024a2 <memmove+0x2a>
 80024a0:	bd10      	pop	{r4, pc}
 80024a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80024a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80024aa:	e7f7      	b.n	800249c <memmove+0x24>

080024ac <_sbrk_r>:
 80024ac:	b538      	push	{r3, r4, r5, lr}
 80024ae:	4d06      	ldr	r5, [pc, #24]	@ (80024c8 <_sbrk_r+0x1c>)
 80024b0:	2300      	movs	r3, #0
 80024b2:	4604      	mov	r4, r0
 80024b4:	4608      	mov	r0, r1
 80024b6:	602b      	str	r3, [r5, #0]
 80024b8:	f7fe fa14 	bl	80008e4 <_sbrk>
 80024bc:	1c43      	adds	r3, r0, #1
 80024be:	d102      	bne.n	80024c6 <_sbrk_r+0x1a>
 80024c0:	682b      	ldr	r3, [r5, #0]
 80024c2:	b103      	cbz	r3, 80024c6 <_sbrk_r+0x1a>
 80024c4:	6023      	str	r3, [r4, #0]
 80024c6:	bd38      	pop	{r3, r4, r5, pc}
 80024c8:	200001c8 	.word	0x200001c8

080024cc <_free_r>:
 80024cc:	b538      	push	{r3, r4, r5, lr}
 80024ce:	4605      	mov	r5, r0
 80024d0:	2900      	cmp	r1, #0
 80024d2:	d041      	beq.n	8002558 <_free_r+0x8c>
 80024d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024d8:	1f0c      	subs	r4, r1, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bfb8      	it	lt
 80024de:	18e4      	addlt	r4, r4, r3
 80024e0:	f7ff ff90 	bl	8002404 <__malloc_lock>
 80024e4:	4a1d      	ldr	r2, [pc, #116]	@ (800255c <_free_r+0x90>)
 80024e6:	6813      	ldr	r3, [r2, #0]
 80024e8:	b933      	cbnz	r3, 80024f8 <_free_r+0x2c>
 80024ea:	6063      	str	r3, [r4, #4]
 80024ec:	6014      	str	r4, [r2, #0]
 80024ee:	4628      	mov	r0, r5
 80024f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024f4:	f7ff bf8c 	b.w	8002410 <__malloc_unlock>
 80024f8:	42a3      	cmp	r3, r4
 80024fa:	d908      	bls.n	800250e <_free_r+0x42>
 80024fc:	6820      	ldr	r0, [r4, #0]
 80024fe:	1821      	adds	r1, r4, r0
 8002500:	428b      	cmp	r3, r1
 8002502:	bf01      	itttt	eq
 8002504:	6819      	ldreq	r1, [r3, #0]
 8002506:	685b      	ldreq	r3, [r3, #4]
 8002508:	1809      	addeq	r1, r1, r0
 800250a:	6021      	streq	r1, [r4, #0]
 800250c:	e7ed      	b.n	80024ea <_free_r+0x1e>
 800250e:	461a      	mov	r2, r3
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	b10b      	cbz	r3, 8002518 <_free_r+0x4c>
 8002514:	42a3      	cmp	r3, r4
 8002516:	d9fa      	bls.n	800250e <_free_r+0x42>
 8002518:	6811      	ldr	r1, [r2, #0]
 800251a:	1850      	adds	r0, r2, r1
 800251c:	42a0      	cmp	r0, r4
 800251e:	d10b      	bne.n	8002538 <_free_r+0x6c>
 8002520:	6820      	ldr	r0, [r4, #0]
 8002522:	4401      	add	r1, r0
 8002524:	1850      	adds	r0, r2, r1
 8002526:	4283      	cmp	r3, r0
 8002528:	6011      	str	r1, [r2, #0]
 800252a:	d1e0      	bne.n	80024ee <_free_r+0x22>
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	6053      	str	r3, [r2, #4]
 8002532:	4408      	add	r0, r1
 8002534:	6010      	str	r0, [r2, #0]
 8002536:	e7da      	b.n	80024ee <_free_r+0x22>
 8002538:	d902      	bls.n	8002540 <_free_r+0x74>
 800253a:	230c      	movs	r3, #12
 800253c:	602b      	str	r3, [r5, #0]
 800253e:	e7d6      	b.n	80024ee <_free_r+0x22>
 8002540:	6820      	ldr	r0, [r4, #0]
 8002542:	1821      	adds	r1, r4, r0
 8002544:	428b      	cmp	r3, r1
 8002546:	bf04      	itt	eq
 8002548:	6819      	ldreq	r1, [r3, #0]
 800254a:	685b      	ldreq	r3, [r3, #4]
 800254c:	6063      	str	r3, [r4, #4]
 800254e:	bf04      	itt	eq
 8002550:	1809      	addeq	r1, r1, r0
 8002552:	6021      	streq	r1, [r4, #0]
 8002554:	6054      	str	r4, [r2, #4]
 8002556:	e7ca      	b.n	80024ee <_free_r+0x22>
 8002558:	bd38      	pop	{r3, r4, r5, pc}
 800255a:	bf00      	nop
 800255c:	200001c4 	.word	0x200001c4

08002560 <_malloc_usable_size_r>:
 8002560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002564:	1f18      	subs	r0, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	bfbc      	itt	lt
 800256a:	580b      	ldrlt	r3, [r1, r0]
 800256c:	18c0      	addlt	r0, r0, r3
 800256e:	4770      	bx	lr

08002570 <_init>:
 8002570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002572:	bf00      	nop
 8002574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002576:	bc08      	pop	{r3}
 8002578:	469e      	mov	lr, r3
 800257a:	4770      	bx	lr

0800257c <_fini>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	bf00      	nop
 8002580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002582:	bc08      	pop	{r3}
 8002584:	469e      	mov	lr, r3
 8002586:	4770      	bx	lr
