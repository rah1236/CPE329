/*
 * i2c.c
 *
 *  Created on: May 19, 2024
 *      Author: raheel
 */
#include "i2c.h"

void I2C_init(void){
	/* USER configure GPIO pins for I2C alternate functions SCL and SDA */
	// Configure I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN); // GPIOB: SCL and SDA
	GPIOB->MODER &= ~( GPIO_MODER_MODE10 |
					   GPIO_MODER_MODE11 );

	GPIOB->MODER |= ( GPIO_MODER_MODE10_0 |
					  GPIO_MODER_MODE11_1 );

	GPIOB->PUPDR &= ~( GPIO_PUPDR_PUPD10 |
					   GPIO_PUPDR_PUPD11 );

	GPIOB->PUPDR |= ( GPIO_PUPDR_PUPD10_1 |
					  GPIO_PUPDR_PUPD10_1 );
	GPIOB->OTYPER &= ~( GPIO_OTYPER_OT4 |
						GPIO_OTYPER_OT5 );

	GPIOB->OSPEEDR |= ( ( 3 << GPIO_OSPEEDR_OSPEED4_Pos ) |
						( 3 << GPIO_OSPEEDR_OSPEED5_Pos ) );

	// configure AFR for I2C1 function
	GPIOB->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL10_Pos));
	GPIOB->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL11_Pos));
	GPIOB->AFR[0] |= ((0x0004 << GPIO_AFRL_AFSEL10_Pos));
	GPIOB->AFR[0] |= ((0x0004 << GPIO_AFRL_AFSEL11_Pos));

	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;  // enable I2C bus clock
	I2C1->CR1   &= ~( I2C_CR1_PE );        // put I2C into reset (release SDA, SCL)
	I2C1->CR1   &= ~( I2C_CR1_ANFOFF );    // filters: enable analog
	I2C1->CR1   &= ~( I2C_CR1_DNF );       // filters: disable digital
	I2C1->TIMINGR = 0x00303D5B;            // 16 MHz SYSCLK timing from CubeMX
	I2C1->CR2   |=  ( I2C_CR2_AUTOEND );   // auto send STOP after transmission
	I2C1->CR2   &= ~( I2C_CR2_ADD10 );     // 7-bit address mode
	I2C1->CR1   |=  ( I2C_CR1_PE );        // enable I2C
}

