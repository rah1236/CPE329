#include "spi.h"


void SPI_Init( void ) {
	// enable clock for GPIOA & SPI1
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // GPIOA: DAC NSS/SCK/SDO
	RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN); // SPI1 port
	/* USER ADD GPIO configuration of MODER/PUPDR/OTYPER/OSPEEDR registers HERE */
	GPIOA->MODER &= ~( GPIO_MODER_MODE4 |
					   GPIO_MODER_MODE5 |
					   GPIO_MODER_MODE6 |
					   GPIO_MODER_MODE7 |
					   GPIO_MODER_MODE1 );
	GPIOA->MODER |= ( GPIO_MODER_MODE4_0 |
					  GPIO_MODER_MODE5_1 |
					  GPIO_MODER_MODE6_1 |
					  GPIO_MODER_MODE7_1 |
					  GPIO_MODER_MODE1_0 );
	GPIOA->PUPDR &= ~( GPIO_PUPDR_PUPD4 |
					   GPIO_PUPDR_PUPD5 |
			   	   	   GPIO_PUPDR_PUPD6 |
					   GPIO_PUPDR_PUPD7 |
					   GPIO_PUPDR_PUPD1 );
	GPIOA->PUPDR |= ( GPIO_PUPDR_PUPD6_1 );
	GPIOA->OTYPER &= ~( GPIO_OTYPER_OT4 |
						GPIO_OTYPER_OT5 |
						GPIO_OTYPER_OT6 |
						GPIO_OTYPER_OT7 |
						GPIO_OTYPER_OT1 );
	GPIOA->OSPEEDR |= ( ( 3 << GPIO_OSPEEDR_OSPEED4_Pos ) |
						( 3 << GPIO_OSPEEDR_OSPEED5_Pos ) |
						( 3 << GPIO_OSPEEDR_OSPEED6_Pos ) |
						( 3 << GPIO_OSPEEDR_OSPEED7_Pos ) |
						( 3 << GPIO_OSPEEDR_OSPEED1_Pos ) );
	// configure AFR for SPI1 function (1 of 3 SPI bits shown here)
	GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos));
	GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL6_Pos));
	GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL7_Pos)); // clear nibble for bit 7 AF
	GPIOA->AFR[0] |= ((0x0005 << GPIO_AFRL_AFSEL5_Pos));
	GPIOA->AFR[0] |= ((0x0005 << GPIO_AFRL_AFSEL6_Pos));
	GPIOA->AFR[0] |= ((0x0005 << GPIO_AFRL_AFSEL7_Pos)); // set b7 AF to SPI1 (fcn 5)
	// SPI config as specified @ STM32L4 RM0351 rev.9 p.1459
	// called by or with DAC_init()
	// build control registers CR1 & CR2 for SPI control of peripheral DAC
	// assumes no active SPI xmits & no recv data in process (BSY=0)
	// CR1 (reset value = 0x0000)
	SPI1->CR1 &= ~( SPI_CR1_SPE ); // disable SPI for config
	SPI1->CR1 &= ~( SPI_CR1_RXONLY ); // recv-only OFF
	SPI1->CR1 &= ~( SPI_CR1_LSBFIRST ); // data bit order MSb:LSb
	SPI1->CR1 &= ~( SPI_CR1_CPOL | SPI_CR1_CPHA ); // SCLK polarity:phase = 0:0
	SPI1->CR1 |= SPI_CR1_MSTR; // MCU is SPI controller
	// CR2 (reset value = 0x0700 : 8b data)
	SPI1->CR2 &= ~( SPI_CR2_TXEIE | SPI_CR2_RXNEIE ); // disable FIFO intrpts
	SPI1->CR2 &= ~( SPI_CR2_FRF); // Moto frame format
	SPI1->CR2 |= SPI_CR2_NSSP; // auto-generate NSS pulse
	SPI1->CR2 |= SPI_CR2_DS; // 16-bit data
	SPI1->CR2 |= SPI_CR2_SSOE; // enable SS output
	// CR1
	SPI1->CR1 |= SPI_CR1_SPE; // re-enable SPI for ops

	SPI_PORT->BSRR |= ( CS | PS );
}

dac_data_type DAC_volt_conv( dac_data_type millivolts_requested ) {
	dac_data_type dac_word_out = ( millivolts_requested * (4112 / 4096) ) - 6;
	if (dac_word_out > 3300){
		dac_word_out = 3300;
	}
	return ( dac_word_out );
}
void SPI_write ( uint16_t data ) {
	data &= 0x0FFF;
	data |= ( 0x01 << 12 );		//set gain to 1, disable shutdown mode
	SPI_PORT->BRR |= CS;	//set CS low to start sending data
	while ( !( SPI1->SR & SPI_SR_TXE ) )
		;					//wait for empty transmit buffer
	SPI1->DR |= data;
	while ( !( SPI1->SR & SPI_SR_TXE ) )
		;
	while ( SPI1->SR & SPI_SR_BSY )
		;
	SPI_PORT->BSRR |= CS; //end data transmission, switch ~CS back to high
}

uint32_t SPI_read ( uint16_t data ) {
	SPI1->CR1 |= ( SPI_CR1_RXONLY ); // recv-only ON
	SPI_PORT->BRR |= CS;	//set CS low to start receiving data
	while ( ( SPI1->SR & SPI_SR_RXE ) )
		;					//wait for full receive buffer
	data = SPI1->DR;

	SPI_PORT->BSRR |= CS; //end data transmission, switch ~CS back to high
	SPI1->CR1 &= ~( SPI_CR1_RXONLY ); // recv-only OFF

}
