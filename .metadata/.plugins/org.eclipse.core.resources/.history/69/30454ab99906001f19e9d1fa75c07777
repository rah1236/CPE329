
#include "main.h"
#include "lcd.h"
#include "stdio.h"


void SystemClock_Config(void);

int main(void)
{

  HAL_Init();
  SystemClock_Config();
  setup_rng();
  setup_gpio();
  Lcd_Init();



  while (1)
  {
	  printf("RNG: %d \n", get_random_number());
	  delay_us(100000);
  }
}

// Does what it says in the name
void setup_rng(void){
	RNG->CR |= (RNG_CR_RNGEN);
}

uint32_t get_random_number(void){

	uint32_t random_number;

	//Get error bits of RNG Status Register
	uint8_t ceis_bit_value = ((RNG->SR | RNG_SR_CEIS_Msk) >> RNG_SR_CEIS_Pos);
	uint8_t seis_bit_value = ((RNG->SR | RNG_SR_SEIS_Msk) >> RNG_SR_SEIS_Pos);

	//and then get data ready bit
	uint8_t data_ready_bit_value = ((RNG->SR | RNG_SR_DRDY_Msk) >> RNG_SR_DRDY_Pos);

	//Check the status for no errors
	if ( (ceis_bit_value + seis_bit_value == 0) && (data_ready_bit_value == 1) ) {
		//Read the RNG data reg
		random_number = RNG->DR;
	}
	//Return the number found in the data register
	//If this function returns all 0's, something is wrong with the RNG!
	return(random_number);
}

void setup_gpio(void){
		// configure GPIO pins PC13 for:
		// input mode, with pull down
		RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
		GPIOC->MODER   &= ~(GPIO_MODER_MODE13);
		GPIOC->PUPDR   |= (GPIO_PUPDR_PUPD13_1);

		// configure GPIO pins PB7 and PB8 for:
		// output mode, no pull up or down, high speed,
		RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN);
		GPIOB->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
		GPIOB->MODER |= (GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0);
		GPIOB->OTYPER  &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);
		GPIOB->PUPDR   &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
		GPIOB->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED7_Pos) | (3 << GPIO_OSPEEDR_OSPEED8_Pos));

}

//For debug
int __io_putchar(int ch) {
    ITM_SendChar(ch);
    return ch;
}


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
