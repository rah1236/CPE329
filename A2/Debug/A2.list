
A2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000233c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080024ec  080024ec  000034ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002594  08002594  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002594  08002594  00003594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800259c  0800259c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800259c  0800259c  0000359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025a0  080025a0  000035a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080025a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  0800260c  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  0800260c  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049c0  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012a2  00000000  00000000  00008a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  00009d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000472  00000000  00000000  0000a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ca0  00000000  00000000  0000a79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000063fa  00000000  00000000  0003343a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f408b  00000000  00000000  00039834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d8bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001de0  00000000  00000000  0012d904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0012f6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080024d4 	.word	0x080024d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080024d4 	.word	0x080024d4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <Keypad_Init>:
void Keypad_Read(void);



// Use to initialize Keypad GPIO and other funcitonality of keypad
void Keypad_Init(void){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	// configure GPIO pins PC0, PC1, PC2, PC3 for:
	// output mode, push-pull, no pull up or pull down, high speed
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 8000294:	4b1d      	ldr	r3, [pc, #116]	@ (800030c <Keypad_Init+0x7c>)
 8000296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000298:	4a1c      	ldr	r2, [pc, #112]	@ (800030c <Keypad_Init+0x7c>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOC->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 );
 80002a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000310 <Keypad_Init+0x80>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000310 <Keypad_Init+0x80>)
 80002a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOC->MODER   |=  (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0);
 80002ac:	4b18      	ldr	r3, [pc, #96]	@ (8000310 <Keypad_Init+0x80>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a17      	ldr	r2, [pc, #92]	@ (8000310 <Keypad_Init+0x80>)
 80002b2:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80002b6:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 80002b8:	4b15      	ldr	r3, [pc, #84]	@ (8000310 <Keypad_Init+0x80>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a14      	ldr	r2, [pc, #80]	@ (8000310 <Keypad_Init+0x80>)
 80002be:	f023 030f 	bic.w	r3, r3, #15
 80002c2:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 80002c4:	4b12      	ldr	r3, [pc, #72]	@ (8000310 <Keypad_Init+0x80>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a11      	ldr	r2, [pc, #68]	@ (8000310 <Keypad_Init+0x80>)
 80002ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80002ce:	60d3      	str	r3, [r2, #12]
	GPIOC->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 80002d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000310 <Keypad_Init+0x80>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000310 <Keypad_Init+0x80>)
 80002d6:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 80002da:	6093      	str	r3, [r2, #8]
							  (3 << GPIO_OSPEEDR_OSPEED1_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED2_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED3_Pos));

	// configure GPIO pins PC4, PC5, PC6 for Input, with pull down
	GPIOC->MODER   &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 );
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <Keypad_Init+0x80>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000310 <Keypad_Init+0x80>)
 80002e2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80002e6:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD4_1 | GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1);
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <Keypad_Init+0x80>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a08      	ldr	r2, [pc, #32]	@ (8000310 <Keypad_Init+0x80>)
 80002ee:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 80002f2:	60d3      	str	r3, [r2, #12]


	 // preset PC0, PC1, PC2, PC3 to 0
	GPIOC->BRR |= (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 );
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <Keypad_Init+0x80>)
 80002f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002f8:	4a05      	ldr	r2, [pc, #20]	@ (8000310 <Keypad_Init+0x80>)
 80002fa:	f043 030f 	orr.w	r3, r3, #15
 80002fe:	6293      	str	r3, [r2, #40]	@ 0x28

}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000
 8000310:	48000800 	.word	0x48000800

08000314 <Keypad_Read>:


void Keypad_Read(void){
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
	// Poll through 3 pins
	for(int poll = 0; poll < 4; poll++)
 800031a:	2300      	movs	r3, #0
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	e01b      	b.n	8000358 <Keypad_Read+0x44>
	{
		//Enable current polled row
		GPIOC->ODR = (1 << poll);
 8000320:	2201      	movs	r2, #1
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	409a      	lsls	r2, r3
 8000326:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <Keypad_Read+0x54>)
 8000328:	615a      	str	r2, [r3, #20]

		// arbitrary delay to allow pin output to settle
		for (int i = 0; i < 100; i++);
 800032a:	2300      	movs	r3, #0
 800032c:	603b      	str	r3, [r7, #0]
 800032e:	e002      	b.n	8000336 <Keypad_Read+0x22>
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	603b      	str	r3, [r7, #0]
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	2b63      	cmp	r3, #99	@ 0x63
 800033a:	ddf9      	ble.n	8000330 <Keypad_Read+0x1c>

		printf("Currently polling %d, ", poll);
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	480b      	ldr	r0, [pc, #44]	@ (800036c <Keypad_Read+0x58>)
 8000340:	f001 fa5c 	bl	80017fc <iprintf>
		printf("Pin currently high = %d \n", (GPIOC->IDR >> 4));
 8000344:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <Keypad_Read+0x54>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	091b      	lsrs	r3, r3, #4
 800034a:	4619      	mov	r1, r3
 800034c:	4808      	ldr	r0, [pc, #32]	@ (8000370 <Keypad_Read+0x5c>)
 800034e:	f001 fa55 	bl	80017fc <iprintf>
	for(int poll = 0; poll < 4; poll++)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3301      	adds	r3, #1
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b03      	cmp	r3, #3
 800035c:	dde0      	ble.n	8000320 <Keypad_Read+0xc>


	}
}
 800035e:	bf00      	nop
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	48000800 	.word	0x48000800
 800036c:	080024ec 	.word	0x080024ec
 8000370:	08002504 	.word	0x08002504

08000374 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800037c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000380:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d013      	beq.n	80003b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800038c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000390:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000394:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000398:	2b00      	cmp	r3, #0
 800039a:	d00b      	beq.n	80003b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800039c:	e000      	b.n	80003a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800039e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80003a0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0f9      	beq.n	800039e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80003aa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	b2d2      	uxtb	r2, r2
 80003b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80003b4:	687b      	ldr	r3, [r7, #4]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c6:	f000 f992 	bl	80006ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ca:	f000 f805 	bl	80003d8 <SystemClock_Config>
//
//	 // preset PC0, PC1, PC2, PC3 to 0
//	GPIOC->BRR = (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 );

  //Enable keypad
  Keypad_Init();
 80003ce:	f7ff ff5f 	bl	8000290 <Keypad_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Keypad_Read();	  // arbitrary delay
 80003d2:	f7ff ff9f 	bl	8000314 <Keypad_Read>
 80003d6:	e7fc      	b.n	80003d2 <main+0x10>

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b096      	sub	sp, #88	@ 0x58
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	2244      	movs	r2, #68	@ 0x44
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 fa1a 	bl	8001820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	463b      	mov	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003fe:	f000 fadf 	bl	80009c0 <HAL_PWREx_ControlVoltageScaling>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000408:	f000 f83a 	bl	8000480 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800040c:	2310      	movs	r3, #16
 800040e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000410:	2301      	movs	r3, #1
 8000412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000418:	2360      	movs	r3, #96	@ 0x60
 800041a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800041c:	2300      	movs	r3, #0
 800041e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4618      	mov	r0, r3
 8000426:	f000 fb21 	bl	8000a6c <HAL_RCC_OscConfig>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000430:	f000 f826 	bl	8000480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000434:	230f      	movs	r3, #15
 8000436:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000444:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800044a:	463b      	mov	r3, r7
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f000 ff26 	bl	80012a0 <HAL_RCC_ClockConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800045a:	f000 f811 	bl	8000480 <Error_Handler>
  }
}
 800045e:	bf00      	nop
 8000460:	3758      	adds	r7, #88	@ 0x58
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <__io_putchar>:


/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8000466:	b580      	push	{r7, lr}
 8000468:	b082      	sub	sp, #8
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ff7f 	bl	8000374 <ITM_SendChar>
    return ch;
 8000476:	687b      	ldr	r3, [r7, #4]
}
 8000478:	4618      	mov	r0, r3
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000484:	b672      	cpsid	i
}
 8000486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <Error_Handler+0x8>

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <HAL_MspInit+0x44>)
 8000494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000496:	4a0e      	ldr	r2, [pc, #56]	@ (80004d0 <HAL_MspInit+0x44>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6613      	str	r3, [r2, #96]	@ 0x60
 800049e:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <HAL_MspInit+0x44>)
 80004a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b09      	ldr	r3, [pc, #36]	@ (80004d0 <HAL_MspInit+0x44>)
 80004ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ae:	4a08      	ldr	r2, [pc, #32]	@ (80004d0 <HAL_MspInit+0x44>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <HAL_MspInit+0x44>)
 80004b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <NMI_Handler+0x4>

080004dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <MemManage_Handler+0x4>

080004ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <BusFault_Handler+0x4>

080004f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <UsageFault_Handler+0x4>

080004fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052a:	f000 f935 	bl	8000798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}

08000532 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b086      	sub	sp, #24
 8000536:	af00      	add	r7, sp, #0
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	e00a      	b.n	800055a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000544:	f3af 8000 	nop.w
 8000548:	4601      	mov	r1, r0
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	60ba      	str	r2, [r7, #8]
 8000550:	b2ca      	uxtb	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	697a      	ldr	r2, [r7, #20]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	429a      	cmp	r2, r3
 8000560:	dbf0      	blt.n	8000544 <_read+0x12>
  }

  return len;
 8000562:	687b      	ldr	r3, [r7, #4]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	e009      	b.n	8000592 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	1c5a      	adds	r2, r3, #1
 8000582:	60ba      	str	r2, [r7, #8]
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ff6d 	bl	8000466 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	3301      	adds	r3, #1
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	697a      	ldr	r2, [r7, #20]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	429a      	cmp	r2, r3
 8000598:	dbf1      	blt.n	800057e <_write+0x12>
  }
  return len;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <_close>:

int _close(int file)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005cc:	605a      	str	r2, [r3, #4]
  return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <_isatty>:

int _isatty(int file)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005e4:	2301      	movs	r3, #1
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b085      	sub	sp, #20
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000614:	4a14      	ldr	r2, [pc, #80]	@ (8000668 <_sbrk+0x5c>)
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <_sbrk+0x60>)
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <_sbrk+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d102      	bne.n	800062e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <_sbrk+0x64>)
 800062a:	4a12      	ldr	r2, [pc, #72]	@ (8000674 <_sbrk+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	429a      	cmp	r2, r3
 800063a:	d207      	bcs.n	800064c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800063c:	f001 f8f8 	bl	8001830 <__errno>
 8000640:	4603      	mov	r3, r0
 8000642:	220c      	movs	r2, #12
 8000644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800064a:	e009      	b.n	8000660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <_sbrk+0x64>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <_sbrk+0x64>)
 800065c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20050000 	.word	0x20050000
 800066c:	00000400 	.word	0x00000400
 8000670:	20000084 	.word	0x20000084
 8000674:	200001d8 	.word	0x200001d8

08000678 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <SystemInit+0x20>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000682:	4a05      	ldr	r2, [pc, #20]	@ (8000698 <SystemInit+0x20>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800069c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a0:	f7ff ffea 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	@ (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	@ (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	@ (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	@ (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	@ (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ca:	f001 f8b7 	bl	800183c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ce:	f7ff fe78 	bl	80003c2 <main>

080006d2 <LoopForever>:

LoopForever:
    b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006e0:	080025a4 	.word	0x080025a4
  ldr r2, =_sbss
 80006e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006e8:	200001d8 	.word	0x200001d8

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>

080006ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f4:	2300      	movs	r3, #0
 80006f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f000 f91f 	bl	800093c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f80e 	bl	8000720 <HAL_InitTick>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	71fb      	strb	r3, [r7, #7]
 800070e:	e001      	b.n	8000714 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000710:	f7ff febc 	bl	800048c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000714:	79fb      	ldrb	r3, [r7, #7]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <HAL_InitTick+0x6c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d023      	beq.n	800077c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <HAL_InitTick+0x70>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <HAL_InitTick+0x6c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000742:	fbb3 f3f1 	udiv	r3, r3, r1
 8000746:	fbb2 f3f3 	udiv	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f91d 	bl	800098a <HAL_SYSTICK_Config>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d10f      	bne.n	8000776 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b0f      	cmp	r3, #15
 800075a:	d809      	bhi.n	8000770 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075c:	2200      	movs	r2, #0
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000764:	f000 f8f5 	bl	8000952 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000768:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <HAL_InitTick+0x74>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6013      	str	r3, [r2, #0]
 800076e:	e007      	b.n	8000780 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000770:	2301      	movs	r3, #1
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	e004      	b.n	8000780 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e001      	b.n	8000780 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	20000000 	.word	0x20000000
 8000794:	20000004 	.word	0x20000004

08000798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_IncTick+0x20>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_IncTick+0x24>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a04      	ldr	r2, [pc, #16]	@ (80007bc <HAL_IncTick+0x24>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000008 	.word	0x20000008
 80007bc:	20000088 	.word	0x20000088

080007c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;
 80007c4:	4b03      	ldr	r3, [pc, #12]	@ (80007d4 <HAL_GetTick+0x14>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000088 	.word	0x20000088

080007d8 <__NVIC_SetPriorityGrouping>:
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <__NVIC_SetPriorityGrouping+0x44>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000800:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080a:	4a04      	ldr	r2, [pc, #16]	@ (800081c <__NVIC_SetPriorityGrouping+0x44>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	60d3      	str	r3, [r2, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_GetPriorityGrouping>:
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <__NVIC_GetPriorityGrouping+0x18>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	f003 0307 	and.w	r3, r3, #7
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_SetPriority>:
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	@ (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	@ (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_EncodePriority>:
{
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	@ 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f1c3 0307 	rsb	r3, r3, #7
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	bf28      	it	cs
 80008ae:	2304      	movcs	r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d902      	bls.n	80008c0 <NVIC_EncodePriority+0x30>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3b03      	subs	r3, #3
 80008be:	e000      	b.n	80008c2 <NVIC_EncodePriority+0x32>
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43da      	mvns	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	401a      	ands	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43d9      	mvns	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	4313      	orrs	r3, r2
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	@ 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <SysTick_Config>:
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000908:	d301      	bcc.n	800090e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800090a:	2301      	movs	r3, #1
 800090c:	e00f      	b.n	800092e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <SysTick_Config+0x40>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000916:	210f      	movs	r1, #15
 8000918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800091c:	f7ff ff8e 	bl	800083c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <SysTick_Config+0x40>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000926:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <SysTick_Config+0x40>)
 8000928:	2207      	movs	r2, #7
 800092a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	e000e010 	.word	0xe000e010

0800093c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ff47 	bl	80007d8 <__NVIC_SetPriorityGrouping>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000964:	f7ff ff5c 	bl	8000820 <__NVIC_GetPriorityGrouping>
 8000968:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	6978      	ldr	r0, [r7, #20]
 8000970:	f7ff ff8e 	bl	8000890 <NVIC_EncodePriority>
 8000974:	4602      	mov	r2, r0
 8000976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff5d 	bl	800083c <__NVIC_SetPriority>
}
 8000982:	bf00      	nop
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ffb0 	bl	80008f8 <SysTick_Config>
 8000998:	4603      	mov	r3, r0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <HAL_PWREx_GetVoltageRange+0x18>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40007000 	.word	0x40007000

080009c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009ce:	d130      	bne.n	8000a32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80009d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009dc:	d038      	beq.n	8000a50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80009e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80009ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2232      	movs	r2, #50	@ 0x32
 80009f4:	fb02 f303 	mul.w	r3, r2, r3
 80009f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	0c9b      	lsrs	r3, r3, #18
 8000a00:	3301      	adds	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a04:	e002      	b.n	8000a0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a18:	d102      	bne.n	8000a20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f2      	bne.n	8000a06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a2c:	d110      	bne.n	8000a50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e00f      	b.n	8000a52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a3e:	d007      	beq.n	8000a50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a40:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000a48:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40007000 	.word	0x40007000
 8000a64:	20000000 	.word	0x20000000
 8000a68:	431bde83 	.word	0x431bde83

08000a6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	f000 bc08 	b.w	8001290 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a80:	4b96      	ldr	r3, [pc, #600]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f003 030c 	and.w	r3, r3, #12
 8000a88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a8a:	4b94      	ldr	r3, [pc, #592]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 0310 	and.w	r3, r3, #16
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f000 80e4 	beq.w	8000c6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d007      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x4c>
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	2b0c      	cmp	r3, #12
 8000aac:	f040 808b 	bne.w	8000bc6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	f040 8087 	bne.w	8000bc6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ab8:	4b88      	ldr	r3, [pc, #544]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d005      	beq.n	8000ad0 <HAL_RCC_OscConfig+0x64>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d101      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e3df      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a1a      	ldr	r2, [r3, #32]
 8000ad4:	4b81      	ldr	r3, [pc, #516]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f003 0308 	and.w	r3, r3, #8
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d004      	beq.n	8000aea <HAL_RCC_OscConfig+0x7e>
 8000ae0:	4b7e      	ldr	r3, [pc, #504]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ae8:	e005      	b.n	8000af6 <HAL_RCC_OscConfig+0x8a>
 8000aea:	4b7c      	ldr	r3, [pc, #496]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000af0:	091b      	lsrs	r3, r3, #4
 8000af2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d223      	bcs.n	8000b42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a1b      	ldr	r3, [r3, #32]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fd5a 	bl	80015b8 <RCC_SetFlashLatencyFromMSIRange>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e3c0      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b0e:	4b73      	ldr	r3, [pc, #460]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a72      	ldr	r2, [pc, #456]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	6013      	str	r3, [r2, #0]
 8000b1a:	4b70      	ldr	r3, [pc, #448]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a1b      	ldr	r3, [r3, #32]
 8000b26:	496d      	ldr	r1, [pc, #436]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b2c:	4b6b      	ldr	r3, [pc, #428]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	021b      	lsls	r3, r3, #8
 8000b3a:	4968      	ldr	r1, [pc, #416]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	604b      	str	r3, [r1, #4]
 8000b40:	e025      	b.n	8000b8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b42:	4b66      	ldr	r3, [pc, #408]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a65      	ldr	r2, [pc, #404]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	4b63      	ldr	r3, [pc, #396]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	4960      	ldr	r1, [pc, #384]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b60:	4b5e      	ldr	r3, [pc, #376]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69db      	ldr	r3, [r3, #28]
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	495b      	ldr	r1, [pc, #364]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b70:	4313      	orrs	r3, r2
 8000b72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d109      	bne.n	8000b8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6a1b      	ldr	r3, [r3, #32]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fd1a 	bl	80015b8 <RCC_SetFlashLatencyFromMSIRange>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e380      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000b8e:	f000 fc87 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 8000b92:	4602      	mov	r2, r0
 8000b94:	4b51      	ldr	r3, [pc, #324]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	091b      	lsrs	r3, r3, #4
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	4950      	ldr	r1, [pc, #320]	@ (8000ce0 <HAL_RCC_OscConfig+0x274>)
 8000ba0:	5ccb      	ldrb	r3, [r1, r3]
 8000ba2:	f003 031f 	and.w	r3, r3, #31
 8000ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8000baa:	4a4e      	ldr	r2, [pc, #312]	@ (8000ce4 <HAL_RCC_OscConfig+0x278>)
 8000bac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000bae:	4b4e      	ldr	r3, [pc, #312]	@ (8000ce8 <HAL_RCC_OscConfig+0x27c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fdb4 	bl	8000720 <HAL_InitTick>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d052      	beq.n	8000c68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	e364      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d032      	beq.n	8000c34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000bce:	4b43      	ldr	r3, [pc, #268]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a42      	ldr	r2, [pc, #264]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000bda:	f7ff fdf1 	bl	80007c0 <HAL_GetTick>
 8000bde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000be0:	e008      	b.n	8000bf4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000be2:	f7ff fded 	bl	80007c0 <HAL_GetTick>
 8000be6:	4602      	mov	r2, r0
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d901      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e34d      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000bf4:	4b39      	ldr	r3, [pc, #228]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0f0      	beq.n	8000be2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c00:	4b36      	ldr	r3, [pc, #216]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a35      	ldr	r2, [pc, #212]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b33      	ldr	r3, [pc, #204]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	4930      	ldr	r1, [pc, #192]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	492b      	ldr	r1, [pc, #172]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	604b      	str	r3, [r1, #4]
 8000c32:	e01a      	b.n	8000c6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c34:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a28      	ldr	r2, [pc, #160]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000c3a:	f023 0301 	bic.w	r3, r3, #1
 8000c3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c40:	f7ff fdbe 	bl	80007c0 <HAL_GetTick>
 8000c44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c46:	e008      	b.n	8000c5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c48:	f7ff fdba 	bl	80007c0 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d901      	bls.n	8000c5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e31a      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1f0      	bne.n	8000c48 <HAL_RCC_OscConfig+0x1dc>
 8000c66:	e000      	b.n	8000c6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d073      	beq.n	8000d5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2b08      	cmp	r3, #8
 8000c7a:	d005      	beq.n	8000c88 <HAL_RCC_OscConfig+0x21c>
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2b0c      	cmp	r3, #12
 8000c80:	d10e      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d10b      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d063      	beq.n	8000d5c <HAL_RCC_OscConfig+0x2f0>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d15f      	bne.n	8000d5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e2f7      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ca8:	d106      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x24c>
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	e025      	b.n	8000d04 <HAL_RCC_OscConfig+0x298>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cc0:	d114      	bne.n	8000cec <HAL_RCC_OscConfig+0x280>
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a02      	ldr	r2, [pc, #8]	@ (8000cdc <HAL_RCC_OscConfig+0x270>)
 8000cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e013      	b.n	8000d04 <HAL_RCC_OscConfig+0x298>
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	08002520 	.word	0x08002520
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000004 	.word	0x20000004
 8000cec:	4ba0      	ldr	r3, [pc, #640]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a9f      	ldr	r2, [pc, #636]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b9d      	ldr	r3, [pc, #628]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a9c      	ldr	r2, [pc, #624]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d013      	beq.n	8000d34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fd58 	bl	80007c0 <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d14:	f7ff fd54 	bl	80007c0 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b64      	cmp	r3, #100	@ 0x64
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e2b4      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d26:	4b92      	ldr	r3, [pc, #584]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f0      	beq.n	8000d14 <HAL_RCC_OscConfig+0x2a8>
 8000d32:	e014      	b.n	8000d5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d34:	f7ff fd44 	bl	80007c0 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fd40 	bl	80007c0 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	@ 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e2a0      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d4e:	4b88      	ldr	r3, [pc, #544]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0x2d0>
 8000d5a:	e000      	b.n	8000d5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d060      	beq.n	8000e2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d005      	beq.n	8000d7c <HAL_RCC_OscConfig+0x310>
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b0c      	cmp	r3, #12
 8000d74:	d119      	bne.n	8000daa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d116      	bne.n	8000daa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d7c:	4b7c      	ldr	r3, [pc, #496]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d005      	beq.n	8000d94 <HAL_RCC_OscConfig+0x328>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d101      	bne.n	8000d94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e27d      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d94:	4b76      	ldr	r3, [pc, #472]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	061b      	lsls	r3, r3, #24
 8000da2:	4973      	ldr	r1, [pc, #460]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000da4:	4313      	orrs	r3, r2
 8000da6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000da8:	e040      	b.n	8000e2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d023      	beq.n	8000dfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000db2:	4b6f      	ldr	r3, [pc, #444]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a6e      	ldr	r2, [pc, #440]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fcff 	bl	80007c0 <HAL_GetTick>
 8000dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000dc4:	e008      	b.n	8000dd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fcfb 	bl	80007c0 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e25b      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000dd8:	4b65      	ldr	r3, [pc, #404]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f0      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de4:	4b62      	ldr	r3, [pc, #392]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	061b      	lsls	r3, r3, #24
 8000df2:	495f      	ldr	r1, [pc, #380]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000df4:	4313      	orrs	r3, r2
 8000df6:	604b      	str	r3, [r1, #4]
 8000df8:	e018      	b.n	8000e2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a5c      	ldr	r2, [pc, #368]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e06:	f7ff fcdb 	bl	80007c0 <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e0e:	f7ff fcd7 	bl	80007c0 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e237      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e20:	4b53      	ldr	r3, [pc, #332]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1f0      	bne.n	8000e0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d03c      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d01c      	beq.n	8000e7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e40:	4b4b      	ldr	r3, [pc, #300]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e46:	4a4a      	ldr	r2, [pc, #296]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e50:	f7ff fcb6 	bl	80007c0 <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e58:	f7ff fcb2 	bl	80007c0 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e212      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e6a:	4b41      	ldr	r3, [pc, #260]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0ef      	beq.n	8000e58 <HAL_RCC_OscConfig+0x3ec>
 8000e78:	e01b      	b.n	8000eb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e80:	4a3b      	ldr	r2, [pc, #236]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000e82:	f023 0301 	bic.w	r3, r3, #1
 8000e86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fc99 	bl	80007c0 <HAL_GetTick>
 8000e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e92:	f7ff fc95 	bl	80007c0 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e1f5      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1ef      	bne.n	8000e92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 80a6 	beq.w	800100c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10d      	bne.n	8000eec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed0:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed4:	4a26      	ldr	r2, [pc, #152]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000edc:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000eec:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <HAL_RCC_OscConfig+0x508>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d118      	bne.n	8000f2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <HAL_RCC_OscConfig+0x508>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f74 <HAL_RCC_OscConfig+0x508>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fc5c 	bl	80007c0 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0c:	f7ff fc58 	bl	80007c0 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e1b8      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_RCC_OscConfig+0x508>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f0      	beq.n	8000f0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d108      	bne.n	8000f44 <HAL_RCC_OscConfig+0x4d8>
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f38:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000f42:	e029      	b.n	8000f98 <HAL_RCC_OscConfig+0x52c>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2b05      	cmp	r3, #5
 8000f4a:	d115      	bne.n	8000f78 <HAL_RCC_OscConfig+0x50c>
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f52:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f62:	4a03      	ldr	r2, [pc, #12]	@ (8000f70 <HAL_RCC_OscConfig+0x504>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000f6c:	e014      	b.n	8000f98 <HAL_RCC_OscConfig+0x52c>
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40007000 	.word	0x40007000
 8000f78:	4b9d      	ldr	r3, [pc, #628]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8000f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f7e:	4a9c      	ldr	r2, [pc, #624]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000f88:	4b99      	ldr	r3, [pc, #612]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8000f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f8e:	4a98      	ldr	r2, [pc, #608]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8000f90:	f023 0304 	bic.w	r3, r3, #4
 8000f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d016      	beq.n	8000fce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fc0e 	bl	80007c0 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fa6:	e00a      	b.n	8000fbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fc0a 	bl	80007c0 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e168      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fbe:	4b8c      	ldr	r3, [pc, #560]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8000fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0ed      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x53c>
 8000fcc:	e015      	b.n	8000ffa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fce:	f7ff fbf7 	bl	80007c0 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fd4:	e00a      	b.n	8000fec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fbf3 	bl	80007c0 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e151      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fec:	4b80      	ldr	r3, [pc, #512]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8000fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1ed      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ffa:	7ffb      	ldrb	r3, [r7, #31]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001000:	4b7b      	ldr	r3, [pc, #492]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8001002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001004:	4a7a      	ldr	r2, [pc, #488]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8001006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800100a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	2b00      	cmp	r3, #0
 8001016:	d03c      	beq.n	8001092 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101c:	2b00      	cmp	r3, #0
 800101e:	d01c      	beq.n	800105a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001020:	4b73      	ldr	r3, [pc, #460]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8001022:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001026:	4a72      	ldr	r2, [pc, #456]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001030:	f7ff fbc6 	bl	80007c0 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001038:	f7ff fbc2 	bl	80007c0 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e122      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800104a:	4b69      	ldr	r3, [pc, #420]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 800104c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0ef      	beq.n	8001038 <HAL_RCC_OscConfig+0x5cc>
 8001058:	e01b      	b.n	8001092 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800105a:	4b65      	ldr	r3, [pc, #404]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 800105c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001060:	4a63      	ldr	r2, [pc, #396]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8001062:	f023 0301 	bic.w	r3, r3, #1
 8001066:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106a:	f7ff fba9 	bl	80007c0 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001072:	f7ff fba5 	bl	80007c0 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e105      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001084:	4b5a      	ldr	r3, [pc, #360]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8001086:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1ef      	bne.n	8001072 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 80f9 	beq.w	800128e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	f040 80cf 	bne.w	8001244 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80010a6:	4b52      	ldr	r3, [pc, #328]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f003 0203 	and.w	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d12c      	bne.n	8001114 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	3b01      	subs	r3, #1
 80010c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d123      	bne.n	8001114 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010d8:	429a      	cmp	r2, r3
 80010da:	d11b      	bne.n	8001114 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d113      	bne.n	8001114 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010f6:	085b      	lsrs	r3, r3, #1
 80010f8:	3b01      	subs	r3, #1
 80010fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d109      	bne.n	8001114 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	085b      	lsrs	r3, r3, #1
 800110c:	3b01      	subs	r3, #1
 800110e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001110:	429a      	cmp	r2, r3
 8001112:	d071      	beq.n	80011f8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	2b0c      	cmp	r3, #12
 8001118:	d068      	beq.n	80011ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800111a:	4b35      	ldr	r3, [pc, #212]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d105      	bne.n	8001132 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001126:	4b32      	ldr	r3, [pc, #200]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e0ac      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001136:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a2d      	ldr	r2, [pc, #180]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 800113c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001140:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001142:	f7ff fb3d 	bl	80007c0 <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114a:	f7ff fb39 	bl	80007c0 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e099      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800115c:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f0      	bne.n	800114a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <HAL_RCC_OscConfig+0x788>)
 800116e:	4013      	ands	r3, r2
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001178:	3a01      	subs	r2, #1
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	4311      	orrs	r1, r2
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001182:	0212      	lsls	r2, r2, #8
 8001184:	4311      	orrs	r1, r2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800118a:	0852      	lsrs	r2, r2, #1
 800118c:	3a01      	subs	r2, #1
 800118e:	0552      	lsls	r2, r2, #21
 8001190:	4311      	orrs	r1, r2
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001196:	0852      	lsrs	r2, r2, #1
 8001198:	3a01      	subs	r2, #1
 800119a:	0652      	lsls	r2, r2, #25
 800119c:	4311      	orrs	r1, r2
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80011a2:	06d2      	lsls	r2, r2, #27
 80011a4:	430a      	orrs	r2, r1
 80011a6:	4912      	ldr	r1, [pc, #72]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80011ac:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 80011b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011b8:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 80011be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80011c4:	f7ff fafc 	bl	80007c0 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011cc:	f7ff faf8 	bl	80007c0 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e058      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011de:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <HAL_RCC_OscConfig+0x784>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011ea:	e050      	b.n	800128e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e04f      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
 80011f0:	40021000 	.word	0x40021000
 80011f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011f8:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <HAL_RCC_OscConfig+0x82c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d144      	bne.n	800128e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <HAL_RCC_OscConfig+0x82c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a23      	ldr	r2, [pc, #140]	@ (8001298 <HAL_RCC_OscConfig+0x82c>)
 800120a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800120e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001210:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <HAL_RCC_OscConfig+0x82c>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4a20      	ldr	r2, [pc, #128]	@ (8001298 <HAL_RCC_OscConfig+0x82c>)
 8001216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800121a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800121c:	f7ff fad0 	bl	80007c0 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001224:	f7ff facc 	bl	80007c0 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e02c      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <HAL_RCC_OscConfig+0x82c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x7b8>
 8001242:	e024      	b.n	800128e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b0c      	cmp	r3, #12
 8001248:	d01f      	beq.n	800128a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124a:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <HAL_RCC_OscConfig+0x82c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <HAL_RCC_OscConfig+0x82c>)
 8001250:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff fab3 	bl	80007c0 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125e:	f7ff faaf 	bl	80007c0 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e00f      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <HAL_RCC_OscConfig+0x82c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f0      	bne.n	800125e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_RCC_OscConfig+0x82c>)
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	4905      	ldr	r1, [pc, #20]	@ (8001298 <HAL_RCC_OscConfig+0x82c>)
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_RCC_OscConfig+0x830>)
 8001284:	4013      	ands	r3, r2
 8001286:	60cb      	str	r3, [r1, #12]
 8001288:	e001      	b.n	800128e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3720      	adds	r7, #32
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000
 800129c:	feeefffc 	.word	0xfeeefffc

080012a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0e7      	b.n	8001484 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012b4:	4b75      	ldr	r3, [pc, #468]	@ (800148c <HAL_RCC_ClockConfig+0x1ec>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d910      	bls.n	80012e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c2:	4b72      	ldr	r3, [pc, #456]	@ (800148c <HAL_RCC_ClockConfig+0x1ec>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 0207 	bic.w	r2, r3, #7
 80012ca:	4970      	ldr	r1, [pc, #448]	@ (800148c <HAL_RCC_ClockConfig+0x1ec>)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d2:	4b6e      	ldr	r3, [pc, #440]	@ (800148c <HAL_RCC_ClockConfig+0x1ec>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0cf      	b.n	8001484 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d010      	beq.n	8001312 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	4b66      	ldr	r3, [pc, #408]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d908      	bls.n	8001312 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001300:	4b63      	ldr	r3, [pc, #396]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	4960      	ldr	r1, [pc, #384]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 800130e:	4313      	orrs	r3, r2
 8001310:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d04c      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d107      	bne.n	8001336 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001326:	4b5a      	ldr	r3, [pc, #360]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d121      	bne.n	8001376 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0a6      	b.n	8001484 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133e:	4b54      	ldr	r3, [pc, #336]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d115      	bne.n	8001376 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e09a      	b.n	8001484 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d107      	bne.n	8001366 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001356:	4b4e      	ldr	r3, [pc, #312]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e08e      	b.n	8001484 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001366:	4b4a      	ldr	r3, [pc, #296]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e086      	b.n	8001484 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001376:	4b46      	ldr	r3, [pc, #280]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f023 0203 	bic.w	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4943      	ldr	r1, [pc, #268]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 8001384:	4313      	orrs	r3, r2
 8001386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001388:	f7ff fa1a 	bl	80007c0 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001390:	f7ff fa16 	bl	80007c0 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e06e      	b.n	8001484 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 020c 	and.w	r2, r3, #12
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1eb      	bne.n	8001390 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d010      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d208      	bcs.n	80013e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	492b      	ldr	r1, [pc, #172]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <HAL_RCC_ClockConfig+0x1ec>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d210      	bcs.n	8001416 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f4:	4b25      	ldr	r3, [pc, #148]	@ (800148c <HAL_RCC_ClockConfig+0x1ec>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 0207 	bic.w	r2, r3, #7
 80013fc:	4923      	ldr	r1, [pc, #140]	@ (800148c <HAL_RCC_ClockConfig+0x1ec>)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001404:	4b21      	ldr	r3, [pc, #132]	@ (800148c <HAL_RCC_ClockConfig+0x1ec>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d001      	beq.n	8001416 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e036      	b.n	8001484 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	2b00      	cmp	r3, #0
 8001420:	d008      	beq.n	8001434 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001422:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	4918      	ldr	r1, [pc, #96]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 8001430:	4313      	orrs	r3, r2
 8001432:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d009      	beq.n	8001454 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4910      	ldr	r1, [pc, #64]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 8001450:	4313      	orrs	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001454:	f000 f824 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 8001458:	4602      	mov	r2, r0
 800145a:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <HAL_RCC_ClockConfig+0x1f0>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	490b      	ldr	r1, [pc, #44]	@ (8001494 <HAL_RCC_ClockConfig+0x1f4>)
 8001466:	5ccb      	ldrb	r3, [r1, r3]
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
 8001470:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <HAL_RCC_ClockConfig+0x1f8>)
 8001472:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_RCC_ClockConfig+0x1fc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f951 	bl	8000720 <HAL_InitTick>
 800147e:	4603      	mov	r3, r0
 8001480:	72fb      	strb	r3, [r7, #11]

  return status;
 8001482:	7afb      	ldrb	r3, [r7, #11]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40022000 	.word	0x40022000
 8001490:	40021000 	.word	0x40021000
 8001494:	08002520 	.word	0x08002520
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	@ 0x24
 80014a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ae:	4b3e      	ldr	r3, [pc, #248]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b8:	4b3b      	ldr	r3, [pc, #236]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_GetSysClockFreq+0x34>
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	d121      	bne.n	8001512 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d11e      	bne.n	8001512 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014d4:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80014e0:	4b31      	ldr	r3, [pc, #196]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80014e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	e005      	b.n	80014fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80014fc:	4a2b      	ldr	r2, [pc, #172]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10d      	bne.n	8001528 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001510:	e00a      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d102      	bne.n	800151e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001518:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	e004      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	2b08      	cmp	r3, #8
 8001522:	d101      	bne.n	8001528 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001524:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001526:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d134      	bne.n	8001598 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d003      	beq.n	8001546 <HAL_RCC_GetSysClockFreq+0xa6>
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d003      	beq.n	800154c <HAL_RCC_GetSysClockFreq+0xac>
 8001544:	e005      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001548:	617b      	str	r3, [r7, #20]
      break;
 800154a:	e005      	b.n	8001558 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800154e:	617b      	str	r3, [r7, #20]
      break;
 8001550:	e002      	b.n	8001558 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	617b      	str	r3, [r7, #20]
      break;
 8001556:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	3301      	adds	r3, #1
 8001564:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	fb03 f202 	mul.w	r2, r3, r2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	fbb2 f3f3 	udiv	r3, r2, r3
 800157c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	0e5b      	lsrs	r3, r3, #25
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	3301      	adds	r3, #1
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001598:	69bb      	ldr	r3, [r7, #24]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	08002530 	.word	0x08002530
 80015b0:	00f42400 	.word	0x00f42400
 80015b4:	007a1200 	.word	0x007a1200

080015b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80015c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80015d0:	f7ff f9e8 	bl	80009a4 <HAL_PWREx_GetVoltageRange>
 80015d4:	6178      	str	r0, [r7, #20]
 80015d6:	e014      	b.n	8001602 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80015d8:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015dc:	4a24      	ldr	r2, [pc, #144]	@ (8001670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e4:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80015f0:	f7ff f9d8 	bl	80009a4 <HAL_PWREx_GetVoltageRange>
 80015f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001600:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001608:	d10b      	bne.n	8001622 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b80      	cmp	r3, #128	@ 0x80
 800160e:	d919      	bls.n	8001644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2ba0      	cmp	r3, #160	@ 0xa0
 8001614:	d902      	bls.n	800161c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001616:	2302      	movs	r3, #2
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	e013      	b.n	8001644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800161c:	2301      	movs	r3, #1
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	e010      	b.n	8001644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b80      	cmp	r3, #128	@ 0x80
 8001626:	d902      	bls.n	800162e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001628:	2303      	movs	r3, #3
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	e00a      	b.n	8001644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b80      	cmp	r3, #128	@ 0x80
 8001632:	d102      	bne.n	800163a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001634:	2302      	movs	r3, #2
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	e004      	b.n	8001644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b70      	cmp	r3, #112	@ 0x70
 800163e:	d101      	bne.n	8001644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001640:	2301      	movs	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 0207 	bic.w	r2, r3, #7
 800164c:	4909      	ldr	r1, [pc, #36]	@ (8001674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001654:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000
 8001674:	40022000 	.word	0x40022000

08001678 <std>:
 8001678:	2300      	movs	r3, #0
 800167a:	b510      	push	{r4, lr}
 800167c:	4604      	mov	r4, r0
 800167e:	e9c0 3300 	strd	r3, r3, [r0]
 8001682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001686:	6083      	str	r3, [r0, #8]
 8001688:	8181      	strh	r1, [r0, #12]
 800168a:	6643      	str	r3, [r0, #100]	@ 0x64
 800168c:	81c2      	strh	r2, [r0, #14]
 800168e:	6183      	str	r3, [r0, #24]
 8001690:	4619      	mov	r1, r3
 8001692:	2208      	movs	r2, #8
 8001694:	305c      	adds	r0, #92	@ 0x5c
 8001696:	f000 f8c3 	bl	8001820 <memset>
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <std+0x58>)
 800169c:	6263      	str	r3, [r4, #36]	@ 0x24
 800169e:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <std+0x5c>)
 80016a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <std+0x60>)
 80016a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <std+0x64>)
 80016a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <std+0x68>)
 80016ac:	6224      	str	r4, [r4, #32]
 80016ae:	429c      	cmp	r4, r3
 80016b0:	d006      	beq.n	80016c0 <std+0x48>
 80016b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80016b6:	4294      	cmp	r4, r2
 80016b8:	d002      	beq.n	80016c0 <std+0x48>
 80016ba:	33d0      	adds	r3, #208	@ 0xd0
 80016bc:	429c      	cmp	r4, r3
 80016be:	d105      	bne.n	80016cc <std+0x54>
 80016c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80016c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016c8:	f000 b8dc 	b.w	8001884 <__retarget_lock_init_recursive>
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	bf00      	nop
 80016d0:	080020dd 	.word	0x080020dd
 80016d4:	080020ff 	.word	0x080020ff
 80016d8:	08002137 	.word	0x08002137
 80016dc:	0800215b 	.word	0x0800215b
 80016e0:	2000008c 	.word	0x2000008c

080016e4 <stdio_exit_handler>:
 80016e4:	4a02      	ldr	r2, [pc, #8]	@ (80016f0 <stdio_exit_handler+0xc>)
 80016e6:	4903      	ldr	r1, [pc, #12]	@ (80016f4 <stdio_exit_handler+0x10>)
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <stdio_exit_handler+0x14>)
 80016ea:	f000 b869 	b.w	80017c0 <_fwalk_sglue>
 80016ee:	bf00      	nop
 80016f0:	2000000c 	.word	0x2000000c
 80016f4:	08002075 	.word	0x08002075
 80016f8:	2000001c 	.word	0x2000001c

080016fc <cleanup_stdio>:
 80016fc:	6841      	ldr	r1, [r0, #4]
 80016fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <cleanup_stdio+0x34>)
 8001700:	4299      	cmp	r1, r3
 8001702:	b510      	push	{r4, lr}
 8001704:	4604      	mov	r4, r0
 8001706:	d001      	beq.n	800170c <cleanup_stdio+0x10>
 8001708:	f000 fcb4 	bl	8002074 <_fflush_r>
 800170c:	68a1      	ldr	r1, [r4, #8]
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <cleanup_stdio+0x38>)
 8001710:	4299      	cmp	r1, r3
 8001712:	d002      	beq.n	800171a <cleanup_stdio+0x1e>
 8001714:	4620      	mov	r0, r4
 8001716:	f000 fcad 	bl	8002074 <_fflush_r>
 800171a:	68e1      	ldr	r1, [r4, #12]
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <cleanup_stdio+0x3c>)
 800171e:	4299      	cmp	r1, r3
 8001720:	d004      	beq.n	800172c <cleanup_stdio+0x30>
 8001722:	4620      	mov	r0, r4
 8001724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001728:	f000 bca4 	b.w	8002074 <_fflush_r>
 800172c:	bd10      	pop	{r4, pc}
 800172e:	bf00      	nop
 8001730:	2000008c 	.word	0x2000008c
 8001734:	200000f4 	.word	0x200000f4
 8001738:	2000015c 	.word	0x2000015c

0800173c <global_stdio_init.part.0>:
 800173c:	b510      	push	{r4, lr}
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <global_stdio_init.part.0+0x30>)
 8001740:	4c0b      	ldr	r4, [pc, #44]	@ (8001770 <global_stdio_init.part.0+0x34>)
 8001742:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <global_stdio_init.part.0+0x38>)
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	4620      	mov	r0, r4
 8001748:	2200      	movs	r2, #0
 800174a:	2104      	movs	r1, #4
 800174c:	f7ff ff94 	bl	8001678 <std>
 8001750:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001754:	2201      	movs	r2, #1
 8001756:	2109      	movs	r1, #9
 8001758:	f7ff ff8e 	bl	8001678 <std>
 800175c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001760:	2202      	movs	r2, #2
 8001762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001766:	2112      	movs	r1, #18
 8001768:	f7ff bf86 	b.w	8001678 <std>
 800176c:	200001c4 	.word	0x200001c4
 8001770:	2000008c 	.word	0x2000008c
 8001774:	080016e5 	.word	0x080016e5

08001778 <__sfp_lock_acquire>:
 8001778:	4801      	ldr	r0, [pc, #4]	@ (8001780 <__sfp_lock_acquire+0x8>)
 800177a:	f000 b884 	b.w	8001886 <__retarget_lock_acquire_recursive>
 800177e:	bf00      	nop
 8001780:	200001c9 	.word	0x200001c9

08001784 <__sfp_lock_release>:
 8001784:	4801      	ldr	r0, [pc, #4]	@ (800178c <__sfp_lock_release+0x8>)
 8001786:	f000 b87f 	b.w	8001888 <__retarget_lock_release_recursive>
 800178a:	bf00      	nop
 800178c:	200001c9 	.word	0x200001c9

08001790 <__sinit>:
 8001790:	b510      	push	{r4, lr}
 8001792:	4604      	mov	r4, r0
 8001794:	f7ff fff0 	bl	8001778 <__sfp_lock_acquire>
 8001798:	6a23      	ldr	r3, [r4, #32]
 800179a:	b11b      	cbz	r3, 80017a4 <__sinit+0x14>
 800179c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017a0:	f7ff bff0 	b.w	8001784 <__sfp_lock_release>
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <__sinit+0x28>)
 80017a6:	6223      	str	r3, [r4, #32]
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <__sinit+0x2c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f5      	bne.n	800179c <__sinit+0xc>
 80017b0:	f7ff ffc4 	bl	800173c <global_stdio_init.part.0>
 80017b4:	e7f2      	b.n	800179c <__sinit+0xc>
 80017b6:	bf00      	nop
 80017b8:	080016fd 	.word	0x080016fd
 80017bc:	200001c4 	.word	0x200001c4

080017c0 <_fwalk_sglue>:
 80017c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017c4:	4607      	mov	r7, r0
 80017c6:	4688      	mov	r8, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	2600      	movs	r6, #0
 80017cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017d0:	f1b9 0901 	subs.w	r9, r9, #1
 80017d4:	d505      	bpl.n	80017e2 <_fwalk_sglue+0x22>
 80017d6:	6824      	ldr	r4, [r4, #0]
 80017d8:	2c00      	cmp	r4, #0
 80017da:	d1f7      	bne.n	80017cc <_fwalk_sglue+0xc>
 80017dc:	4630      	mov	r0, r6
 80017de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017e2:	89ab      	ldrh	r3, [r5, #12]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d907      	bls.n	80017f8 <_fwalk_sglue+0x38>
 80017e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017ec:	3301      	adds	r3, #1
 80017ee:	d003      	beq.n	80017f8 <_fwalk_sglue+0x38>
 80017f0:	4629      	mov	r1, r5
 80017f2:	4638      	mov	r0, r7
 80017f4:	47c0      	blx	r8
 80017f6:	4306      	orrs	r6, r0
 80017f8:	3568      	adds	r5, #104	@ 0x68
 80017fa:	e7e9      	b.n	80017d0 <_fwalk_sglue+0x10>

080017fc <iprintf>:
 80017fc:	b40f      	push	{r0, r1, r2, r3}
 80017fe:	b507      	push	{r0, r1, r2, lr}
 8001800:	4906      	ldr	r1, [pc, #24]	@ (800181c <iprintf+0x20>)
 8001802:	ab04      	add	r3, sp, #16
 8001804:	6808      	ldr	r0, [r1, #0]
 8001806:	f853 2b04 	ldr.w	r2, [r3], #4
 800180a:	6881      	ldr	r1, [r0, #8]
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	f000 f865 	bl	80018dc <_vfiprintf_r>
 8001812:	b003      	add	sp, #12
 8001814:	f85d eb04 	ldr.w	lr, [sp], #4
 8001818:	b004      	add	sp, #16
 800181a:	4770      	bx	lr
 800181c:	20000018 	.word	0x20000018

08001820 <memset>:
 8001820:	4402      	add	r2, r0
 8001822:	4603      	mov	r3, r0
 8001824:	4293      	cmp	r3, r2
 8001826:	d100      	bne.n	800182a <memset+0xa>
 8001828:	4770      	bx	lr
 800182a:	f803 1b01 	strb.w	r1, [r3], #1
 800182e:	e7f9      	b.n	8001824 <memset+0x4>

08001830 <__errno>:
 8001830:	4b01      	ldr	r3, [pc, #4]	@ (8001838 <__errno+0x8>)
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000018 	.word	0x20000018

0800183c <__libc_init_array>:
 800183c:	b570      	push	{r4, r5, r6, lr}
 800183e:	4d0d      	ldr	r5, [pc, #52]	@ (8001874 <__libc_init_array+0x38>)
 8001840:	4c0d      	ldr	r4, [pc, #52]	@ (8001878 <__libc_init_array+0x3c>)
 8001842:	1b64      	subs	r4, r4, r5
 8001844:	10a4      	asrs	r4, r4, #2
 8001846:	2600      	movs	r6, #0
 8001848:	42a6      	cmp	r6, r4
 800184a:	d109      	bne.n	8001860 <__libc_init_array+0x24>
 800184c:	4d0b      	ldr	r5, [pc, #44]	@ (800187c <__libc_init_array+0x40>)
 800184e:	4c0c      	ldr	r4, [pc, #48]	@ (8001880 <__libc_init_array+0x44>)
 8001850:	f000 fe40 	bl	80024d4 <_init>
 8001854:	1b64      	subs	r4, r4, r5
 8001856:	10a4      	asrs	r4, r4, #2
 8001858:	2600      	movs	r6, #0
 800185a:	42a6      	cmp	r6, r4
 800185c:	d105      	bne.n	800186a <__libc_init_array+0x2e>
 800185e:	bd70      	pop	{r4, r5, r6, pc}
 8001860:	f855 3b04 	ldr.w	r3, [r5], #4
 8001864:	4798      	blx	r3
 8001866:	3601      	adds	r6, #1
 8001868:	e7ee      	b.n	8001848 <__libc_init_array+0xc>
 800186a:	f855 3b04 	ldr.w	r3, [r5], #4
 800186e:	4798      	blx	r3
 8001870:	3601      	adds	r6, #1
 8001872:	e7f2      	b.n	800185a <__libc_init_array+0x1e>
 8001874:	0800259c 	.word	0x0800259c
 8001878:	0800259c 	.word	0x0800259c
 800187c:	0800259c 	.word	0x0800259c
 8001880:	080025a0 	.word	0x080025a0

08001884 <__retarget_lock_init_recursive>:
 8001884:	4770      	bx	lr

08001886 <__retarget_lock_acquire_recursive>:
 8001886:	4770      	bx	lr

08001888 <__retarget_lock_release_recursive>:
 8001888:	4770      	bx	lr

0800188a <__sfputc_r>:
 800188a:	6893      	ldr	r3, [r2, #8]
 800188c:	3b01      	subs	r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	b410      	push	{r4}
 8001892:	6093      	str	r3, [r2, #8]
 8001894:	da08      	bge.n	80018a8 <__sfputc_r+0x1e>
 8001896:	6994      	ldr	r4, [r2, #24]
 8001898:	42a3      	cmp	r3, r4
 800189a:	db01      	blt.n	80018a0 <__sfputc_r+0x16>
 800189c:	290a      	cmp	r1, #10
 800189e:	d103      	bne.n	80018a8 <__sfputc_r+0x1e>
 80018a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018a4:	f000 bc5d 	b.w	8002162 <__swbuf_r>
 80018a8:	6813      	ldr	r3, [r2, #0]
 80018aa:	1c58      	adds	r0, r3, #1
 80018ac:	6010      	str	r0, [r2, #0]
 80018ae:	7019      	strb	r1, [r3, #0]
 80018b0:	4608      	mov	r0, r1
 80018b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <__sfputs_r>:
 80018b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ba:	4606      	mov	r6, r0
 80018bc:	460f      	mov	r7, r1
 80018be:	4614      	mov	r4, r2
 80018c0:	18d5      	adds	r5, r2, r3
 80018c2:	42ac      	cmp	r4, r5
 80018c4:	d101      	bne.n	80018ca <__sfputs_r+0x12>
 80018c6:	2000      	movs	r0, #0
 80018c8:	e007      	b.n	80018da <__sfputs_r+0x22>
 80018ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018ce:	463a      	mov	r2, r7
 80018d0:	4630      	mov	r0, r6
 80018d2:	f7ff ffda 	bl	800188a <__sfputc_r>
 80018d6:	1c43      	adds	r3, r0, #1
 80018d8:	d1f3      	bne.n	80018c2 <__sfputs_r+0xa>
 80018da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018dc <_vfiprintf_r>:
 80018dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e0:	460d      	mov	r5, r1
 80018e2:	b09d      	sub	sp, #116	@ 0x74
 80018e4:	4614      	mov	r4, r2
 80018e6:	4698      	mov	r8, r3
 80018e8:	4606      	mov	r6, r0
 80018ea:	b118      	cbz	r0, 80018f4 <_vfiprintf_r+0x18>
 80018ec:	6a03      	ldr	r3, [r0, #32]
 80018ee:	b90b      	cbnz	r3, 80018f4 <_vfiprintf_r+0x18>
 80018f0:	f7ff ff4e 	bl	8001790 <__sinit>
 80018f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80018f6:	07d9      	lsls	r1, r3, #31
 80018f8:	d405      	bmi.n	8001906 <_vfiprintf_r+0x2a>
 80018fa:	89ab      	ldrh	r3, [r5, #12]
 80018fc:	059a      	lsls	r2, r3, #22
 80018fe:	d402      	bmi.n	8001906 <_vfiprintf_r+0x2a>
 8001900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001902:	f7ff ffc0 	bl	8001886 <__retarget_lock_acquire_recursive>
 8001906:	89ab      	ldrh	r3, [r5, #12]
 8001908:	071b      	lsls	r3, r3, #28
 800190a:	d501      	bpl.n	8001910 <_vfiprintf_r+0x34>
 800190c:	692b      	ldr	r3, [r5, #16]
 800190e:	b99b      	cbnz	r3, 8001938 <_vfiprintf_r+0x5c>
 8001910:	4629      	mov	r1, r5
 8001912:	4630      	mov	r0, r6
 8001914:	f000 fc64 	bl	80021e0 <__swsetup_r>
 8001918:	b170      	cbz	r0, 8001938 <_vfiprintf_r+0x5c>
 800191a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800191c:	07dc      	lsls	r4, r3, #31
 800191e:	d504      	bpl.n	800192a <_vfiprintf_r+0x4e>
 8001920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001924:	b01d      	add	sp, #116	@ 0x74
 8001926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800192a:	89ab      	ldrh	r3, [r5, #12]
 800192c:	0598      	lsls	r0, r3, #22
 800192e:	d4f7      	bmi.n	8001920 <_vfiprintf_r+0x44>
 8001930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001932:	f7ff ffa9 	bl	8001888 <__retarget_lock_release_recursive>
 8001936:	e7f3      	b.n	8001920 <_vfiprintf_r+0x44>
 8001938:	2300      	movs	r3, #0
 800193a:	9309      	str	r3, [sp, #36]	@ 0x24
 800193c:	2320      	movs	r3, #32
 800193e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001942:	f8cd 800c 	str.w	r8, [sp, #12]
 8001946:	2330      	movs	r3, #48	@ 0x30
 8001948:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001af8 <_vfiprintf_r+0x21c>
 800194c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001950:	f04f 0901 	mov.w	r9, #1
 8001954:	4623      	mov	r3, r4
 8001956:	469a      	mov	sl, r3
 8001958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800195c:	b10a      	cbz	r2, 8001962 <_vfiprintf_r+0x86>
 800195e:	2a25      	cmp	r2, #37	@ 0x25
 8001960:	d1f9      	bne.n	8001956 <_vfiprintf_r+0x7a>
 8001962:	ebba 0b04 	subs.w	fp, sl, r4
 8001966:	d00b      	beq.n	8001980 <_vfiprintf_r+0xa4>
 8001968:	465b      	mov	r3, fp
 800196a:	4622      	mov	r2, r4
 800196c:	4629      	mov	r1, r5
 800196e:	4630      	mov	r0, r6
 8001970:	f7ff ffa2 	bl	80018b8 <__sfputs_r>
 8001974:	3001      	adds	r0, #1
 8001976:	f000 80a7 	beq.w	8001ac8 <_vfiprintf_r+0x1ec>
 800197a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800197c:	445a      	add	r2, fp
 800197e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001980:	f89a 3000 	ldrb.w	r3, [sl]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 809f 	beq.w	8001ac8 <_vfiprintf_r+0x1ec>
 800198a:	2300      	movs	r3, #0
 800198c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001994:	f10a 0a01 	add.w	sl, sl, #1
 8001998:	9304      	str	r3, [sp, #16]
 800199a:	9307      	str	r3, [sp, #28]
 800199c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80019a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80019a2:	4654      	mov	r4, sl
 80019a4:	2205      	movs	r2, #5
 80019a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019aa:	4853      	ldr	r0, [pc, #332]	@ (8001af8 <_vfiprintf_r+0x21c>)
 80019ac:	f7fe fc20 	bl	80001f0 <memchr>
 80019b0:	9a04      	ldr	r2, [sp, #16]
 80019b2:	b9d8      	cbnz	r0, 80019ec <_vfiprintf_r+0x110>
 80019b4:	06d1      	lsls	r1, r2, #27
 80019b6:	bf44      	itt	mi
 80019b8:	2320      	movmi	r3, #32
 80019ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019be:	0713      	lsls	r3, r2, #28
 80019c0:	bf44      	itt	mi
 80019c2:	232b      	movmi	r3, #43	@ 0x2b
 80019c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019c8:	f89a 3000 	ldrb.w	r3, [sl]
 80019cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80019ce:	d015      	beq.n	80019fc <_vfiprintf_r+0x120>
 80019d0:	9a07      	ldr	r2, [sp, #28]
 80019d2:	4654      	mov	r4, sl
 80019d4:	2000      	movs	r0, #0
 80019d6:	f04f 0c0a 	mov.w	ip, #10
 80019da:	4621      	mov	r1, r4
 80019dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019e0:	3b30      	subs	r3, #48	@ 0x30
 80019e2:	2b09      	cmp	r3, #9
 80019e4:	d94b      	bls.n	8001a7e <_vfiprintf_r+0x1a2>
 80019e6:	b1b0      	cbz	r0, 8001a16 <_vfiprintf_r+0x13a>
 80019e8:	9207      	str	r2, [sp, #28]
 80019ea:	e014      	b.n	8001a16 <_vfiprintf_r+0x13a>
 80019ec:	eba0 0308 	sub.w	r3, r0, r8
 80019f0:	fa09 f303 	lsl.w	r3, r9, r3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	9304      	str	r3, [sp, #16]
 80019f8:	46a2      	mov	sl, r4
 80019fa:	e7d2      	b.n	80019a2 <_vfiprintf_r+0xc6>
 80019fc:	9b03      	ldr	r3, [sp, #12]
 80019fe:	1d19      	adds	r1, r3, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	9103      	str	r1, [sp, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bfbb      	ittet	lt
 8001a08:	425b      	neglt	r3, r3
 8001a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8001a0e:	9307      	strge	r3, [sp, #28]
 8001a10:	9307      	strlt	r3, [sp, #28]
 8001a12:	bfb8      	it	lt
 8001a14:	9204      	strlt	r2, [sp, #16]
 8001a16:	7823      	ldrb	r3, [r4, #0]
 8001a18:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a1a:	d10a      	bne.n	8001a32 <_vfiprintf_r+0x156>
 8001a1c:	7863      	ldrb	r3, [r4, #1]
 8001a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a20:	d132      	bne.n	8001a88 <_vfiprintf_r+0x1ac>
 8001a22:	9b03      	ldr	r3, [sp, #12]
 8001a24:	1d1a      	adds	r2, r3, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	9203      	str	r2, [sp, #12]
 8001a2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a2e:	3402      	adds	r4, #2
 8001a30:	9305      	str	r3, [sp, #20]
 8001a32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001b08 <_vfiprintf_r+0x22c>
 8001a36:	7821      	ldrb	r1, [r4, #0]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	4650      	mov	r0, sl
 8001a3c:	f7fe fbd8 	bl	80001f0 <memchr>
 8001a40:	b138      	cbz	r0, 8001a52 <_vfiprintf_r+0x176>
 8001a42:	9b04      	ldr	r3, [sp, #16]
 8001a44:	eba0 000a 	sub.w	r0, r0, sl
 8001a48:	2240      	movs	r2, #64	@ 0x40
 8001a4a:	4082      	lsls	r2, r0
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	3401      	adds	r4, #1
 8001a50:	9304      	str	r3, [sp, #16]
 8001a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a56:	4829      	ldr	r0, [pc, #164]	@ (8001afc <_vfiprintf_r+0x220>)
 8001a58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a5c:	2206      	movs	r2, #6
 8001a5e:	f7fe fbc7 	bl	80001f0 <memchr>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	d03f      	beq.n	8001ae6 <_vfiprintf_r+0x20a>
 8001a66:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <_vfiprintf_r+0x224>)
 8001a68:	bb1b      	cbnz	r3, 8001ab2 <_vfiprintf_r+0x1d6>
 8001a6a:	9b03      	ldr	r3, [sp, #12]
 8001a6c:	3307      	adds	r3, #7
 8001a6e:	f023 0307 	bic.w	r3, r3, #7
 8001a72:	3308      	adds	r3, #8
 8001a74:	9303      	str	r3, [sp, #12]
 8001a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a78:	443b      	add	r3, r7
 8001a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a7c:	e76a      	b.n	8001954 <_vfiprintf_r+0x78>
 8001a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a82:	460c      	mov	r4, r1
 8001a84:	2001      	movs	r0, #1
 8001a86:	e7a8      	b.n	80019da <_vfiprintf_r+0xfe>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	3401      	adds	r4, #1
 8001a8c:	9305      	str	r3, [sp, #20]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f04f 0c0a 	mov.w	ip, #10
 8001a94:	4620      	mov	r0, r4
 8001a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a9a:	3a30      	subs	r2, #48	@ 0x30
 8001a9c:	2a09      	cmp	r2, #9
 8001a9e:	d903      	bls.n	8001aa8 <_vfiprintf_r+0x1cc>
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0c6      	beq.n	8001a32 <_vfiprintf_r+0x156>
 8001aa4:	9105      	str	r1, [sp, #20]
 8001aa6:	e7c4      	b.n	8001a32 <_vfiprintf_r+0x156>
 8001aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001aac:	4604      	mov	r4, r0
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e7f0      	b.n	8001a94 <_vfiprintf_r+0x1b8>
 8001ab2:	ab03      	add	r3, sp, #12
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	462a      	mov	r2, r5
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <_vfiprintf_r+0x228>)
 8001aba:	a904      	add	r1, sp, #16
 8001abc:	4630      	mov	r0, r6
 8001abe:	f3af 8000 	nop.w
 8001ac2:	4607      	mov	r7, r0
 8001ac4:	1c78      	adds	r0, r7, #1
 8001ac6:	d1d6      	bne.n	8001a76 <_vfiprintf_r+0x19a>
 8001ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001aca:	07d9      	lsls	r1, r3, #31
 8001acc:	d405      	bmi.n	8001ada <_vfiprintf_r+0x1fe>
 8001ace:	89ab      	ldrh	r3, [r5, #12]
 8001ad0:	059a      	lsls	r2, r3, #22
 8001ad2:	d402      	bmi.n	8001ada <_vfiprintf_r+0x1fe>
 8001ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ad6:	f7ff fed7 	bl	8001888 <__retarget_lock_release_recursive>
 8001ada:	89ab      	ldrh	r3, [r5, #12]
 8001adc:	065b      	lsls	r3, r3, #25
 8001ade:	f53f af1f 	bmi.w	8001920 <_vfiprintf_r+0x44>
 8001ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001ae4:	e71e      	b.n	8001924 <_vfiprintf_r+0x48>
 8001ae6:	ab03      	add	r3, sp, #12
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	462a      	mov	r2, r5
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <_vfiprintf_r+0x228>)
 8001aee:	a904      	add	r1, sp, #16
 8001af0:	4630      	mov	r0, r6
 8001af2:	f000 f91b 	bl	8001d2c <_printf_i>
 8001af6:	e7e4      	b.n	8001ac2 <_vfiprintf_r+0x1e6>
 8001af8:	08002560 	.word	0x08002560
 8001afc:	0800256a 	.word	0x0800256a
 8001b00:	00000000 	.word	0x00000000
 8001b04:	080018b9 	.word	0x080018b9
 8001b08:	08002566 	.word	0x08002566

08001b0c <sbrk_aligned>:
 8001b0c:	b570      	push	{r4, r5, r6, lr}
 8001b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8001b4c <sbrk_aligned+0x40>)
 8001b10:	460c      	mov	r4, r1
 8001b12:	6831      	ldr	r1, [r6, #0]
 8001b14:	4605      	mov	r5, r0
 8001b16:	b911      	cbnz	r1, 8001b1e <sbrk_aligned+0x12>
 8001b18:	f000 fc70 	bl	80023fc <_sbrk_r>
 8001b1c:	6030      	str	r0, [r6, #0]
 8001b1e:	4621      	mov	r1, r4
 8001b20:	4628      	mov	r0, r5
 8001b22:	f000 fc6b 	bl	80023fc <_sbrk_r>
 8001b26:	1c43      	adds	r3, r0, #1
 8001b28:	d103      	bne.n	8001b32 <sbrk_aligned+0x26>
 8001b2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001b2e:	4620      	mov	r0, r4
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
 8001b32:	1cc4      	adds	r4, r0, #3
 8001b34:	f024 0403 	bic.w	r4, r4, #3
 8001b38:	42a0      	cmp	r0, r4
 8001b3a:	d0f8      	beq.n	8001b2e <sbrk_aligned+0x22>
 8001b3c:	1a21      	subs	r1, r4, r0
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f000 fc5c 	bl	80023fc <_sbrk_r>
 8001b44:	3001      	adds	r0, #1
 8001b46:	d1f2      	bne.n	8001b2e <sbrk_aligned+0x22>
 8001b48:	e7ef      	b.n	8001b2a <sbrk_aligned+0x1e>
 8001b4a:	bf00      	nop
 8001b4c:	200001cc 	.word	0x200001cc

08001b50 <_malloc_r>:
 8001b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b54:	1ccd      	adds	r5, r1, #3
 8001b56:	f025 0503 	bic.w	r5, r5, #3
 8001b5a:	3508      	adds	r5, #8
 8001b5c:	2d0c      	cmp	r5, #12
 8001b5e:	bf38      	it	cc
 8001b60:	250c      	movcc	r5, #12
 8001b62:	2d00      	cmp	r5, #0
 8001b64:	4606      	mov	r6, r0
 8001b66:	db01      	blt.n	8001b6c <_malloc_r+0x1c>
 8001b68:	42a9      	cmp	r1, r5
 8001b6a:	d904      	bls.n	8001b76 <_malloc_r+0x26>
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	6033      	str	r3, [r6, #0]
 8001b70:	2000      	movs	r0, #0
 8001b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c4c <_malloc_r+0xfc>
 8001b7a:	f000 faa3 	bl	80020c4 <__malloc_lock>
 8001b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8001b82:	461c      	mov	r4, r3
 8001b84:	bb44      	cbnz	r4, 8001bd8 <_malloc_r+0x88>
 8001b86:	4629      	mov	r1, r5
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f7ff ffbf 	bl	8001b0c <sbrk_aligned>
 8001b8e:	1c43      	adds	r3, r0, #1
 8001b90:	4604      	mov	r4, r0
 8001b92:	d158      	bne.n	8001c46 <_malloc_r+0xf6>
 8001b94:	f8d8 4000 	ldr.w	r4, [r8]
 8001b98:	4627      	mov	r7, r4
 8001b9a:	2f00      	cmp	r7, #0
 8001b9c:	d143      	bne.n	8001c26 <_malloc_r+0xd6>
 8001b9e:	2c00      	cmp	r4, #0
 8001ba0:	d04b      	beq.n	8001c3a <_malloc_r+0xea>
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	4639      	mov	r1, r7
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	eb04 0903 	add.w	r9, r4, r3
 8001bac:	f000 fc26 	bl	80023fc <_sbrk_r>
 8001bb0:	4581      	cmp	r9, r0
 8001bb2:	d142      	bne.n	8001c3a <_malloc_r+0xea>
 8001bb4:	6821      	ldr	r1, [r4, #0]
 8001bb6:	1a6d      	subs	r5, r5, r1
 8001bb8:	4629      	mov	r1, r5
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f7ff ffa6 	bl	8001b0c <sbrk_aligned>
 8001bc0:	3001      	adds	r0, #1
 8001bc2:	d03a      	beq.n	8001c3a <_malloc_r+0xea>
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	442b      	add	r3, r5
 8001bc8:	6023      	str	r3, [r4, #0]
 8001bca:	f8d8 3000 	ldr.w	r3, [r8]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	bb62      	cbnz	r2, 8001c2c <_malloc_r+0xdc>
 8001bd2:	f8c8 7000 	str.w	r7, [r8]
 8001bd6:	e00f      	b.n	8001bf8 <_malloc_r+0xa8>
 8001bd8:	6822      	ldr	r2, [r4, #0]
 8001bda:	1b52      	subs	r2, r2, r5
 8001bdc:	d420      	bmi.n	8001c20 <_malloc_r+0xd0>
 8001bde:	2a0b      	cmp	r2, #11
 8001be0:	d917      	bls.n	8001c12 <_malloc_r+0xc2>
 8001be2:	1961      	adds	r1, r4, r5
 8001be4:	42a3      	cmp	r3, r4
 8001be6:	6025      	str	r5, [r4, #0]
 8001be8:	bf18      	it	ne
 8001bea:	6059      	strne	r1, [r3, #4]
 8001bec:	6863      	ldr	r3, [r4, #4]
 8001bee:	bf08      	it	eq
 8001bf0:	f8c8 1000 	streq.w	r1, [r8]
 8001bf4:	5162      	str	r2, [r4, r5]
 8001bf6:	604b      	str	r3, [r1, #4]
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	f000 fa69 	bl	80020d0 <__malloc_unlock>
 8001bfe:	f104 000b 	add.w	r0, r4, #11
 8001c02:	1d23      	adds	r3, r4, #4
 8001c04:	f020 0007 	bic.w	r0, r0, #7
 8001c08:	1ac2      	subs	r2, r0, r3
 8001c0a:	bf1c      	itt	ne
 8001c0c:	1a1b      	subne	r3, r3, r0
 8001c0e:	50a3      	strne	r3, [r4, r2]
 8001c10:	e7af      	b.n	8001b72 <_malloc_r+0x22>
 8001c12:	6862      	ldr	r2, [r4, #4]
 8001c14:	42a3      	cmp	r3, r4
 8001c16:	bf0c      	ite	eq
 8001c18:	f8c8 2000 	streq.w	r2, [r8]
 8001c1c:	605a      	strne	r2, [r3, #4]
 8001c1e:	e7eb      	b.n	8001bf8 <_malloc_r+0xa8>
 8001c20:	4623      	mov	r3, r4
 8001c22:	6864      	ldr	r4, [r4, #4]
 8001c24:	e7ae      	b.n	8001b84 <_malloc_r+0x34>
 8001c26:	463c      	mov	r4, r7
 8001c28:	687f      	ldr	r7, [r7, #4]
 8001c2a:	e7b6      	b.n	8001b9a <_malloc_r+0x4a>
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	42a3      	cmp	r3, r4
 8001c32:	d1fb      	bne.n	8001c2c <_malloc_r+0xdc>
 8001c34:	2300      	movs	r3, #0
 8001c36:	6053      	str	r3, [r2, #4]
 8001c38:	e7de      	b.n	8001bf8 <_malloc_r+0xa8>
 8001c3a:	230c      	movs	r3, #12
 8001c3c:	6033      	str	r3, [r6, #0]
 8001c3e:	4630      	mov	r0, r6
 8001c40:	f000 fa46 	bl	80020d0 <__malloc_unlock>
 8001c44:	e794      	b.n	8001b70 <_malloc_r+0x20>
 8001c46:	6005      	str	r5, [r0, #0]
 8001c48:	e7d6      	b.n	8001bf8 <_malloc_r+0xa8>
 8001c4a:	bf00      	nop
 8001c4c:	200001d0 	.word	0x200001d0

08001c50 <_printf_common>:
 8001c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c54:	4616      	mov	r6, r2
 8001c56:	4698      	mov	r8, r3
 8001c58:	688a      	ldr	r2, [r1, #8]
 8001c5a:	690b      	ldr	r3, [r1, #16]
 8001c5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001c60:	4293      	cmp	r3, r2
 8001c62:	bfb8      	it	lt
 8001c64:	4613      	movlt	r3, r2
 8001c66:	6033      	str	r3, [r6, #0]
 8001c68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001c6c:	4607      	mov	r7, r0
 8001c6e:	460c      	mov	r4, r1
 8001c70:	b10a      	cbz	r2, 8001c76 <_printf_common+0x26>
 8001c72:	3301      	adds	r3, #1
 8001c74:	6033      	str	r3, [r6, #0]
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	0699      	lsls	r1, r3, #26
 8001c7a:	bf42      	ittt	mi
 8001c7c:	6833      	ldrmi	r3, [r6, #0]
 8001c7e:	3302      	addmi	r3, #2
 8001c80:	6033      	strmi	r3, [r6, #0]
 8001c82:	6825      	ldr	r5, [r4, #0]
 8001c84:	f015 0506 	ands.w	r5, r5, #6
 8001c88:	d106      	bne.n	8001c98 <_printf_common+0x48>
 8001c8a:	f104 0a19 	add.w	sl, r4, #25
 8001c8e:	68e3      	ldr	r3, [r4, #12]
 8001c90:	6832      	ldr	r2, [r6, #0]
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	42ab      	cmp	r3, r5
 8001c96:	dc26      	bgt.n	8001ce6 <_printf_common+0x96>
 8001c98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001c9c:	6822      	ldr	r2, [r4, #0]
 8001c9e:	3b00      	subs	r3, #0
 8001ca0:	bf18      	it	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	0692      	lsls	r2, r2, #26
 8001ca6:	d42b      	bmi.n	8001d00 <_printf_common+0xb0>
 8001ca8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001cac:	4641      	mov	r1, r8
 8001cae:	4638      	mov	r0, r7
 8001cb0:	47c8      	blx	r9
 8001cb2:	3001      	adds	r0, #1
 8001cb4:	d01e      	beq.n	8001cf4 <_printf_common+0xa4>
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	6922      	ldr	r2, [r4, #16]
 8001cba:	f003 0306 	and.w	r3, r3, #6
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf02      	ittt	eq
 8001cc2:	68e5      	ldreq	r5, [r4, #12]
 8001cc4:	6833      	ldreq	r3, [r6, #0]
 8001cc6:	1aed      	subeq	r5, r5, r3
 8001cc8:	68a3      	ldr	r3, [r4, #8]
 8001cca:	bf0c      	ite	eq
 8001ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001cd0:	2500      	movne	r5, #0
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	bfc4      	itt	gt
 8001cd6:	1a9b      	subgt	r3, r3, r2
 8001cd8:	18ed      	addgt	r5, r5, r3
 8001cda:	2600      	movs	r6, #0
 8001cdc:	341a      	adds	r4, #26
 8001cde:	42b5      	cmp	r5, r6
 8001ce0:	d11a      	bne.n	8001d18 <_printf_common+0xc8>
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	e008      	b.n	8001cf8 <_printf_common+0xa8>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	4652      	mov	r2, sl
 8001cea:	4641      	mov	r1, r8
 8001cec:	4638      	mov	r0, r7
 8001cee:	47c8      	blx	r9
 8001cf0:	3001      	adds	r0, #1
 8001cf2:	d103      	bne.n	8001cfc <_printf_common+0xac>
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cfc:	3501      	adds	r5, #1
 8001cfe:	e7c6      	b.n	8001c8e <_printf_common+0x3e>
 8001d00:	18e1      	adds	r1, r4, r3
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	2030      	movs	r0, #48	@ 0x30
 8001d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d0a:	4422      	add	r2, r4
 8001d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d14:	3302      	adds	r3, #2
 8001d16:	e7c7      	b.n	8001ca8 <_printf_common+0x58>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	4641      	mov	r1, r8
 8001d1e:	4638      	mov	r0, r7
 8001d20:	47c8      	blx	r9
 8001d22:	3001      	adds	r0, #1
 8001d24:	d0e6      	beq.n	8001cf4 <_printf_common+0xa4>
 8001d26:	3601      	adds	r6, #1
 8001d28:	e7d9      	b.n	8001cde <_printf_common+0x8e>
	...

08001d2c <_printf_i>:
 8001d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d30:	7e0f      	ldrb	r7, [r1, #24]
 8001d32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001d34:	2f78      	cmp	r7, #120	@ 0x78
 8001d36:	4691      	mov	r9, r2
 8001d38:	4680      	mov	r8, r0
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001d42:	d807      	bhi.n	8001d54 <_printf_i+0x28>
 8001d44:	2f62      	cmp	r7, #98	@ 0x62
 8001d46:	d80a      	bhi.n	8001d5e <_printf_i+0x32>
 8001d48:	2f00      	cmp	r7, #0
 8001d4a:	f000 80d2 	beq.w	8001ef2 <_printf_i+0x1c6>
 8001d4e:	2f58      	cmp	r7, #88	@ 0x58
 8001d50:	f000 80b9 	beq.w	8001ec6 <_printf_i+0x19a>
 8001d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001d5c:	e03a      	b.n	8001dd4 <_printf_i+0xa8>
 8001d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001d62:	2b15      	cmp	r3, #21
 8001d64:	d8f6      	bhi.n	8001d54 <_printf_i+0x28>
 8001d66:	a101      	add	r1, pc, #4	@ (adr r1, 8001d6c <_printf_i+0x40>)
 8001d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d6c:	08001dc5 	.word	0x08001dc5
 8001d70:	08001dd9 	.word	0x08001dd9
 8001d74:	08001d55 	.word	0x08001d55
 8001d78:	08001d55 	.word	0x08001d55
 8001d7c:	08001d55 	.word	0x08001d55
 8001d80:	08001d55 	.word	0x08001d55
 8001d84:	08001dd9 	.word	0x08001dd9
 8001d88:	08001d55 	.word	0x08001d55
 8001d8c:	08001d55 	.word	0x08001d55
 8001d90:	08001d55 	.word	0x08001d55
 8001d94:	08001d55 	.word	0x08001d55
 8001d98:	08001ed9 	.word	0x08001ed9
 8001d9c:	08001e03 	.word	0x08001e03
 8001da0:	08001e93 	.word	0x08001e93
 8001da4:	08001d55 	.word	0x08001d55
 8001da8:	08001d55 	.word	0x08001d55
 8001dac:	08001efb 	.word	0x08001efb
 8001db0:	08001d55 	.word	0x08001d55
 8001db4:	08001e03 	.word	0x08001e03
 8001db8:	08001d55 	.word	0x08001d55
 8001dbc:	08001d55 	.word	0x08001d55
 8001dc0:	08001e9b 	.word	0x08001e9b
 8001dc4:	6833      	ldr	r3, [r6, #0]
 8001dc6:	1d1a      	adds	r2, r3, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6032      	str	r2, [r6, #0]
 8001dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e09d      	b.n	8001f14 <_printf_i+0x1e8>
 8001dd8:	6833      	ldr	r3, [r6, #0]
 8001dda:	6820      	ldr	r0, [r4, #0]
 8001ddc:	1d19      	adds	r1, r3, #4
 8001dde:	6031      	str	r1, [r6, #0]
 8001de0:	0606      	lsls	r6, r0, #24
 8001de2:	d501      	bpl.n	8001de8 <_printf_i+0xbc>
 8001de4:	681d      	ldr	r5, [r3, #0]
 8001de6:	e003      	b.n	8001df0 <_printf_i+0xc4>
 8001de8:	0645      	lsls	r5, r0, #25
 8001dea:	d5fb      	bpl.n	8001de4 <_printf_i+0xb8>
 8001dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001df0:	2d00      	cmp	r5, #0
 8001df2:	da03      	bge.n	8001dfc <_printf_i+0xd0>
 8001df4:	232d      	movs	r3, #45	@ 0x2d
 8001df6:	426d      	negs	r5, r5
 8001df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001dfc:	4859      	ldr	r0, [pc, #356]	@ (8001f64 <_printf_i+0x238>)
 8001dfe:	230a      	movs	r3, #10
 8001e00:	e011      	b.n	8001e26 <_printf_i+0xfa>
 8001e02:	6821      	ldr	r1, [r4, #0]
 8001e04:	6833      	ldr	r3, [r6, #0]
 8001e06:	0608      	lsls	r0, r1, #24
 8001e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e0c:	d402      	bmi.n	8001e14 <_printf_i+0xe8>
 8001e0e:	0649      	lsls	r1, r1, #25
 8001e10:	bf48      	it	mi
 8001e12:	b2ad      	uxthmi	r5, r5
 8001e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e16:	4853      	ldr	r0, [pc, #332]	@ (8001f64 <_printf_i+0x238>)
 8001e18:	6033      	str	r3, [r6, #0]
 8001e1a:	bf14      	ite	ne
 8001e1c:	230a      	movne	r3, #10
 8001e1e:	2308      	moveq	r3, #8
 8001e20:	2100      	movs	r1, #0
 8001e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e26:	6866      	ldr	r6, [r4, #4]
 8001e28:	60a6      	str	r6, [r4, #8]
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	bfa2      	ittt	ge
 8001e2e:	6821      	ldrge	r1, [r4, #0]
 8001e30:	f021 0104 	bicge.w	r1, r1, #4
 8001e34:	6021      	strge	r1, [r4, #0]
 8001e36:	b90d      	cbnz	r5, 8001e3c <_printf_i+0x110>
 8001e38:	2e00      	cmp	r6, #0
 8001e3a:	d04b      	beq.n	8001ed4 <_printf_i+0x1a8>
 8001e3c:	4616      	mov	r6, r2
 8001e3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001e42:	fb03 5711 	mls	r7, r3, r1, r5
 8001e46:	5dc7      	ldrb	r7, [r0, r7]
 8001e48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001e4c:	462f      	mov	r7, r5
 8001e4e:	42bb      	cmp	r3, r7
 8001e50:	460d      	mov	r5, r1
 8001e52:	d9f4      	bls.n	8001e3e <_printf_i+0x112>
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d10b      	bne.n	8001e70 <_printf_i+0x144>
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	07df      	lsls	r7, r3, #31
 8001e5c:	d508      	bpl.n	8001e70 <_printf_i+0x144>
 8001e5e:	6923      	ldr	r3, [r4, #16]
 8001e60:	6861      	ldr	r1, [r4, #4]
 8001e62:	4299      	cmp	r1, r3
 8001e64:	bfde      	ittt	le
 8001e66:	2330      	movle	r3, #48	@ 0x30
 8001e68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001e6c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001e70:	1b92      	subs	r2, r2, r6
 8001e72:	6122      	str	r2, [r4, #16]
 8001e74:	f8cd a000 	str.w	sl, [sp]
 8001e78:	464b      	mov	r3, r9
 8001e7a:	aa03      	add	r2, sp, #12
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	4640      	mov	r0, r8
 8001e80:	f7ff fee6 	bl	8001c50 <_printf_common>
 8001e84:	3001      	adds	r0, #1
 8001e86:	d14a      	bne.n	8001f1e <_printf_i+0x1f2>
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e8c:	b004      	add	sp, #16
 8001e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	f043 0320 	orr.w	r3, r3, #32
 8001e98:	6023      	str	r3, [r4, #0]
 8001e9a:	4833      	ldr	r0, [pc, #204]	@ (8001f68 <_printf_i+0x23c>)
 8001e9c:	2778      	movs	r7, #120	@ 0x78
 8001e9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	6831      	ldr	r1, [r6, #0]
 8001ea6:	061f      	lsls	r7, r3, #24
 8001ea8:	f851 5b04 	ldr.w	r5, [r1], #4
 8001eac:	d402      	bmi.n	8001eb4 <_printf_i+0x188>
 8001eae:	065f      	lsls	r7, r3, #25
 8001eb0:	bf48      	it	mi
 8001eb2:	b2ad      	uxthmi	r5, r5
 8001eb4:	6031      	str	r1, [r6, #0]
 8001eb6:	07d9      	lsls	r1, r3, #31
 8001eb8:	bf44      	itt	mi
 8001eba:	f043 0320 	orrmi.w	r3, r3, #32
 8001ebe:	6023      	strmi	r3, [r4, #0]
 8001ec0:	b11d      	cbz	r5, 8001eca <_printf_i+0x19e>
 8001ec2:	2310      	movs	r3, #16
 8001ec4:	e7ac      	b.n	8001e20 <_printf_i+0xf4>
 8001ec6:	4827      	ldr	r0, [pc, #156]	@ (8001f64 <_printf_i+0x238>)
 8001ec8:	e7e9      	b.n	8001e9e <_printf_i+0x172>
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	f023 0320 	bic.w	r3, r3, #32
 8001ed0:	6023      	str	r3, [r4, #0]
 8001ed2:	e7f6      	b.n	8001ec2 <_printf_i+0x196>
 8001ed4:	4616      	mov	r6, r2
 8001ed6:	e7bd      	b.n	8001e54 <_printf_i+0x128>
 8001ed8:	6833      	ldr	r3, [r6, #0]
 8001eda:	6825      	ldr	r5, [r4, #0]
 8001edc:	6961      	ldr	r1, [r4, #20]
 8001ede:	1d18      	adds	r0, r3, #4
 8001ee0:	6030      	str	r0, [r6, #0]
 8001ee2:	062e      	lsls	r6, r5, #24
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	d501      	bpl.n	8001eec <_printf_i+0x1c0>
 8001ee8:	6019      	str	r1, [r3, #0]
 8001eea:	e002      	b.n	8001ef2 <_printf_i+0x1c6>
 8001eec:	0668      	lsls	r0, r5, #25
 8001eee:	d5fb      	bpl.n	8001ee8 <_printf_i+0x1bc>
 8001ef0:	8019      	strh	r1, [r3, #0]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	6123      	str	r3, [r4, #16]
 8001ef6:	4616      	mov	r6, r2
 8001ef8:	e7bc      	b.n	8001e74 <_printf_i+0x148>
 8001efa:	6833      	ldr	r3, [r6, #0]
 8001efc:	1d1a      	adds	r2, r3, #4
 8001efe:	6032      	str	r2, [r6, #0]
 8001f00:	681e      	ldr	r6, [r3, #0]
 8001f02:	6862      	ldr	r2, [r4, #4]
 8001f04:	2100      	movs	r1, #0
 8001f06:	4630      	mov	r0, r6
 8001f08:	f7fe f972 	bl	80001f0 <memchr>
 8001f0c:	b108      	cbz	r0, 8001f12 <_printf_i+0x1e6>
 8001f0e:	1b80      	subs	r0, r0, r6
 8001f10:	6060      	str	r0, [r4, #4]
 8001f12:	6863      	ldr	r3, [r4, #4]
 8001f14:	6123      	str	r3, [r4, #16]
 8001f16:	2300      	movs	r3, #0
 8001f18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f1c:	e7aa      	b.n	8001e74 <_printf_i+0x148>
 8001f1e:	6923      	ldr	r3, [r4, #16]
 8001f20:	4632      	mov	r2, r6
 8001f22:	4649      	mov	r1, r9
 8001f24:	4640      	mov	r0, r8
 8001f26:	47d0      	blx	sl
 8001f28:	3001      	adds	r0, #1
 8001f2a:	d0ad      	beq.n	8001e88 <_printf_i+0x15c>
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	079b      	lsls	r3, r3, #30
 8001f30:	d413      	bmi.n	8001f5a <_printf_i+0x22e>
 8001f32:	68e0      	ldr	r0, [r4, #12]
 8001f34:	9b03      	ldr	r3, [sp, #12]
 8001f36:	4298      	cmp	r0, r3
 8001f38:	bfb8      	it	lt
 8001f3a:	4618      	movlt	r0, r3
 8001f3c:	e7a6      	b.n	8001e8c <_printf_i+0x160>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	4632      	mov	r2, r6
 8001f42:	4649      	mov	r1, r9
 8001f44:	4640      	mov	r0, r8
 8001f46:	47d0      	blx	sl
 8001f48:	3001      	adds	r0, #1
 8001f4a:	d09d      	beq.n	8001e88 <_printf_i+0x15c>
 8001f4c:	3501      	adds	r5, #1
 8001f4e:	68e3      	ldr	r3, [r4, #12]
 8001f50:	9903      	ldr	r1, [sp, #12]
 8001f52:	1a5b      	subs	r3, r3, r1
 8001f54:	42ab      	cmp	r3, r5
 8001f56:	dcf2      	bgt.n	8001f3e <_printf_i+0x212>
 8001f58:	e7eb      	b.n	8001f32 <_printf_i+0x206>
 8001f5a:	2500      	movs	r5, #0
 8001f5c:	f104 0619 	add.w	r6, r4, #25
 8001f60:	e7f5      	b.n	8001f4e <_printf_i+0x222>
 8001f62:	bf00      	nop
 8001f64:	08002571 	.word	0x08002571
 8001f68:	08002582 	.word	0x08002582

08001f6c <__sflush_r>:
 8001f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f74:	0716      	lsls	r6, r2, #28
 8001f76:	4605      	mov	r5, r0
 8001f78:	460c      	mov	r4, r1
 8001f7a:	d454      	bmi.n	8002026 <__sflush_r+0xba>
 8001f7c:	684b      	ldr	r3, [r1, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	dc02      	bgt.n	8001f88 <__sflush_r+0x1c>
 8001f82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	dd48      	ble.n	800201a <__sflush_r+0xae>
 8001f88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001f8a:	2e00      	cmp	r6, #0
 8001f8c:	d045      	beq.n	800201a <__sflush_r+0xae>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001f94:	682f      	ldr	r7, [r5, #0]
 8001f96:	6a21      	ldr	r1, [r4, #32]
 8001f98:	602b      	str	r3, [r5, #0]
 8001f9a:	d030      	beq.n	8001ffe <__sflush_r+0x92>
 8001f9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001f9e:	89a3      	ldrh	r3, [r4, #12]
 8001fa0:	0759      	lsls	r1, r3, #29
 8001fa2:	d505      	bpl.n	8001fb0 <__sflush_r+0x44>
 8001fa4:	6863      	ldr	r3, [r4, #4]
 8001fa6:	1ad2      	subs	r2, r2, r3
 8001fa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001faa:	b10b      	cbz	r3, 8001fb0 <__sflush_r+0x44>
 8001fac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001fae:	1ad2      	subs	r2, r2, r3
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001fb4:	6a21      	ldr	r1, [r4, #32]
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	47b0      	blx	r6
 8001fba:	1c43      	adds	r3, r0, #1
 8001fbc:	89a3      	ldrh	r3, [r4, #12]
 8001fbe:	d106      	bne.n	8001fce <__sflush_r+0x62>
 8001fc0:	6829      	ldr	r1, [r5, #0]
 8001fc2:	291d      	cmp	r1, #29
 8001fc4:	d82b      	bhi.n	800201e <__sflush_r+0xb2>
 8001fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8002070 <__sflush_r+0x104>)
 8001fc8:	410a      	asrs	r2, r1
 8001fca:	07d6      	lsls	r6, r2, #31
 8001fcc:	d427      	bmi.n	800201e <__sflush_r+0xb2>
 8001fce:	2200      	movs	r2, #0
 8001fd0:	6062      	str	r2, [r4, #4]
 8001fd2:	04d9      	lsls	r1, r3, #19
 8001fd4:	6922      	ldr	r2, [r4, #16]
 8001fd6:	6022      	str	r2, [r4, #0]
 8001fd8:	d504      	bpl.n	8001fe4 <__sflush_r+0x78>
 8001fda:	1c42      	adds	r2, r0, #1
 8001fdc:	d101      	bne.n	8001fe2 <__sflush_r+0x76>
 8001fde:	682b      	ldr	r3, [r5, #0]
 8001fe0:	b903      	cbnz	r3, 8001fe4 <__sflush_r+0x78>
 8001fe2:	6560      	str	r0, [r4, #84]	@ 0x54
 8001fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001fe6:	602f      	str	r7, [r5, #0]
 8001fe8:	b1b9      	cbz	r1, 800201a <__sflush_r+0xae>
 8001fea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001fee:	4299      	cmp	r1, r3
 8001ff0:	d002      	beq.n	8001ff8 <__sflush_r+0x8c>
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	f000 fa24 	bl	8002440 <_free_r>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ffc:	e00d      	b.n	800201a <__sflush_r+0xae>
 8001ffe:	2301      	movs	r3, #1
 8002000:	4628      	mov	r0, r5
 8002002:	47b0      	blx	r6
 8002004:	4602      	mov	r2, r0
 8002006:	1c50      	adds	r0, r2, #1
 8002008:	d1c9      	bne.n	8001f9e <__sflush_r+0x32>
 800200a:	682b      	ldr	r3, [r5, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0c6      	beq.n	8001f9e <__sflush_r+0x32>
 8002010:	2b1d      	cmp	r3, #29
 8002012:	d001      	beq.n	8002018 <__sflush_r+0xac>
 8002014:	2b16      	cmp	r3, #22
 8002016:	d11e      	bne.n	8002056 <__sflush_r+0xea>
 8002018:	602f      	str	r7, [r5, #0]
 800201a:	2000      	movs	r0, #0
 800201c:	e022      	b.n	8002064 <__sflush_r+0xf8>
 800201e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002022:	b21b      	sxth	r3, r3
 8002024:	e01b      	b.n	800205e <__sflush_r+0xf2>
 8002026:	690f      	ldr	r7, [r1, #16]
 8002028:	2f00      	cmp	r7, #0
 800202a:	d0f6      	beq.n	800201a <__sflush_r+0xae>
 800202c:	0793      	lsls	r3, r2, #30
 800202e:	680e      	ldr	r6, [r1, #0]
 8002030:	bf08      	it	eq
 8002032:	694b      	ldreq	r3, [r1, #20]
 8002034:	600f      	str	r7, [r1, #0]
 8002036:	bf18      	it	ne
 8002038:	2300      	movne	r3, #0
 800203a:	eba6 0807 	sub.w	r8, r6, r7
 800203e:	608b      	str	r3, [r1, #8]
 8002040:	f1b8 0f00 	cmp.w	r8, #0
 8002044:	dde9      	ble.n	800201a <__sflush_r+0xae>
 8002046:	6a21      	ldr	r1, [r4, #32]
 8002048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800204a:	4643      	mov	r3, r8
 800204c:	463a      	mov	r2, r7
 800204e:	4628      	mov	r0, r5
 8002050:	47b0      	blx	r6
 8002052:	2800      	cmp	r0, #0
 8002054:	dc08      	bgt.n	8002068 <__sflush_r+0xfc>
 8002056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800205a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800205e:	81a3      	strh	r3, [r4, #12]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002068:	4407      	add	r7, r0
 800206a:	eba8 0800 	sub.w	r8, r8, r0
 800206e:	e7e7      	b.n	8002040 <__sflush_r+0xd4>
 8002070:	dfbffffe 	.word	0xdfbffffe

08002074 <_fflush_r>:
 8002074:	b538      	push	{r3, r4, r5, lr}
 8002076:	690b      	ldr	r3, [r1, #16]
 8002078:	4605      	mov	r5, r0
 800207a:	460c      	mov	r4, r1
 800207c:	b913      	cbnz	r3, 8002084 <_fflush_r+0x10>
 800207e:	2500      	movs	r5, #0
 8002080:	4628      	mov	r0, r5
 8002082:	bd38      	pop	{r3, r4, r5, pc}
 8002084:	b118      	cbz	r0, 800208e <_fflush_r+0x1a>
 8002086:	6a03      	ldr	r3, [r0, #32]
 8002088:	b90b      	cbnz	r3, 800208e <_fflush_r+0x1a>
 800208a:	f7ff fb81 	bl	8001790 <__sinit>
 800208e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f3      	beq.n	800207e <_fflush_r+0xa>
 8002096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002098:	07d0      	lsls	r0, r2, #31
 800209a:	d404      	bmi.n	80020a6 <_fflush_r+0x32>
 800209c:	0599      	lsls	r1, r3, #22
 800209e:	d402      	bmi.n	80020a6 <_fflush_r+0x32>
 80020a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020a2:	f7ff fbf0 	bl	8001886 <__retarget_lock_acquire_recursive>
 80020a6:	4628      	mov	r0, r5
 80020a8:	4621      	mov	r1, r4
 80020aa:	f7ff ff5f 	bl	8001f6c <__sflush_r>
 80020ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020b0:	07da      	lsls	r2, r3, #31
 80020b2:	4605      	mov	r5, r0
 80020b4:	d4e4      	bmi.n	8002080 <_fflush_r+0xc>
 80020b6:	89a3      	ldrh	r3, [r4, #12]
 80020b8:	059b      	lsls	r3, r3, #22
 80020ba:	d4e1      	bmi.n	8002080 <_fflush_r+0xc>
 80020bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020be:	f7ff fbe3 	bl	8001888 <__retarget_lock_release_recursive>
 80020c2:	e7dd      	b.n	8002080 <_fflush_r+0xc>

080020c4 <__malloc_lock>:
 80020c4:	4801      	ldr	r0, [pc, #4]	@ (80020cc <__malloc_lock+0x8>)
 80020c6:	f7ff bbde 	b.w	8001886 <__retarget_lock_acquire_recursive>
 80020ca:	bf00      	nop
 80020cc:	200001c8 	.word	0x200001c8

080020d0 <__malloc_unlock>:
 80020d0:	4801      	ldr	r0, [pc, #4]	@ (80020d8 <__malloc_unlock+0x8>)
 80020d2:	f7ff bbd9 	b.w	8001888 <__retarget_lock_release_recursive>
 80020d6:	bf00      	nop
 80020d8:	200001c8 	.word	0x200001c8

080020dc <__sread>:
 80020dc:	b510      	push	{r4, lr}
 80020de:	460c      	mov	r4, r1
 80020e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020e4:	f000 f978 	bl	80023d8 <_read_r>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	bfab      	itete	ge
 80020ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80020ee:	89a3      	ldrhlt	r3, [r4, #12]
 80020f0:	181b      	addge	r3, r3, r0
 80020f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80020f6:	bfac      	ite	ge
 80020f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80020fa:	81a3      	strhlt	r3, [r4, #12]
 80020fc:	bd10      	pop	{r4, pc}

080020fe <__swrite>:
 80020fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002102:	461f      	mov	r7, r3
 8002104:	898b      	ldrh	r3, [r1, #12]
 8002106:	05db      	lsls	r3, r3, #23
 8002108:	4605      	mov	r5, r0
 800210a:	460c      	mov	r4, r1
 800210c:	4616      	mov	r6, r2
 800210e:	d505      	bpl.n	800211c <__swrite+0x1e>
 8002110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002114:	2302      	movs	r3, #2
 8002116:	2200      	movs	r2, #0
 8002118:	f000 f94c 	bl	80023b4 <_lseek_r>
 800211c:	89a3      	ldrh	r3, [r4, #12]
 800211e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002126:	81a3      	strh	r3, [r4, #12]
 8002128:	4632      	mov	r2, r6
 800212a:	463b      	mov	r3, r7
 800212c:	4628      	mov	r0, r5
 800212e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002132:	f000 b973 	b.w	800241c <_write_r>

08002136 <__sseek>:
 8002136:	b510      	push	{r4, lr}
 8002138:	460c      	mov	r4, r1
 800213a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800213e:	f000 f939 	bl	80023b4 <_lseek_r>
 8002142:	1c43      	adds	r3, r0, #1
 8002144:	89a3      	ldrh	r3, [r4, #12]
 8002146:	bf15      	itete	ne
 8002148:	6560      	strne	r0, [r4, #84]	@ 0x54
 800214a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800214e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002152:	81a3      	strheq	r3, [r4, #12]
 8002154:	bf18      	it	ne
 8002156:	81a3      	strhne	r3, [r4, #12]
 8002158:	bd10      	pop	{r4, pc}

0800215a <__sclose>:
 800215a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800215e:	f000 b8f7 	b.w	8002350 <_close_r>

08002162 <__swbuf_r>:
 8002162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002164:	460e      	mov	r6, r1
 8002166:	4614      	mov	r4, r2
 8002168:	4605      	mov	r5, r0
 800216a:	b118      	cbz	r0, 8002174 <__swbuf_r+0x12>
 800216c:	6a03      	ldr	r3, [r0, #32]
 800216e:	b90b      	cbnz	r3, 8002174 <__swbuf_r+0x12>
 8002170:	f7ff fb0e 	bl	8001790 <__sinit>
 8002174:	69a3      	ldr	r3, [r4, #24]
 8002176:	60a3      	str	r3, [r4, #8]
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	071a      	lsls	r2, r3, #28
 800217c:	d501      	bpl.n	8002182 <__swbuf_r+0x20>
 800217e:	6923      	ldr	r3, [r4, #16]
 8002180:	b943      	cbnz	r3, 8002194 <__swbuf_r+0x32>
 8002182:	4621      	mov	r1, r4
 8002184:	4628      	mov	r0, r5
 8002186:	f000 f82b 	bl	80021e0 <__swsetup_r>
 800218a:	b118      	cbz	r0, 8002194 <__swbuf_r+0x32>
 800218c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002190:	4638      	mov	r0, r7
 8002192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	6922      	ldr	r2, [r4, #16]
 8002198:	1a98      	subs	r0, r3, r2
 800219a:	6963      	ldr	r3, [r4, #20]
 800219c:	b2f6      	uxtb	r6, r6
 800219e:	4283      	cmp	r3, r0
 80021a0:	4637      	mov	r7, r6
 80021a2:	dc05      	bgt.n	80021b0 <__swbuf_r+0x4e>
 80021a4:	4621      	mov	r1, r4
 80021a6:	4628      	mov	r0, r5
 80021a8:	f7ff ff64 	bl	8002074 <_fflush_r>
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d1ed      	bne.n	800218c <__swbuf_r+0x2a>
 80021b0:	68a3      	ldr	r3, [r4, #8]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	60a3      	str	r3, [r4, #8]
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	6022      	str	r2, [r4, #0]
 80021bc:	701e      	strb	r6, [r3, #0]
 80021be:	6962      	ldr	r2, [r4, #20]
 80021c0:	1c43      	adds	r3, r0, #1
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d004      	beq.n	80021d0 <__swbuf_r+0x6e>
 80021c6:	89a3      	ldrh	r3, [r4, #12]
 80021c8:	07db      	lsls	r3, r3, #31
 80021ca:	d5e1      	bpl.n	8002190 <__swbuf_r+0x2e>
 80021cc:	2e0a      	cmp	r6, #10
 80021ce:	d1df      	bne.n	8002190 <__swbuf_r+0x2e>
 80021d0:	4621      	mov	r1, r4
 80021d2:	4628      	mov	r0, r5
 80021d4:	f7ff ff4e 	bl	8002074 <_fflush_r>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d0d9      	beq.n	8002190 <__swbuf_r+0x2e>
 80021dc:	e7d6      	b.n	800218c <__swbuf_r+0x2a>
	...

080021e0 <__swsetup_r>:
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <__swsetup_r+0xa8>)
 80021e4:	4605      	mov	r5, r0
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	460c      	mov	r4, r1
 80021ea:	b118      	cbz	r0, 80021f4 <__swsetup_r+0x14>
 80021ec:	6a03      	ldr	r3, [r0, #32]
 80021ee:	b90b      	cbnz	r3, 80021f4 <__swsetup_r+0x14>
 80021f0:	f7ff face 	bl	8001790 <__sinit>
 80021f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021f8:	0719      	lsls	r1, r3, #28
 80021fa:	d422      	bmi.n	8002242 <__swsetup_r+0x62>
 80021fc:	06da      	lsls	r2, r3, #27
 80021fe:	d407      	bmi.n	8002210 <__swsetup_r+0x30>
 8002200:	2209      	movs	r2, #9
 8002202:	602a      	str	r2, [r5, #0]
 8002204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002208:	81a3      	strh	r3, [r4, #12]
 800220a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800220e:	e033      	b.n	8002278 <__swsetup_r+0x98>
 8002210:	0758      	lsls	r0, r3, #29
 8002212:	d512      	bpl.n	800223a <__swsetup_r+0x5a>
 8002214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002216:	b141      	cbz	r1, 800222a <__swsetup_r+0x4a>
 8002218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800221c:	4299      	cmp	r1, r3
 800221e:	d002      	beq.n	8002226 <__swsetup_r+0x46>
 8002220:	4628      	mov	r0, r5
 8002222:	f000 f90d 	bl	8002440 <_free_r>
 8002226:	2300      	movs	r3, #0
 8002228:	6363      	str	r3, [r4, #52]	@ 0x34
 800222a:	89a3      	ldrh	r3, [r4, #12]
 800222c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002230:	81a3      	strh	r3, [r4, #12]
 8002232:	2300      	movs	r3, #0
 8002234:	6063      	str	r3, [r4, #4]
 8002236:	6923      	ldr	r3, [r4, #16]
 8002238:	6023      	str	r3, [r4, #0]
 800223a:	89a3      	ldrh	r3, [r4, #12]
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	81a3      	strh	r3, [r4, #12]
 8002242:	6923      	ldr	r3, [r4, #16]
 8002244:	b94b      	cbnz	r3, 800225a <__swsetup_r+0x7a>
 8002246:	89a3      	ldrh	r3, [r4, #12]
 8002248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800224c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002250:	d003      	beq.n	800225a <__swsetup_r+0x7a>
 8002252:	4621      	mov	r1, r4
 8002254:	4628      	mov	r0, r5
 8002256:	f000 f83f 	bl	80022d8 <__smakebuf_r>
 800225a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800225e:	f013 0201 	ands.w	r2, r3, #1
 8002262:	d00a      	beq.n	800227a <__swsetup_r+0x9a>
 8002264:	2200      	movs	r2, #0
 8002266:	60a2      	str	r2, [r4, #8]
 8002268:	6962      	ldr	r2, [r4, #20]
 800226a:	4252      	negs	r2, r2
 800226c:	61a2      	str	r2, [r4, #24]
 800226e:	6922      	ldr	r2, [r4, #16]
 8002270:	b942      	cbnz	r2, 8002284 <__swsetup_r+0xa4>
 8002272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002276:	d1c5      	bne.n	8002204 <__swsetup_r+0x24>
 8002278:	bd38      	pop	{r3, r4, r5, pc}
 800227a:	0799      	lsls	r1, r3, #30
 800227c:	bf58      	it	pl
 800227e:	6962      	ldrpl	r2, [r4, #20]
 8002280:	60a2      	str	r2, [r4, #8]
 8002282:	e7f4      	b.n	800226e <__swsetup_r+0x8e>
 8002284:	2000      	movs	r0, #0
 8002286:	e7f7      	b.n	8002278 <__swsetup_r+0x98>
 8002288:	20000018 	.word	0x20000018

0800228c <__swhatbuf_r>:
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	460c      	mov	r4, r1
 8002290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002294:	2900      	cmp	r1, #0
 8002296:	b096      	sub	sp, #88	@ 0x58
 8002298:	4615      	mov	r5, r2
 800229a:	461e      	mov	r6, r3
 800229c:	da0d      	bge.n	80022ba <__swhatbuf_r+0x2e>
 800229e:	89a3      	ldrh	r3, [r4, #12]
 80022a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80022a4:	f04f 0100 	mov.w	r1, #0
 80022a8:	bf14      	ite	ne
 80022aa:	2340      	movne	r3, #64	@ 0x40
 80022ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80022b0:	2000      	movs	r0, #0
 80022b2:	6031      	str	r1, [r6, #0]
 80022b4:	602b      	str	r3, [r5, #0]
 80022b6:	b016      	add	sp, #88	@ 0x58
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
 80022ba:	466a      	mov	r2, sp
 80022bc:	f000 f858 	bl	8002370 <_fstat_r>
 80022c0:	2800      	cmp	r0, #0
 80022c2:	dbec      	blt.n	800229e <__swhatbuf_r+0x12>
 80022c4:	9901      	ldr	r1, [sp, #4]
 80022c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80022ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80022ce:	4259      	negs	r1, r3
 80022d0:	4159      	adcs	r1, r3
 80022d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022d6:	e7eb      	b.n	80022b0 <__swhatbuf_r+0x24>

080022d8 <__smakebuf_r>:
 80022d8:	898b      	ldrh	r3, [r1, #12]
 80022da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022dc:	079d      	lsls	r5, r3, #30
 80022de:	4606      	mov	r6, r0
 80022e0:	460c      	mov	r4, r1
 80022e2:	d507      	bpl.n	80022f4 <__smakebuf_r+0x1c>
 80022e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80022e8:	6023      	str	r3, [r4, #0]
 80022ea:	6123      	str	r3, [r4, #16]
 80022ec:	2301      	movs	r3, #1
 80022ee:	6163      	str	r3, [r4, #20]
 80022f0:	b003      	add	sp, #12
 80022f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f4:	ab01      	add	r3, sp, #4
 80022f6:	466a      	mov	r2, sp
 80022f8:	f7ff ffc8 	bl	800228c <__swhatbuf_r>
 80022fc:	9f00      	ldr	r7, [sp, #0]
 80022fe:	4605      	mov	r5, r0
 8002300:	4639      	mov	r1, r7
 8002302:	4630      	mov	r0, r6
 8002304:	f7ff fc24 	bl	8001b50 <_malloc_r>
 8002308:	b948      	cbnz	r0, 800231e <__smakebuf_r+0x46>
 800230a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800230e:	059a      	lsls	r2, r3, #22
 8002310:	d4ee      	bmi.n	80022f0 <__smakebuf_r+0x18>
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	81a3      	strh	r3, [r4, #12]
 800231c:	e7e2      	b.n	80022e4 <__smakebuf_r+0xc>
 800231e:	89a3      	ldrh	r3, [r4, #12]
 8002320:	6020      	str	r0, [r4, #0]
 8002322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002326:	81a3      	strh	r3, [r4, #12]
 8002328:	9b01      	ldr	r3, [sp, #4]
 800232a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800232e:	b15b      	cbz	r3, 8002348 <__smakebuf_r+0x70>
 8002330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002334:	4630      	mov	r0, r6
 8002336:	f000 f82d 	bl	8002394 <_isatty_r>
 800233a:	b128      	cbz	r0, 8002348 <__smakebuf_r+0x70>
 800233c:	89a3      	ldrh	r3, [r4, #12]
 800233e:	f023 0303 	bic.w	r3, r3, #3
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	81a3      	strh	r3, [r4, #12]
 8002348:	89a3      	ldrh	r3, [r4, #12]
 800234a:	431d      	orrs	r5, r3
 800234c:	81a5      	strh	r5, [r4, #12]
 800234e:	e7cf      	b.n	80022f0 <__smakebuf_r+0x18>

08002350 <_close_r>:
 8002350:	b538      	push	{r3, r4, r5, lr}
 8002352:	4d06      	ldr	r5, [pc, #24]	@ (800236c <_close_r+0x1c>)
 8002354:	2300      	movs	r3, #0
 8002356:	4604      	mov	r4, r0
 8002358:	4608      	mov	r0, r1
 800235a:	602b      	str	r3, [r5, #0]
 800235c:	f7fe f922 	bl	80005a4 <_close>
 8002360:	1c43      	adds	r3, r0, #1
 8002362:	d102      	bne.n	800236a <_close_r+0x1a>
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	b103      	cbz	r3, 800236a <_close_r+0x1a>
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	200001d4 	.word	0x200001d4

08002370 <_fstat_r>:
 8002370:	b538      	push	{r3, r4, r5, lr}
 8002372:	4d07      	ldr	r5, [pc, #28]	@ (8002390 <_fstat_r+0x20>)
 8002374:	2300      	movs	r3, #0
 8002376:	4604      	mov	r4, r0
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	602b      	str	r3, [r5, #0]
 800237e:	f7fe f91d 	bl	80005bc <_fstat>
 8002382:	1c43      	adds	r3, r0, #1
 8002384:	d102      	bne.n	800238c <_fstat_r+0x1c>
 8002386:	682b      	ldr	r3, [r5, #0]
 8002388:	b103      	cbz	r3, 800238c <_fstat_r+0x1c>
 800238a:	6023      	str	r3, [r4, #0]
 800238c:	bd38      	pop	{r3, r4, r5, pc}
 800238e:	bf00      	nop
 8002390:	200001d4 	.word	0x200001d4

08002394 <_isatty_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4d06      	ldr	r5, [pc, #24]	@ (80023b0 <_isatty_r+0x1c>)
 8002398:	2300      	movs	r3, #0
 800239a:	4604      	mov	r4, r0
 800239c:	4608      	mov	r0, r1
 800239e:	602b      	str	r3, [r5, #0]
 80023a0:	f7fe f91c 	bl	80005dc <_isatty>
 80023a4:	1c43      	adds	r3, r0, #1
 80023a6:	d102      	bne.n	80023ae <_isatty_r+0x1a>
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	b103      	cbz	r3, 80023ae <_isatty_r+0x1a>
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
 80023b0:	200001d4 	.word	0x200001d4

080023b4 <_lseek_r>:
 80023b4:	b538      	push	{r3, r4, r5, lr}
 80023b6:	4d07      	ldr	r5, [pc, #28]	@ (80023d4 <_lseek_r+0x20>)
 80023b8:	4604      	mov	r4, r0
 80023ba:	4608      	mov	r0, r1
 80023bc:	4611      	mov	r1, r2
 80023be:	2200      	movs	r2, #0
 80023c0:	602a      	str	r2, [r5, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	f7fe f915 	bl	80005f2 <_lseek>
 80023c8:	1c43      	adds	r3, r0, #1
 80023ca:	d102      	bne.n	80023d2 <_lseek_r+0x1e>
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	b103      	cbz	r3, 80023d2 <_lseek_r+0x1e>
 80023d0:	6023      	str	r3, [r4, #0]
 80023d2:	bd38      	pop	{r3, r4, r5, pc}
 80023d4:	200001d4 	.word	0x200001d4

080023d8 <_read_r>:
 80023d8:	b538      	push	{r3, r4, r5, lr}
 80023da:	4d07      	ldr	r5, [pc, #28]	@ (80023f8 <_read_r+0x20>)
 80023dc:	4604      	mov	r4, r0
 80023de:	4608      	mov	r0, r1
 80023e0:	4611      	mov	r1, r2
 80023e2:	2200      	movs	r2, #0
 80023e4:	602a      	str	r2, [r5, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f7fe f8a3 	bl	8000532 <_read>
 80023ec:	1c43      	adds	r3, r0, #1
 80023ee:	d102      	bne.n	80023f6 <_read_r+0x1e>
 80023f0:	682b      	ldr	r3, [r5, #0]
 80023f2:	b103      	cbz	r3, 80023f6 <_read_r+0x1e>
 80023f4:	6023      	str	r3, [r4, #0]
 80023f6:	bd38      	pop	{r3, r4, r5, pc}
 80023f8:	200001d4 	.word	0x200001d4

080023fc <_sbrk_r>:
 80023fc:	b538      	push	{r3, r4, r5, lr}
 80023fe:	4d06      	ldr	r5, [pc, #24]	@ (8002418 <_sbrk_r+0x1c>)
 8002400:	2300      	movs	r3, #0
 8002402:	4604      	mov	r4, r0
 8002404:	4608      	mov	r0, r1
 8002406:	602b      	str	r3, [r5, #0]
 8002408:	f7fe f900 	bl	800060c <_sbrk>
 800240c:	1c43      	adds	r3, r0, #1
 800240e:	d102      	bne.n	8002416 <_sbrk_r+0x1a>
 8002410:	682b      	ldr	r3, [r5, #0]
 8002412:	b103      	cbz	r3, 8002416 <_sbrk_r+0x1a>
 8002414:	6023      	str	r3, [r4, #0]
 8002416:	bd38      	pop	{r3, r4, r5, pc}
 8002418:	200001d4 	.word	0x200001d4

0800241c <_write_r>:
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	4d07      	ldr	r5, [pc, #28]	@ (800243c <_write_r+0x20>)
 8002420:	4604      	mov	r4, r0
 8002422:	4608      	mov	r0, r1
 8002424:	4611      	mov	r1, r2
 8002426:	2200      	movs	r2, #0
 8002428:	602a      	str	r2, [r5, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	f7fe f89e 	bl	800056c <_write>
 8002430:	1c43      	adds	r3, r0, #1
 8002432:	d102      	bne.n	800243a <_write_r+0x1e>
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	b103      	cbz	r3, 800243a <_write_r+0x1e>
 8002438:	6023      	str	r3, [r4, #0]
 800243a:	bd38      	pop	{r3, r4, r5, pc}
 800243c:	200001d4 	.word	0x200001d4

08002440 <_free_r>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	4605      	mov	r5, r0
 8002444:	2900      	cmp	r1, #0
 8002446:	d041      	beq.n	80024cc <_free_r+0x8c>
 8002448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800244c:	1f0c      	subs	r4, r1, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	bfb8      	it	lt
 8002452:	18e4      	addlt	r4, r4, r3
 8002454:	f7ff fe36 	bl	80020c4 <__malloc_lock>
 8002458:	4a1d      	ldr	r2, [pc, #116]	@ (80024d0 <_free_r+0x90>)
 800245a:	6813      	ldr	r3, [r2, #0]
 800245c:	b933      	cbnz	r3, 800246c <_free_r+0x2c>
 800245e:	6063      	str	r3, [r4, #4]
 8002460:	6014      	str	r4, [r2, #0]
 8002462:	4628      	mov	r0, r5
 8002464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002468:	f7ff be32 	b.w	80020d0 <__malloc_unlock>
 800246c:	42a3      	cmp	r3, r4
 800246e:	d908      	bls.n	8002482 <_free_r+0x42>
 8002470:	6820      	ldr	r0, [r4, #0]
 8002472:	1821      	adds	r1, r4, r0
 8002474:	428b      	cmp	r3, r1
 8002476:	bf01      	itttt	eq
 8002478:	6819      	ldreq	r1, [r3, #0]
 800247a:	685b      	ldreq	r3, [r3, #4]
 800247c:	1809      	addeq	r1, r1, r0
 800247e:	6021      	streq	r1, [r4, #0]
 8002480:	e7ed      	b.n	800245e <_free_r+0x1e>
 8002482:	461a      	mov	r2, r3
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	b10b      	cbz	r3, 800248c <_free_r+0x4c>
 8002488:	42a3      	cmp	r3, r4
 800248a:	d9fa      	bls.n	8002482 <_free_r+0x42>
 800248c:	6811      	ldr	r1, [r2, #0]
 800248e:	1850      	adds	r0, r2, r1
 8002490:	42a0      	cmp	r0, r4
 8002492:	d10b      	bne.n	80024ac <_free_r+0x6c>
 8002494:	6820      	ldr	r0, [r4, #0]
 8002496:	4401      	add	r1, r0
 8002498:	1850      	adds	r0, r2, r1
 800249a:	4283      	cmp	r3, r0
 800249c:	6011      	str	r1, [r2, #0]
 800249e:	d1e0      	bne.n	8002462 <_free_r+0x22>
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	6053      	str	r3, [r2, #4]
 80024a6:	4408      	add	r0, r1
 80024a8:	6010      	str	r0, [r2, #0]
 80024aa:	e7da      	b.n	8002462 <_free_r+0x22>
 80024ac:	d902      	bls.n	80024b4 <_free_r+0x74>
 80024ae:	230c      	movs	r3, #12
 80024b0:	602b      	str	r3, [r5, #0]
 80024b2:	e7d6      	b.n	8002462 <_free_r+0x22>
 80024b4:	6820      	ldr	r0, [r4, #0]
 80024b6:	1821      	adds	r1, r4, r0
 80024b8:	428b      	cmp	r3, r1
 80024ba:	bf04      	itt	eq
 80024bc:	6819      	ldreq	r1, [r3, #0]
 80024be:	685b      	ldreq	r3, [r3, #4]
 80024c0:	6063      	str	r3, [r4, #4]
 80024c2:	bf04      	itt	eq
 80024c4:	1809      	addeq	r1, r1, r0
 80024c6:	6021      	streq	r1, [r4, #0]
 80024c8:	6054      	str	r4, [r2, #4]
 80024ca:	e7ca      	b.n	8002462 <_free_r+0x22>
 80024cc:	bd38      	pop	{r3, r4, r5, pc}
 80024ce:	bf00      	nop
 80024d0:	200001d0 	.word	0x200001d0

080024d4 <_init>:
 80024d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d6:	bf00      	nop
 80024d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024da:	bc08      	pop	{r3}
 80024dc:	469e      	mov	lr, r3
 80024de:	4770      	bx	lr

080024e0 <_fini>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	bf00      	nop
 80024e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e6:	bc08      	pop	{r3}
 80024e8:	469e      	mov	lr, r3
 80024ea:	4770      	bx	lr
