
ATwo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080026a8  080026a8  000036a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002724  08002724  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002724  08002724  00003724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800272c  0800272c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800272c  0800272c  0000372c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002730  08002730  00003730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002734  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  0800279c  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  0800279c  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d6c  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012d9  00000000  00000000  00008e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0000a0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000047b  00000000  00000000  0000a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ca6  00000000  00000000  0000ab8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000065b1  00000000  00000000  00033831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4140  00000000  00000000  00039de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012df22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e0c  00000000  00000000  0012df68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0012fd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002690 	.word	0x08002690

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002690 	.word	0x08002690

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <Keypad_Init>:
uint8_t Keypad_CheckKeyPressed(uint8_t columnRowByte);



// Use to initialize Keypad GPIO and other funcitonality of keypad
void Keypad_Init(void){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	// configure GPIO pins PC0, PC1, PC2, PC3 for:
	// output mode, push-pull, no pull up or pull down, high speed
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 8000294:	4b1d      	ldr	r3, [pc, #116]	@ (800030c <Keypad_Init+0x7c>)
 8000296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000298:	4a1c      	ldr	r2, [pc, #112]	@ (800030c <Keypad_Init+0x7c>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOC->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 );
 80002a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000310 <Keypad_Init+0x80>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000310 <Keypad_Init+0x80>)
 80002a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOC->MODER   |=  (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0);
 80002ac:	4b18      	ldr	r3, [pc, #96]	@ (8000310 <Keypad_Init+0x80>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a17      	ldr	r2, [pc, #92]	@ (8000310 <Keypad_Init+0x80>)
 80002b2:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80002b6:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 80002b8:	4b15      	ldr	r3, [pc, #84]	@ (8000310 <Keypad_Init+0x80>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a14      	ldr	r2, [pc, #80]	@ (8000310 <Keypad_Init+0x80>)
 80002be:	f023 030f 	bic.w	r3, r3, #15
 80002c2:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 80002c4:	4b12      	ldr	r3, [pc, #72]	@ (8000310 <Keypad_Init+0x80>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a11      	ldr	r2, [pc, #68]	@ (8000310 <Keypad_Init+0x80>)
 80002ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80002ce:	60d3      	str	r3, [r2, #12]
	GPIOC->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 80002d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000310 <Keypad_Init+0x80>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000310 <Keypad_Init+0x80>)
 80002d6:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 80002da:	6093      	str	r3, [r2, #8]
							  (3 << GPIO_OSPEEDR_OSPEED1_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED2_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED3_Pos));

	// configure GPIO pins PC4, PC5, PC6 for Input, with pull down
	GPIOC->MODER   &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 );
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <Keypad_Init+0x80>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000310 <Keypad_Init+0x80>)
 80002e2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80002e6:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD4_1 | GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1);
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <Keypad_Init+0x80>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a08      	ldr	r2, [pc, #32]	@ (8000310 <Keypad_Init+0x80>)
 80002ee:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 80002f2:	60d3      	str	r3, [r2, #12]


	 // preset PC0, PC1, PC2, PC3 to 0
	GPIOC->BRR |= (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 );
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <Keypad_Init+0x80>)
 80002f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002f8:	4a05      	ldr	r2, [pc, #20]	@ (8000310 <Keypad_Init+0x80>)
 80002fa:	f043 030f 	orr.w	r3, r3, #15
 80002fe:	6293      	str	r3, [r2, #40]	@ 0x28

}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000
 8000310:	48000800 	.word	0x48000800

08000314 <Keypad_CheckKeyPressed>:
 *                                       |_____| |_____|
 *                                        Row     Column
 *  BEWARNED: Row data is a standard integer, it counts up to 4,
 *  Column data is BITWISE!!!, bit 1 represents column 1, bit 2 column 2, etc
 */
uint8_t Keypad_CheckKeyPressed(uint8_t columnRowByte){
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]

	uint8_t var;

	switch (columnRowByte) {
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	3b01      	subs	r3, #1
 8000322:	2b1b      	cmp	r3, #27
 8000324:	d85e      	bhi.n	80003e4 <Keypad_CheckKeyPressed+0xd0>
 8000326:	a201      	add	r2, pc, #4	@ (adr r2, 800032c <Keypad_CheckKeyPressed+0x18>)
 8000328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032c:	0800039d 	.word	0x0800039d
 8000330:	080003a3 	.word	0x080003a3
 8000334:	080003e5 	.word	0x080003e5
 8000338:	080003a9 	.word	0x080003a9
 800033c:	080003e5 	.word	0x080003e5
 8000340:	080003e5 	.word	0x080003e5
 8000344:	080003e5 	.word	0x080003e5
 8000348:	080003e5 	.word	0x080003e5
 800034c:	080003af 	.word	0x080003af
 8000350:	080003b5 	.word	0x080003b5
 8000354:	080003e5 	.word	0x080003e5
 8000358:	080003bb 	.word	0x080003bb
 800035c:	080003e5 	.word	0x080003e5
 8000360:	080003e5 	.word	0x080003e5
 8000364:	080003e5 	.word	0x080003e5
 8000368:	080003e5 	.word	0x080003e5
 800036c:	080003c1 	.word	0x080003c1
 8000370:	080003c7 	.word	0x080003c7
 8000374:	080003e5 	.word	0x080003e5
 8000378:	080003cd 	.word	0x080003cd
 800037c:	080003e5 	.word	0x080003e5
 8000380:	080003e5 	.word	0x080003e5
 8000384:	080003e5 	.word	0x080003e5
 8000388:	080003e5 	.word	0x080003e5
 800038c:	080003d3 	.word	0x080003d3
 8000390:	080003d9 	.word	0x080003d9
 8000394:	080003e5 	.word	0x080003e5
 8000398:	080003df 	.word	0x080003df
	  case 0x01: //Column 1, Row 1
		  var = ('1');
 800039c:	2331      	movs	r3, #49	@ 0x31
 800039e:	73fb      	strb	r3, [r7, #15]
		  break;
 80003a0:	e023      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>
	  case 0x02: //Column 2, Row 1
		  var = ('2');
 80003a2:	2332      	movs	r3, #50	@ 0x32
 80003a4:	73fb      	strb	r3, [r7, #15]
		  break;
 80003a6:	e020      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>

	  case 0x04: //Column 3, Row 1
		  var = ('3');
 80003a8:	2333      	movs	r3, #51	@ 0x33
 80003aa:	73fb      	strb	r3, [r7, #15]
		  break;
 80003ac:	e01d      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>

	  case 0x09: //Column 1, Row 2
		  var = ('4');
 80003ae:	2334      	movs	r3, #52	@ 0x34
 80003b0:	73fb      	strb	r3, [r7, #15]
		  break;
 80003b2:	e01a      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>

	  case 0x0a: //Column 2, Row 2
		  var = ('5');
 80003b4:	2335      	movs	r3, #53	@ 0x35
 80003b6:	73fb      	strb	r3, [r7, #15]
		  break;
 80003b8:	e017      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>

	  case 0x0c: //Column 3, Row 2
		  var = ('6');
 80003ba:	2336      	movs	r3, #54	@ 0x36
 80003bc:	73fb      	strb	r3, [r7, #15]
		  break;
 80003be:	e014      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>

	  case 0x11: //Column 1, Row 3
		  var = ('7');
 80003c0:	2337      	movs	r3, #55	@ 0x37
 80003c2:	73fb      	strb	r3, [r7, #15]
		  break;
 80003c4:	e011      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>

	  case 0x12: //Column 2, Row 3
		  var = ('8');
 80003c6:	2338      	movs	r3, #56	@ 0x38
 80003c8:	73fb      	strb	r3, [r7, #15]
		  break;
 80003ca:	e00e      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>

	  case 0x14: //Column 2, Row 3
		  var = ('9');
 80003cc:	2339      	movs	r3, #57	@ 0x39
 80003ce:	73fb      	strb	r3, [r7, #15]
		  break;
 80003d0:	e00b      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>

	  case 0x19: //Column 1, Row 4
		  var = ('*');
 80003d2:	232a      	movs	r3, #42	@ 0x2a
 80003d4:	73fb      	strb	r3, [r7, #15]
		  break;
 80003d6:	e008      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>

	  case 0x1a: //Column 2, Row 4
		  var = ('0');
 80003d8:	2330      	movs	r3, #48	@ 0x30
 80003da:	73fb      	strb	r3, [r7, #15]
		  break;
 80003dc:	e005      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>

	  case 0x1c: //Column 3, Row 4
		  var = ('#');
 80003de:	2323      	movs	r3, #35	@ 0x23
 80003e0:	73fb      	strb	r3, [r7, #15]
		  break;
 80003e2:	e002      	b.n	80003ea <Keypad_CheckKeyPressed+0xd6>

	  default:
		  var = ('.'); //period for no press
 80003e4:	232e      	movs	r3, #46	@ 0x2e
 80003e6:	73fb      	strb	r3, [r7, #15]
		  break;
 80003e8:	bf00      	nop

	}

	return var;
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <Keypad_Read>:





uint8_t Keypad_Read(void){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
	int32_t keyChanges;
	uint8_t lastKeyPressed;
	uint8_t currentKeyPressed;


	for(int debounceRound = 0; debounceRound < DEBOUNCE_ELEMENTS; debounceRound++){
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	e033      	b.n	800046c <Keypad_Read+0x74>
		// Poll through 4 rows
		for(int polledRow = 0; polledRow < ROWS; polledRow++){
 8000404:	2300      	movs	r3, #0
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	e02a      	b.n	8000460 <Keypad_Read+0x68>

			//Enable current polled row
			GPIOC->ODR = (1 << polledRow);
 800040a:	2201      	movs	r2, #1
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	409a      	lsls	r2, r3
 8000410:	4b1d      	ldr	r3, [pc, #116]	@ (8000488 <Keypad_Read+0x90>)
 8000412:	615a      	str	r2, [r3, #20]
			//for (int i = 0; i < 10; i++);


			//printf("Pin currently high = %d \n", (GPIOC->IDR >> 4));

			columnRowByte = (polledRow<<3) | ((GPIOC->IDR >> 4));
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	b2da      	uxtb	r2, r3
 800041c:	4b1a      	ldr	r3, [pc, #104]	@ (8000488 <Keypad_Read+0x90>)
 800041e:	691b      	ldr	r3, [r3, #16]
 8000420:	091b      	lsrs	r3, r3, #4
 8000422:	b2db      	uxtb	r3, r3
 8000424:	4313      	orrs	r3, r2
 8000426:	71fb      	strb	r3, [r7, #7]

			if (Keypad_CheckKeyPressed(columnRowByte) != '.'){
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ff72 	bl	8000314 <Keypad_CheckKeyPressed>
 8000430:	4603      	mov	r3, r0
 8000432:	2b2e      	cmp	r3, #46	@ 0x2e
 8000434:	d005      	beq.n	8000442 <Keypad_Read+0x4a>
				currentKeyPressed = Keypad_CheckKeyPressed(columnRowByte);
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff6b 	bl	8000314 <Keypad_CheckKeyPressed>
 800043e:	4603      	mov	r3, r0
 8000440:	74bb      	strb	r3, [r7, #18]
			}

			if (lastKeyPressed != currentKeyPressed){
 8000442:	7cfa      	ldrb	r2, [r7, #19]
 8000444:	7cbb      	ldrb	r3, [r7, #18]
 8000446:	429a      	cmp	r2, r3
 8000448:	d003      	beq.n	8000452 <Keypad_Read+0x5a>
				keyChanges++;
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	3301      	adds	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	e001      	b.n	8000456 <Keypad_Read+0x5e>
			}
			else {
				keyChanges = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
			}

			lastKeyPressed = currentKeyPressed;
 8000456:	7cbb      	ldrb	r3, [r7, #18]
 8000458:	74fb      	strb	r3, [r7, #19]
		for(int polledRow = 0; polledRow < ROWS; polledRow++){
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	3301      	adds	r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	2b03      	cmp	r3, #3
 8000464:	ddd1      	ble.n	800040a <Keypad_Read+0x12>
	for(int debounceRound = 0; debounceRound < DEBOUNCE_ELEMENTS; debounceRound++){
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	3301      	adds	r3, #1
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	2b04      	cmp	r3, #4
 8000470:	ddc8      	ble.n	8000404 <Keypad_Read+0xc>
//			printf("%c \n", lastKeyPressed);

		}
	}

		return((keyChanges == 0) ? lastKeyPressed : '\0');
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d101      	bne.n	800047c <Keypad_Read+0x84>
 8000478:	7cfb      	ldrb	r3, [r7, #19]
 800047a:	e000      	b.n	800047e <Keypad_Read+0x86>
 800047c:	2300      	movs	r3, #0
		//return (Keypad_FindMostFrequentElement(debounceArray, DEBOUNCE_ELEMENTS));


}
 800047e:	4618      	mov	r0, r3
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	48000800 	.word	0x48000800

0800048c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000494:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000498:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d013      	beq.n	80004cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d00b      	beq.n	80004cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004b4:	e000      	b.n	80004b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f9      	beq.n	80004b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004cc:	687b      	ldr	r3, [r7, #4]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
	...

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// configure GPIO pins PD3, PD4, PD5, PD6 for:
	// output mode, push-pull, no pull up or pull down, high speed
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIODEN);
 80004e2:	4b29      	ldr	r3, [pc, #164]	@ (8000588 <main+0xac>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	4a28      	ldr	r2, [pc, #160]	@ (8000588 <main+0xac>)
 80004e8:	f043 0308 	orr.w	r3, r3, #8
 80004ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOD->MODER   &= ~(GPIO_MODER_MODE3 | GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 );
 80004ee:	4b27      	ldr	r3, [pc, #156]	@ (800058c <main+0xb0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a26      	ldr	r2, [pc, #152]	@ (800058c <main+0xb0>)
 80004f4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80004f8:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=  (GPIO_MODER_MODE3_0 | GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0);
 80004fa:	4b24      	ldr	r3, [pc, #144]	@ (800058c <main+0xb0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a23      	ldr	r2, [pc, #140]	@ (800058c <main+0xb0>)
 8000500:	f443 53aa 	orr.w	r3, r3, #5440	@ 0x1540
 8000504:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER  &= ~(GPIO_OTYPER_OT3 | GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6);
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <main+0xb0>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	4a20      	ldr	r2, [pc, #128]	@ (800058c <main+0xb0>)
 800050c:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8000510:	6053      	str	r3, [r2, #4]
	GPIOD->PUPDR   &= ~(GPIO_PUPDR_PUPD3 | GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6);
 8000512:	4b1e      	ldr	r3, [pc, #120]	@ (800058c <main+0xb0>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	4a1d      	ldr	r2, [pc, #116]	@ (800058c <main+0xb0>)
 8000518:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800051c:	60d3      	str	r3, [r2, #12]
	GPIOD->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED3_Pos) |
 800051e:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <main+0xb0>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	4a1a      	ldr	r2, [pc, #104]	@ (800058c <main+0xb0>)
 8000524:	f443 537f 	orr.w	r3, r3, #16320	@ 0x3fc0
 8000528:	6093      	str	r3, [r2, #8]
					  	(3 << GPIO_OSPEEDR_OSPEED4_Pos) |
					    (3 << GPIO_OSPEEDR_OSPEED5_Pos) |
					    (3 << GPIO_OSPEEDR_OSPEED6_Pos));

	 // preset  PD3, PD4, PD5, PD6 to 0
	GPIOD->BSRR |= (GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 );
 800052a:	4b18      	ldr	r3, [pc, #96]	@ (800058c <main+0xb0>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a17      	ldr	r2, [pc, #92]	@ (800058c <main+0xb0>)
 8000530:	f043 0378 	orr.w	r3, r3, #120	@ 0x78
 8000534:	6193      	str	r3, [r2, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 f9b8 	bl	80008aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f82b 	bl	8000594 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  //Enable keypad
  Keypad_Init();
 800053e:	f7ff fea7 	bl	8000290 <Keypad_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("%c \n",Keypad_Read());	  // arbitrary delay
 8000542:	f7ff ff59 	bl	80003f8 <Keypad_Read>
 8000546:	4603      	mov	r3, r0
 8000548:	4619      	mov	r1, r3
 800054a:	4811      	ldr	r0, [pc, #68]	@ (8000590 <main+0xb4>)
 800054c:	f001 fa34 	bl	80019b8 <iprintf>

	  lastKeypadValue = Keypad_Read();
 8000550:	f7ff ff52 	bl	80003f8 <Keypad_Read>
 8000554:	4603      	mov	r3, r0
 8000556:	607b      	str	r3, [r7, #4]

	  if (lastKeypadValue != '\0'){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0f1      	beq.n	8000542 <main+0x66>
		  switch (lastKeypadValue){
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b23      	cmp	r3, #35	@ 0x23
 8000562:	d003      	beq.n	800056c <main+0x90>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b2a      	cmp	r3, #42	@ 0x2a
 8000568:	d004      	beq.n	8000574 <main+0x98>
 800056a:	e007      	b.n	800057c <main+0xa0>
			  case '#':
				  GPIOD->ODR =  0b01001000;
 800056c:	4b07      	ldr	r3, [pc, #28]	@ (800058c <main+0xb0>)
 800056e:	2248      	movs	r2, #72	@ 0x48
 8000570:	615a      	str	r2, [r3, #20]
				  break;
 8000572:	e008      	b.n	8000586 <main+0xaa>
			  case '*':
				  GPIOD->ODR = 0b00110000;
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <main+0xb0>)
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	615a      	str	r2, [r3, #20]
				  break;
 800057a:	e004      	b.n	8000586 <main+0xaa>

			  default:
				  GPIOD->ODR = lastKeypadValue << 3;
 800057c:	4a03      	ldr	r2, [pc, #12]	@ (800058c <main+0xb0>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	00db      	lsls	r3, r3, #3
 8000582:	6153      	str	r3, [r2, #20]

		 		  break;
 8000584:	bf00      	nop
	  printf("%c \n",Keypad_Read());	  // arbitrary delay
 8000586:	e7dc      	b.n	8000542 <main+0x66>
 8000588:	40021000 	.word	0x40021000
 800058c:	48000c00 	.word	0x48000c00
 8000590:	080026a8 	.word	0x080026a8

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b096      	sub	sp, #88	@ 0x58
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2244      	movs	r2, #68	@ 0x44
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fa1a 	bl	80019dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ba:	f000 fadf 	bl	8000b7c <HAL_PWREx_ControlVoltageScaling>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c4:	f000 f83a 	bl	800063c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005c8:	2310      	movs	r3, #16
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d4:	2360      	movs	r3, #96	@ 0x60
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fb21 	bl	8000c28 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005ec:	f000 f826 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f000 ff26 	bl	800145c <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000616:	f000 f811 	bl	800063c <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3758      	adds	r7, #88	@ 0x58
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <__io_putchar>:


/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff2d 	bl	800048c <ITM_SendChar>
    return ch;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <Error_Handler+0x8>

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <HAL_MspInit+0x44>)
 8000650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000652:	4a0e      	ldr	r2, [pc, #56]	@ (800068c <HAL_MspInit+0x44>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6613      	str	r3, [r2, #96]	@ 0x60
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <HAL_MspInit+0x44>)
 800065c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <HAL_MspInit+0x44>)
 8000668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066a:	4a08      	ldr	r2, [pc, #32]	@ (800068c <HAL_MspInit+0x44>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000670:	6593      	str	r3, [r2, #88]	@ 0x58
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <HAL_MspInit+0x44>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <NMI_Handler+0x4>

08000698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <MemManage_Handler+0x4>

080006a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e6:	f000 f935 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}

080006ee <_read>:
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b086      	sub	sp, #24
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	60f8      	str	r0, [r7, #12]
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	e00a      	b.n	8000716 <_read+0x28>
 8000700:	f3af 8000 	nop.w
 8000704:	4601      	mov	r1, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	60ba      	str	r2, [r7, #8]
 800070c:	b2ca      	uxtb	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	dbf0      	blt.n	8000700 <_read+0x12>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <_write>:
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	e009      	b.n	800074e <_write+0x26>
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	60ba      	str	r2, [r7, #8]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff6d 	bl	8000622 <__io_putchar>
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	3301      	adds	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	429a      	cmp	r2, r3
 8000754:	dbf1      	blt.n	800073a <_write+0x12>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4618      	mov	r0, r3
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <_close>:
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <_fstat>:
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	2300      	movs	r3, #0
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <_isatty>:
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	2301      	movs	r3, #1
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <_lseek>:
 80007ae:	b480      	push	{r7}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	2300      	movs	r3, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_sbrk>:
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <_sbrk+0x5c>)
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <_sbrk+0x60>)
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <_sbrk+0x22>
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <_sbrk+0x64>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <_sbrk+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d207      	bcs.n	8000808 <_sbrk+0x40>
 80007f8:	f001 f8f8 	bl	80019ec <__errno>
 80007fc:	4603      	mov	r3, r0
 80007fe:	220c      	movs	r2, #12
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000806:	e009      	b.n	800081c <_sbrk+0x54>
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b07      	ldr	r3, [pc, #28]	@ (800082c <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <_sbrk+0x64>)
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20050000 	.word	0x20050000
 8000828:	00000400 	.word	0x00000400
 800082c:	20000084 	.word	0x20000084
 8000830:	200001d8 	.word	0x200001d8

08000834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000890 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800085c:	f7ff ffea 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <LoopForever+0x6>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	@ (8000898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <LoopForever+0xe>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	@ (80008a4 <LoopForever+0x16>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000886:	f001 f8b7 	bl	80019f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fe27 	bl	80004dc <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000890:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800089c:	08002734 	.word	0x08002734
  ldr r2, =_sbss
 80008a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008a4:	200001d8 	.word	0x200001d8

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>

080008aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b0:	2300      	movs	r3, #0
 80008b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f91f 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 f80e 	bl	80008dc <HAL_InitTick>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	e001      	b.n	80008d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008cc:	f7ff febc 	bl	8000648 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <HAL_InitTick+0x6c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d023      	beq.n	8000938 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <HAL_InitTick+0x70>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <HAL_InitTick+0x6c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f91d 	bl	8000b46 <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10f      	bne.n	8000932 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d809      	bhi.n	800092c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000920:	f000 f8f5 	bl	8000b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000924:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_InitTick+0x74>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e007      	b.n	800093c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	e004      	b.n	800093c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	e001      	b.n	800093c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008
 800094c:	20000000 	.word	0x20000000
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x20>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_IncTick+0x24>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <HAL_IncTick+0x24>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008
 8000978:	20000088 	.word	0x20000088

0800097c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <HAL_GetTick+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000088 	.word	0x20000088

08000994 <__NVIC_SetPriorityGrouping>:
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_SetPriority>:
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	@ (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	@ (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	@ 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	@ 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SysTick_Config>:
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ad8:	f7ff ff8e 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff47 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff5c 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff8e 	bl	8000a4c <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffb0 	bl	8000ab4 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40007000 	.word	0x40007000

08000b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b8a:	d130      	bne.n	8000bee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b8c:	4b23      	ldr	r3, [pc, #140]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b98:	d038      	beq.n	8000c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9a:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000baa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2232      	movs	r2, #50	@ 0x32
 8000bb0:	fb02 f303 	mul.w	r3, r2, r3
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	0c9b      	lsrs	r3, r3, #18
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc0:	e002      	b.n	8000bc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bd4:	d102      	bne.n	8000bdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f2      	bne.n	8000bc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000be8:	d110      	bne.n	8000c0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bea:	2303      	movs	r3, #3
 8000bec:	e00f      	b.n	8000c0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bfa:	d007      	beq.n	8000c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c04:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40007000 	.word	0x40007000
 8000c20:	20000000 	.word	0x20000000
 8000c24:	431bde83 	.word	0x431bde83

08000c28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f000 bc08 	b.w	800144c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c3c:	4b96      	ldr	r3, [pc, #600]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f003 030c 	and.w	r3, r3, #12
 8000c44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c46:	4b94      	ldr	r3, [pc, #592]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 80e4 	beq.w	8000e26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d007      	beq.n	8000c74 <HAL_RCC_OscConfig+0x4c>
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	2b0c      	cmp	r3, #12
 8000c68:	f040 808b 	bne.w	8000d82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	f040 8087 	bne.w	8000d82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c74:	4b88      	ldr	r3, [pc, #544]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <HAL_RCC_OscConfig+0x64>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e3df      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a1a      	ldr	r2, [r3, #32]
 8000c90:	4b81      	ldr	r3, [pc, #516]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d004      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x7e>
 8000c9c:	4b7e      	ldr	r3, [pc, #504]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ca4:	e005      	b.n	8000cb2 <HAL_RCC_OscConfig+0x8a>
 8000ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cac:	091b      	lsrs	r3, r3, #4
 8000cae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d223      	bcs.n	8000cfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a1b      	ldr	r3, [r3, #32]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fd5a 	bl	8001774 <RCC_SetFlashLatencyFromMSIRange>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e3c0      	b.n	800144c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cca:	4b73      	ldr	r3, [pc, #460]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a72      	ldr	r2, [pc, #456]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	4b70      	ldr	r3, [pc, #448]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a1b      	ldr	r3, [r3, #32]
 8000ce2:	496d      	ldr	r1, [pc, #436]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	4968      	ldr	r1, [pc, #416]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
 8000cfc:	e025      	b.n	8000d4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cfe:	4b66      	ldr	r3, [pc, #408]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a65      	ldr	r2, [pc, #404]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	4b63      	ldr	r3, [pc, #396]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a1b      	ldr	r3, [r3, #32]
 8000d16:	4960      	ldr	r1, [pc, #384]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d1c:	4b5e      	ldr	r3, [pc, #376]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	495b      	ldr	r1, [pc, #364]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d109      	bne.n	8000d4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a1b      	ldr	r3, [r3, #32]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fd1a 	bl	8001774 <RCC_SetFlashLatencyFromMSIRange>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e380      	b.n	800144c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d4a:	f000 fc87 	bl	800165c <HAL_RCC_GetSysClockFreq>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	4b51      	ldr	r3, [pc, #324]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	4950      	ldr	r1, [pc, #320]	@ (8000e9c <HAL_RCC_OscConfig+0x274>)
 8000d5c:	5ccb      	ldrb	r3, [r1, r3]
 8000d5e:	f003 031f 	and.w	r3, r3, #31
 8000d62:	fa22 f303 	lsr.w	r3, r2, r3
 8000d66:	4a4e      	ldr	r2, [pc, #312]	@ (8000ea0 <HAL_RCC_OscConfig+0x278>)
 8000d68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8000ea4 <HAL_RCC_OscConfig+0x27c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fdb4 	bl	80008dc <HAL_InitTick>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d052      	beq.n	8000e24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	e364      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d032      	beq.n	8000df0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d8a:	4b43      	ldr	r3, [pc, #268]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a42      	ldr	r2, [pc, #264]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d96:	f7ff fdf1 	bl	800097c <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d9e:	f7ff fded 	bl	800097c <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e34d      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000db0:	4b39      	ldr	r3, [pc, #228]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dbc:	4b36      	ldr	r3, [pc, #216]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a35      	ldr	r2, [pc, #212]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	4930      	ldr	r1, [pc, #192]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dda:	4b2f      	ldr	r3, [pc, #188]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	492b      	ldr	r1, [pc, #172]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	604b      	str	r3, [r1, #4]
 8000dee:	e01a      	b.n	8000e26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000df0:	4b29      	ldr	r3, [pc, #164]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a28      	ldr	r2, [pc, #160]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000df6:	f023 0301 	bic.w	r3, r3, #1
 8000dfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fdbe 	bl	800097c <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e04:	f7ff fdba 	bl	800097c <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e31a      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f0      	bne.n	8000e04 <HAL_RCC_OscConfig+0x1dc>
 8000e22:	e000      	b.n	8000e26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d073      	beq.n	8000f1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d005      	beq.n	8000e44 <HAL_RCC_OscConfig+0x21c>
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2b0c      	cmp	r3, #12
 8000e3c:	d10e      	bne.n	8000e5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d10b      	bne.n	8000e5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d063      	beq.n	8000f18 <HAL_RCC_OscConfig+0x2f0>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d15f      	bne.n	8000f18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e2f7      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e64:	d106      	bne.n	8000e74 <HAL_RCC_OscConfig+0x24c>
 8000e66:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e025      	b.n	8000ec0 <HAL_RCC_OscConfig+0x298>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e7c:	d114      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x280>
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a02      	ldr	r2, [pc, #8]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e013      	b.n	8000ec0 <HAL_RCC_OscConfig+0x298>
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	080026b0 	.word	0x080026b0
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000004 	.word	0x20000004
 8000ea8:	4ba0      	ldr	r3, [pc, #640]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a9f      	ldr	r2, [pc, #636]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b9d      	ldr	r3, [pc, #628]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a9c      	ldr	r2, [pc, #624]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d013      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fd58 	bl	800097c <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed0:	f7ff fd54 	bl	800097c <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b64      	cmp	r3, #100	@ 0x64
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e2b4      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ee2:	4b92      	ldr	r3, [pc, #584]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f0      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x2a8>
 8000eee:	e014      	b.n	8000f1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fd44 	bl	800097c <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef8:	f7ff fd40 	bl	800097c <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b64      	cmp	r3, #100	@ 0x64
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e2a0      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f0a:	4b88      	ldr	r3, [pc, #544]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f0      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x2d0>
 8000f16:	e000      	b.n	8000f1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d060      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d005      	beq.n	8000f38 <HAL_RCC_OscConfig+0x310>
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	2b0c      	cmp	r3, #12
 8000f30:	d119      	bne.n	8000f66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d116      	bne.n	8000f66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f38:	4b7c      	ldr	r3, [pc, #496]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d005      	beq.n	8000f50 <HAL_RCC_OscConfig+0x328>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e27d      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f50:	4b76      	ldr	r3, [pc, #472]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	061b      	lsls	r3, r3, #24
 8000f5e:	4973      	ldr	r1, [pc, #460]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f64:	e040      	b.n	8000fe8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d023      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a6e      	ldr	r2, [pc, #440]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fcff 	bl	800097c <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f82:	f7ff fcfb 	bl	800097c <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e25b      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f94:	4b65      	ldr	r3, [pc, #404]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f0      	beq.n	8000f82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa0:	4b62      	ldr	r3, [pc, #392]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	061b      	lsls	r3, r3, #24
 8000fae:	495f      	ldr	r1, [pc, #380]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
 8000fb4:	e018      	b.n	8000fe8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a5c      	ldr	r2, [pc, #368]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fcdb 	bl	800097c <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fca:	f7ff fcd7 	bl	800097c <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e237      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fdc:	4b53      	ldr	r3, [pc, #332]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f0      	bne.n	8000fca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d03c      	beq.n	800106e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d01c      	beq.n	8001036 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001002:	4a4a      	ldr	r2, [pc, #296]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800100c:	f7ff fcb6 	bl	800097c <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff fcb2 	bl	800097c <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e212      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001026:	4b41      	ldr	r3, [pc, #260]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0ef      	beq.n	8001014 <HAL_RCC_OscConfig+0x3ec>
 8001034:	e01b      	b.n	800106e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001036:	4b3d      	ldr	r3, [pc, #244]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800103c:	4a3b      	ldr	r2, [pc, #236]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 800103e:	f023 0301 	bic.w	r3, r3, #1
 8001042:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001046:	f7ff fc99 	bl	800097c <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800104e:	f7ff fc95 	bl	800097c <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e1f5      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001060:	4b32      	ldr	r3, [pc, #200]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1ef      	bne.n	800104e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80a6 	beq.w	80011c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001080:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10d      	bne.n	80010a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001090:	4a26      	ldr	r2, [pc, #152]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001096:	6593      	str	r3, [r2, #88]	@ 0x58
 8001098:	4b24      	ldr	r3, [pc, #144]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010a4:	2301      	movs	r3, #1
 80010a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a8:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <HAL_RCC_OscConfig+0x508>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d118      	bne.n	80010e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <HAL_RCC_OscConfig+0x508>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001130 <HAL_RCC_OscConfig+0x508>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fc5c 	bl	800097c <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c8:	f7ff fc58 	bl	800097c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e1b8      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_RCC_OscConfig+0x508>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <HAL_RCC_OscConfig+0x4d8>
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 80010f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010fe:	e029      	b.n	8001154 <HAL_RCC_OscConfig+0x52c>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b05      	cmp	r3, #5
 8001106:	d115      	bne.n	8001134 <HAL_RCC_OscConfig+0x50c>
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 800110a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800110e:	4a07      	ldr	r2, [pc, #28]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 800111a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800111e:	4a03      	ldr	r2, [pc, #12]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001128:	e014      	b.n	8001154 <HAL_RCC_OscConfig+0x52c>
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	40007000 	.word	0x40007000
 8001134:	4b9d      	ldr	r3, [pc, #628]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800113a:	4a9c      	ldr	r2, [pc, #624]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001144:	4b99      	ldr	r3, [pc, #612]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800114a:	4a98      	ldr	r2, [pc, #608]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800114c:	f023 0304 	bic.w	r3, r3, #4
 8001150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d016      	beq.n	800118a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115c:	f7ff fc0e 	bl	800097c <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001162:	e00a      	b.n	800117a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001164:	f7ff fc0a 	bl	800097c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001172:	4293      	cmp	r3, r2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e168      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800117a:	4b8c      	ldr	r3, [pc, #560]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800117c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0ed      	beq.n	8001164 <HAL_RCC_OscConfig+0x53c>
 8001188:	e015      	b.n	80011b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118a:	f7ff fbf7 	bl	800097c <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001190:	e00a      	b.n	80011a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001192:	f7ff fbf3 	bl	800097c <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e151      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a8:	4b80      	ldr	r3, [pc, #512]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80011aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1ed      	bne.n	8001192 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011b6:	7ffb      	ldrb	r3, [r7, #31]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d105      	bne.n	80011c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011bc:	4b7b      	ldr	r3, [pc, #492]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c0:	4a7a      	ldr	r2, [pc, #488]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80011c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0320 	and.w	r3, r3, #32
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d03c      	beq.n	800124e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d01c      	beq.n	8001216 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011dc:	4b73      	ldr	r3, [pc, #460]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80011de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011e2:	4a72      	ldr	r2, [pc, #456]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ec:	f7ff fbc6 	bl	800097c <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f4:	f7ff fbc2 	bl	800097c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e122      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001206:	4b69      	ldr	r3, [pc, #420]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001208:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0ef      	beq.n	80011f4 <HAL_RCC_OscConfig+0x5cc>
 8001214:	e01b      	b.n	800124e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001216:	4b65      	ldr	r3, [pc, #404]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001218:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800121c:	4a63      	ldr	r2, [pc, #396]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800121e:	f023 0301 	bic.w	r3, r3, #1
 8001222:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001226:	f7ff fba9 	bl	800097c <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800122e:	f7ff fba5 	bl	800097c <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e105      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001240:	4b5a      	ldr	r3, [pc, #360]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001242:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1ef      	bne.n	800122e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80f9 	beq.w	800144a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125c:	2b02      	cmp	r3, #2
 800125e:	f040 80cf 	bne.w	8001400 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001262:	4b52      	ldr	r3, [pc, #328]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f003 0203 	and.w	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001272:	429a      	cmp	r2, r3
 8001274:	d12c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	3b01      	subs	r3, #1
 8001282:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001284:	429a      	cmp	r2, r3
 8001286:	d123      	bne.n	80012d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001292:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001294:	429a      	cmp	r2, r3
 8001296:	d11b      	bne.n	80012d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d113      	bne.n	80012d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012b2:	085b      	lsrs	r3, r3, #1
 80012b4:	3b01      	subs	r3, #1
 80012b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d109      	bne.n	80012d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	085b      	lsrs	r3, r3, #1
 80012c8:	3b01      	subs	r3, #1
 80012ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d071      	beq.n	80013b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	d068      	beq.n	80013a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012d6:	4b35      	ldr	r3, [pc, #212]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012e2:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0ac      	b.n	800144c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012f2:	4b2e      	ldr	r3, [pc, #184]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a2d      	ldr	r2, [pc, #180]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80012f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012fe:	f7ff fb3d 	bl	800097c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001306:	f7ff fb39 	bl	800097c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e099      	b.n	800144c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001318:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001324:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <HAL_RCC_OscConfig+0x788>)
 800132a:	4013      	ands	r3, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001334:	3a01      	subs	r2, #1
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	4311      	orrs	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800133e:	0212      	lsls	r2, r2, #8
 8001340:	4311      	orrs	r1, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001346:	0852      	lsrs	r2, r2, #1
 8001348:	3a01      	subs	r2, #1
 800134a:	0552      	lsls	r2, r2, #21
 800134c:	4311      	orrs	r1, r2
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001352:	0852      	lsrs	r2, r2, #1
 8001354:	3a01      	subs	r2, #1
 8001356:	0652      	lsls	r2, r2, #25
 8001358:	4311      	orrs	r1, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800135e:	06d2      	lsls	r2, r2, #27
 8001360:	430a      	orrs	r2, r1
 8001362:	4912      	ldr	r1, [pc, #72]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001364:	4313      	orrs	r3, r2
 8001366:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800136e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001372:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800137a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800137e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001380:	f7ff fafc 	bl	800097c <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff faf8 	bl	800097c <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e058      	b.n	800144c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013a6:	e050      	b.n	800144a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e04f      	b.n	800144c <HAL_RCC_OscConfig+0x824>
 80013ac:	40021000 	.word	0x40021000
 80013b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b4:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d144      	bne.n	800144a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a23      	ldr	r2, [pc, #140]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013cc:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4a20      	ldr	r2, [pc, #128]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013d8:	f7ff fad0 	bl	800097c <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff facc 	bl	800097c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e02c      	b.n	800144c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x7b8>
 80013fe:	e024      	b.n	800144a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d01f      	beq.n	8001446 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 800140c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff fab3 	bl	800097c <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff faaf 	bl	800097c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e00f      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142c:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	4905      	ldr	r1, [pc, #20]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_RCC_OscConfig+0x830>)
 8001440:	4013      	ands	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
 8001444:	e001      	b.n	800144a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000
 8001458:	feeefffc 	.word	0xfeeefffc

0800145c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0e7      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b75      	ldr	r3, [pc, #468]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d910      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b72      	ldr	r3, [pc, #456]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 0207 	bic.w	r2, r3, #7
 8001486:	4970      	ldr	r1, [pc, #448]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b6e      	ldr	r3, [pc, #440]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0cf      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d010      	beq.n	80014ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	4b66      	ldr	r3, [pc, #408]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d908      	bls.n	80014ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014bc:	4b63      	ldr	r3, [pc, #396]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4960      	ldr	r1, [pc, #384]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d04c      	beq.n	8001574 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e2:	4b5a      	ldr	r3, [pc, #360]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d121      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0a6      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fa:	4b54      	ldr	r3, [pc, #336]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d115      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e09a      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001512:	4b4e      	ldr	r3, [pc, #312]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e08e      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001522:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e086      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b46      	ldr	r3, [pc, #280]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4943      	ldr	r1, [pc, #268]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001544:	f7ff fa1a 	bl	800097c <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff fa16 	bl	800097c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e06e      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d010      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	4b31      	ldr	r3, [pc, #196]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800158c:	429a      	cmp	r2, r3
 800158e:	d208      	bcs.n	80015a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001590:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	492b      	ldr	r1, [pc, #172]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a2:	4b29      	ldr	r3, [pc, #164]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d210      	bcs.n	80015d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b0:	4b25      	ldr	r3, [pc, #148]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 0207 	bic.w	r2, r3, #7
 80015b8:	4923      	ldr	r1, [pc, #140]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e036      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d008      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4918      	ldr	r1, [pc, #96]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d009      	beq.n	8001610 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4910      	ldr	r1, [pc, #64]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001610:	f000 f824 	bl	800165c <HAL_RCC_GetSysClockFreq>
 8001614:	4602      	mov	r2, r0
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	490b      	ldr	r1, [pc, #44]	@ (8001650 <HAL_RCC_ClockConfig+0x1f4>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
 800162c:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 800162e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_RCC_ClockConfig+0x1fc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff f951 	bl	80008dc <HAL_InitTick>
 800163a:	4603      	mov	r3, r0
 800163c:	72fb      	strb	r3, [r7, #11]

  return status;
 800163e:	7afb      	ldrb	r3, [r7, #11]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40022000 	.word	0x40022000
 800164c:	40021000 	.word	0x40021000
 8001650:	080026b0 	.word	0x080026b0
 8001654:	20000000 	.word	0x20000000
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166a:	4b3e      	ldr	r3, [pc, #248]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001674:	4b3b      	ldr	r3, [pc, #236]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x34>
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d121      	bne.n	80016ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d11e      	bne.n	80016ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001690:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d107      	bne.n	80016ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800169c:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e005      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10d      	bne.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d102      	bne.n	80016da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016d4:	4b25      	ldr	r3, [pc, #148]	@ (800176c <HAL_RCC_GetSysClockFreq+0x110>)
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	e004      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016e0:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x114>)
 80016e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	2b0c      	cmp	r3, #12
 80016e8:	d134      	bne.n	8001754 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0xa6>
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d003      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0xac>
 8001700:	e005      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <HAL_RCC_GetSysClockFreq+0x110>)
 8001704:	617b      	str	r3, [r7, #20]
      break;
 8001706:	e005      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x114>)
 800170a:	617b      	str	r3, [r7, #20]
      break;
 800170c:	e002      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	617b      	str	r3, [r7, #20]
      break;
 8001712:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	3301      	adds	r3, #1
 8001720:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	fb03 f202 	mul.w	r2, r3, r2
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	0e5b      	lsrs	r3, r3, #25
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	3301      	adds	r3, #1
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001754:	69bb      	ldr	r3, [r7, #24]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	@ 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	080026c0 	.word	0x080026c0
 800176c:	00f42400 	.word	0x00f42400
 8001770:	007a1200 	.word	0x007a1200

08001774 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001780:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800178c:	f7ff f9e8 	bl	8000b60 <HAL_PWREx_GetVoltageRange>
 8001790:	6178      	str	r0, [r7, #20]
 8001792:	e014      	b.n	80017be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	4b25      	ldr	r3, [pc, #148]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	4a24      	ldr	r2, [pc, #144]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800179a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	@ 0x58
 80017a0:	4b22      	ldr	r3, [pc, #136]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017ac:	f7ff f9d8 	bl	8000b60 <HAL_PWREx_GetVoltageRange>
 80017b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b6:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017c4:	d10b      	bne.n	80017de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b80      	cmp	r3, #128	@ 0x80
 80017ca:	d919      	bls.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80017d0:	d902      	bls.n	80017d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017d2:	2302      	movs	r3, #2
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	e013      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017d8:	2301      	movs	r3, #1
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	e010      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b80      	cmp	r3, #128	@ 0x80
 80017e2:	d902      	bls.n	80017ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017e4:	2303      	movs	r3, #3
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	e00a      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b80      	cmp	r3, #128	@ 0x80
 80017ee:	d102      	bne.n	80017f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017f0:	2302      	movs	r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e004      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b70      	cmp	r3, #112	@ 0x70
 80017fa:	d101      	bne.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 0207 	bic.w	r2, r3, #7
 8001808:	4909      	ldr	r1, [pc, #36]	@ (8001830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	40022000 	.word	0x40022000

08001834 <std>:
 8001834:	2300      	movs	r3, #0
 8001836:	b510      	push	{r4, lr}
 8001838:	4604      	mov	r4, r0
 800183a:	e9c0 3300 	strd	r3, r3, [r0]
 800183e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001842:	6083      	str	r3, [r0, #8]
 8001844:	8181      	strh	r1, [r0, #12]
 8001846:	6643      	str	r3, [r0, #100]	@ 0x64
 8001848:	81c2      	strh	r2, [r0, #14]
 800184a:	6183      	str	r3, [r0, #24]
 800184c:	4619      	mov	r1, r3
 800184e:	2208      	movs	r2, #8
 8001850:	305c      	adds	r0, #92	@ 0x5c
 8001852:	f000 f8c3 	bl	80019dc <memset>
 8001856:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <std+0x58>)
 8001858:	6263      	str	r3, [r4, #36]	@ 0x24
 800185a:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <std+0x5c>)
 800185c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800185e:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <std+0x60>)
 8001860:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <std+0x64>)
 8001864:	6323      	str	r3, [r4, #48]	@ 0x30
 8001866:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <std+0x68>)
 8001868:	6224      	str	r4, [r4, #32]
 800186a:	429c      	cmp	r4, r3
 800186c:	d006      	beq.n	800187c <std+0x48>
 800186e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001872:	4294      	cmp	r4, r2
 8001874:	d002      	beq.n	800187c <std+0x48>
 8001876:	33d0      	adds	r3, #208	@ 0xd0
 8001878:	429c      	cmp	r4, r3
 800187a:	d105      	bne.n	8001888 <std+0x54>
 800187c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001884:	f000 b8dc 	b.w	8001a40 <__retarget_lock_init_recursive>
 8001888:	bd10      	pop	{r4, pc}
 800188a:	bf00      	nop
 800188c:	08002299 	.word	0x08002299
 8001890:	080022bb 	.word	0x080022bb
 8001894:	080022f3 	.word	0x080022f3
 8001898:	08002317 	.word	0x08002317
 800189c:	2000008c 	.word	0x2000008c

080018a0 <stdio_exit_handler>:
 80018a0:	4a02      	ldr	r2, [pc, #8]	@ (80018ac <stdio_exit_handler+0xc>)
 80018a2:	4903      	ldr	r1, [pc, #12]	@ (80018b0 <stdio_exit_handler+0x10>)
 80018a4:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <stdio_exit_handler+0x14>)
 80018a6:	f000 b869 	b.w	800197c <_fwalk_sglue>
 80018aa:	bf00      	nop
 80018ac:	2000000c 	.word	0x2000000c
 80018b0:	08002231 	.word	0x08002231
 80018b4:	2000001c 	.word	0x2000001c

080018b8 <cleanup_stdio>:
 80018b8:	6841      	ldr	r1, [r0, #4]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <cleanup_stdio+0x34>)
 80018bc:	4299      	cmp	r1, r3
 80018be:	b510      	push	{r4, lr}
 80018c0:	4604      	mov	r4, r0
 80018c2:	d001      	beq.n	80018c8 <cleanup_stdio+0x10>
 80018c4:	f000 fcb4 	bl	8002230 <_fflush_r>
 80018c8:	68a1      	ldr	r1, [r4, #8]
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <cleanup_stdio+0x38>)
 80018cc:	4299      	cmp	r1, r3
 80018ce:	d002      	beq.n	80018d6 <cleanup_stdio+0x1e>
 80018d0:	4620      	mov	r0, r4
 80018d2:	f000 fcad 	bl	8002230 <_fflush_r>
 80018d6:	68e1      	ldr	r1, [r4, #12]
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <cleanup_stdio+0x3c>)
 80018da:	4299      	cmp	r1, r3
 80018dc:	d004      	beq.n	80018e8 <cleanup_stdio+0x30>
 80018de:	4620      	mov	r0, r4
 80018e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018e4:	f000 bca4 	b.w	8002230 <_fflush_r>
 80018e8:	bd10      	pop	{r4, pc}
 80018ea:	bf00      	nop
 80018ec:	2000008c 	.word	0x2000008c
 80018f0:	200000f4 	.word	0x200000f4
 80018f4:	2000015c 	.word	0x2000015c

080018f8 <global_stdio_init.part.0>:
 80018f8:	b510      	push	{r4, lr}
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <global_stdio_init.part.0+0x30>)
 80018fc:	4c0b      	ldr	r4, [pc, #44]	@ (800192c <global_stdio_init.part.0+0x34>)
 80018fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001930 <global_stdio_init.part.0+0x38>)
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	4620      	mov	r0, r4
 8001904:	2200      	movs	r2, #0
 8001906:	2104      	movs	r1, #4
 8001908:	f7ff ff94 	bl	8001834 <std>
 800190c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001910:	2201      	movs	r2, #1
 8001912:	2109      	movs	r1, #9
 8001914:	f7ff ff8e 	bl	8001834 <std>
 8001918:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800191c:	2202      	movs	r2, #2
 800191e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001922:	2112      	movs	r1, #18
 8001924:	f7ff bf86 	b.w	8001834 <std>
 8001928:	200001c4 	.word	0x200001c4
 800192c:	2000008c 	.word	0x2000008c
 8001930:	080018a1 	.word	0x080018a1

08001934 <__sfp_lock_acquire>:
 8001934:	4801      	ldr	r0, [pc, #4]	@ (800193c <__sfp_lock_acquire+0x8>)
 8001936:	f000 b884 	b.w	8001a42 <__retarget_lock_acquire_recursive>
 800193a:	bf00      	nop
 800193c:	200001c9 	.word	0x200001c9

08001940 <__sfp_lock_release>:
 8001940:	4801      	ldr	r0, [pc, #4]	@ (8001948 <__sfp_lock_release+0x8>)
 8001942:	f000 b87f 	b.w	8001a44 <__retarget_lock_release_recursive>
 8001946:	bf00      	nop
 8001948:	200001c9 	.word	0x200001c9

0800194c <__sinit>:
 800194c:	b510      	push	{r4, lr}
 800194e:	4604      	mov	r4, r0
 8001950:	f7ff fff0 	bl	8001934 <__sfp_lock_acquire>
 8001954:	6a23      	ldr	r3, [r4, #32]
 8001956:	b11b      	cbz	r3, 8001960 <__sinit+0x14>
 8001958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800195c:	f7ff bff0 	b.w	8001940 <__sfp_lock_release>
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <__sinit+0x28>)
 8001962:	6223      	str	r3, [r4, #32]
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <__sinit+0x2c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f5      	bne.n	8001958 <__sinit+0xc>
 800196c:	f7ff ffc4 	bl	80018f8 <global_stdio_init.part.0>
 8001970:	e7f2      	b.n	8001958 <__sinit+0xc>
 8001972:	bf00      	nop
 8001974:	080018b9 	.word	0x080018b9
 8001978:	200001c4 	.word	0x200001c4

0800197c <_fwalk_sglue>:
 800197c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001980:	4607      	mov	r7, r0
 8001982:	4688      	mov	r8, r1
 8001984:	4614      	mov	r4, r2
 8001986:	2600      	movs	r6, #0
 8001988:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800198c:	f1b9 0901 	subs.w	r9, r9, #1
 8001990:	d505      	bpl.n	800199e <_fwalk_sglue+0x22>
 8001992:	6824      	ldr	r4, [r4, #0]
 8001994:	2c00      	cmp	r4, #0
 8001996:	d1f7      	bne.n	8001988 <_fwalk_sglue+0xc>
 8001998:	4630      	mov	r0, r6
 800199a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800199e:	89ab      	ldrh	r3, [r5, #12]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d907      	bls.n	80019b4 <_fwalk_sglue+0x38>
 80019a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019a8:	3301      	adds	r3, #1
 80019aa:	d003      	beq.n	80019b4 <_fwalk_sglue+0x38>
 80019ac:	4629      	mov	r1, r5
 80019ae:	4638      	mov	r0, r7
 80019b0:	47c0      	blx	r8
 80019b2:	4306      	orrs	r6, r0
 80019b4:	3568      	adds	r5, #104	@ 0x68
 80019b6:	e7e9      	b.n	800198c <_fwalk_sglue+0x10>

080019b8 <iprintf>:
 80019b8:	b40f      	push	{r0, r1, r2, r3}
 80019ba:	b507      	push	{r0, r1, r2, lr}
 80019bc:	4906      	ldr	r1, [pc, #24]	@ (80019d8 <iprintf+0x20>)
 80019be:	ab04      	add	r3, sp, #16
 80019c0:	6808      	ldr	r0, [r1, #0]
 80019c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80019c6:	6881      	ldr	r1, [r0, #8]
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	f000 f865 	bl	8001a98 <_vfiprintf_r>
 80019ce:	b003      	add	sp, #12
 80019d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80019d4:	b004      	add	sp, #16
 80019d6:	4770      	bx	lr
 80019d8:	20000018 	.word	0x20000018

080019dc <memset>:
 80019dc:	4402      	add	r2, r0
 80019de:	4603      	mov	r3, r0
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d100      	bne.n	80019e6 <memset+0xa>
 80019e4:	4770      	bx	lr
 80019e6:	f803 1b01 	strb.w	r1, [r3], #1
 80019ea:	e7f9      	b.n	80019e0 <memset+0x4>

080019ec <__errno>:
 80019ec:	4b01      	ldr	r3, [pc, #4]	@ (80019f4 <__errno+0x8>)
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000018 	.word	0x20000018

080019f8 <__libc_init_array>:
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	4d0d      	ldr	r5, [pc, #52]	@ (8001a30 <__libc_init_array+0x38>)
 80019fc:	4c0d      	ldr	r4, [pc, #52]	@ (8001a34 <__libc_init_array+0x3c>)
 80019fe:	1b64      	subs	r4, r4, r5
 8001a00:	10a4      	asrs	r4, r4, #2
 8001a02:	2600      	movs	r6, #0
 8001a04:	42a6      	cmp	r6, r4
 8001a06:	d109      	bne.n	8001a1c <__libc_init_array+0x24>
 8001a08:	4d0b      	ldr	r5, [pc, #44]	@ (8001a38 <__libc_init_array+0x40>)
 8001a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8001a3c <__libc_init_array+0x44>)
 8001a0c:	f000 fe40 	bl	8002690 <_init>
 8001a10:	1b64      	subs	r4, r4, r5
 8001a12:	10a4      	asrs	r4, r4, #2
 8001a14:	2600      	movs	r6, #0
 8001a16:	42a6      	cmp	r6, r4
 8001a18:	d105      	bne.n	8001a26 <__libc_init_array+0x2e>
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
 8001a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a20:	4798      	blx	r3
 8001a22:	3601      	adds	r6, #1
 8001a24:	e7ee      	b.n	8001a04 <__libc_init_array+0xc>
 8001a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a2a:	4798      	blx	r3
 8001a2c:	3601      	adds	r6, #1
 8001a2e:	e7f2      	b.n	8001a16 <__libc_init_array+0x1e>
 8001a30:	0800272c 	.word	0x0800272c
 8001a34:	0800272c 	.word	0x0800272c
 8001a38:	0800272c 	.word	0x0800272c
 8001a3c:	08002730 	.word	0x08002730

08001a40 <__retarget_lock_init_recursive>:
 8001a40:	4770      	bx	lr

08001a42 <__retarget_lock_acquire_recursive>:
 8001a42:	4770      	bx	lr

08001a44 <__retarget_lock_release_recursive>:
 8001a44:	4770      	bx	lr

08001a46 <__sfputc_r>:
 8001a46:	6893      	ldr	r3, [r2, #8]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	b410      	push	{r4}
 8001a4e:	6093      	str	r3, [r2, #8]
 8001a50:	da08      	bge.n	8001a64 <__sfputc_r+0x1e>
 8001a52:	6994      	ldr	r4, [r2, #24]
 8001a54:	42a3      	cmp	r3, r4
 8001a56:	db01      	blt.n	8001a5c <__sfputc_r+0x16>
 8001a58:	290a      	cmp	r1, #10
 8001a5a:	d103      	bne.n	8001a64 <__sfputc_r+0x1e>
 8001a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a60:	f000 bc5d 	b.w	800231e <__swbuf_r>
 8001a64:	6813      	ldr	r3, [r2, #0]
 8001a66:	1c58      	adds	r0, r3, #1
 8001a68:	6010      	str	r0, [r2, #0]
 8001a6a:	7019      	strb	r1, [r3, #0]
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <__sfputs_r>:
 8001a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a76:	4606      	mov	r6, r0
 8001a78:	460f      	mov	r7, r1
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	18d5      	adds	r5, r2, r3
 8001a7e:	42ac      	cmp	r4, r5
 8001a80:	d101      	bne.n	8001a86 <__sfputs_r+0x12>
 8001a82:	2000      	movs	r0, #0
 8001a84:	e007      	b.n	8001a96 <__sfputs_r+0x22>
 8001a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a8a:	463a      	mov	r2, r7
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f7ff ffda 	bl	8001a46 <__sfputc_r>
 8001a92:	1c43      	adds	r3, r0, #1
 8001a94:	d1f3      	bne.n	8001a7e <__sfputs_r+0xa>
 8001a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a98 <_vfiprintf_r>:
 8001a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a9c:	460d      	mov	r5, r1
 8001a9e:	b09d      	sub	sp, #116	@ 0x74
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	4698      	mov	r8, r3
 8001aa4:	4606      	mov	r6, r0
 8001aa6:	b118      	cbz	r0, 8001ab0 <_vfiprintf_r+0x18>
 8001aa8:	6a03      	ldr	r3, [r0, #32]
 8001aaa:	b90b      	cbnz	r3, 8001ab0 <_vfiprintf_r+0x18>
 8001aac:	f7ff ff4e 	bl	800194c <__sinit>
 8001ab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ab2:	07d9      	lsls	r1, r3, #31
 8001ab4:	d405      	bmi.n	8001ac2 <_vfiprintf_r+0x2a>
 8001ab6:	89ab      	ldrh	r3, [r5, #12]
 8001ab8:	059a      	lsls	r2, r3, #22
 8001aba:	d402      	bmi.n	8001ac2 <_vfiprintf_r+0x2a>
 8001abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001abe:	f7ff ffc0 	bl	8001a42 <__retarget_lock_acquire_recursive>
 8001ac2:	89ab      	ldrh	r3, [r5, #12]
 8001ac4:	071b      	lsls	r3, r3, #28
 8001ac6:	d501      	bpl.n	8001acc <_vfiprintf_r+0x34>
 8001ac8:	692b      	ldr	r3, [r5, #16]
 8001aca:	b99b      	cbnz	r3, 8001af4 <_vfiprintf_r+0x5c>
 8001acc:	4629      	mov	r1, r5
 8001ace:	4630      	mov	r0, r6
 8001ad0:	f000 fc64 	bl	800239c <__swsetup_r>
 8001ad4:	b170      	cbz	r0, 8001af4 <_vfiprintf_r+0x5c>
 8001ad6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ad8:	07dc      	lsls	r4, r3, #31
 8001ada:	d504      	bpl.n	8001ae6 <_vfiprintf_r+0x4e>
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ae0:	b01d      	add	sp, #116	@ 0x74
 8001ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ae6:	89ab      	ldrh	r3, [r5, #12]
 8001ae8:	0598      	lsls	r0, r3, #22
 8001aea:	d4f7      	bmi.n	8001adc <_vfiprintf_r+0x44>
 8001aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001aee:	f7ff ffa9 	bl	8001a44 <__retarget_lock_release_recursive>
 8001af2:	e7f3      	b.n	8001adc <_vfiprintf_r+0x44>
 8001af4:	2300      	movs	r3, #0
 8001af6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001af8:	2320      	movs	r3, #32
 8001afa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001afe:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b02:	2330      	movs	r3, #48	@ 0x30
 8001b04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001cb4 <_vfiprintf_r+0x21c>
 8001b08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001b0c:	f04f 0901 	mov.w	r9, #1
 8001b10:	4623      	mov	r3, r4
 8001b12:	469a      	mov	sl, r3
 8001b14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b18:	b10a      	cbz	r2, 8001b1e <_vfiprintf_r+0x86>
 8001b1a:	2a25      	cmp	r2, #37	@ 0x25
 8001b1c:	d1f9      	bne.n	8001b12 <_vfiprintf_r+0x7a>
 8001b1e:	ebba 0b04 	subs.w	fp, sl, r4
 8001b22:	d00b      	beq.n	8001b3c <_vfiprintf_r+0xa4>
 8001b24:	465b      	mov	r3, fp
 8001b26:	4622      	mov	r2, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	f7ff ffa2 	bl	8001a74 <__sfputs_r>
 8001b30:	3001      	adds	r0, #1
 8001b32:	f000 80a7 	beq.w	8001c84 <_vfiprintf_r+0x1ec>
 8001b36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001b38:	445a      	add	r2, fp
 8001b3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 809f 	beq.w	8001c84 <_vfiprintf_r+0x1ec>
 8001b46:	2300      	movs	r3, #0
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b50:	f10a 0a01 	add.w	sl, sl, #1
 8001b54:	9304      	str	r3, [sp, #16]
 8001b56:	9307      	str	r3, [sp, #28]
 8001b58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b5e:	4654      	mov	r4, sl
 8001b60:	2205      	movs	r2, #5
 8001b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b66:	4853      	ldr	r0, [pc, #332]	@ (8001cb4 <_vfiprintf_r+0x21c>)
 8001b68:	f7fe fb42 	bl	80001f0 <memchr>
 8001b6c:	9a04      	ldr	r2, [sp, #16]
 8001b6e:	b9d8      	cbnz	r0, 8001ba8 <_vfiprintf_r+0x110>
 8001b70:	06d1      	lsls	r1, r2, #27
 8001b72:	bf44      	itt	mi
 8001b74:	2320      	movmi	r3, #32
 8001b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b7a:	0713      	lsls	r3, r2, #28
 8001b7c:	bf44      	itt	mi
 8001b7e:	232b      	movmi	r3, #43	@ 0x2b
 8001b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b84:	f89a 3000 	ldrb.w	r3, [sl]
 8001b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b8a:	d015      	beq.n	8001bb8 <_vfiprintf_r+0x120>
 8001b8c:	9a07      	ldr	r2, [sp, #28]
 8001b8e:	4654      	mov	r4, sl
 8001b90:	2000      	movs	r0, #0
 8001b92:	f04f 0c0a 	mov.w	ip, #10
 8001b96:	4621      	mov	r1, r4
 8001b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b9c:	3b30      	subs	r3, #48	@ 0x30
 8001b9e:	2b09      	cmp	r3, #9
 8001ba0:	d94b      	bls.n	8001c3a <_vfiprintf_r+0x1a2>
 8001ba2:	b1b0      	cbz	r0, 8001bd2 <_vfiprintf_r+0x13a>
 8001ba4:	9207      	str	r2, [sp, #28]
 8001ba6:	e014      	b.n	8001bd2 <_vfiprintf_r+0x13a>
 8001ba8:	eba0 0308 	sub.w	r3, r0, r8
 8001bac:	fa09 f303 	lsl.w	r3, r9, r3
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	9304      	str	r3, [sp, #16]
 8001bb4:	46a2      	mov	sl, r4
 8001bb6:	e7d2      	b.n	8001b5e <_vfiprintf_r+0xc6>
 8001bb8:	9b03      	ldr	r3, [sp, #12]
 8001bba:	1d19      	adds	r1, r3, #4
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	9103      	str	r1, [sp, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bfbb      	ittet	lt
 8001bc4:	425b      	neglt	r3, r3
 8001bc6:	f042 0202 	orrlt.w	r2, r2, #2
 8001bca:	9307      	strge	r3, [sp, #28]
 8001bcc:	9307      	strlt	r3, [sp, #28]
 8001bce:	bfb8      	it	lt
 8001bd0:	9204      	strlt	r2, [sp, #16]
 8001bd2:	7823      	ldrb	r3, [r4, #0]
 8001bd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001bd6:	d10a      	bne.n	8001bee <_vfiprintf_r+0x156>
 8001bd8:	7863      	ldrb	r3, [r4, #1]
 8001bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bdc:	d132      	bne.n	8001c44 <_vfiprintf_r+0x1ac>
 8001bde:	9b03      	ldr	r3, [sp, #12]
 8001be0:	1d1a      	adds	r2, r3, #4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	9203      	str	r2, [sp, #12]
 8001be6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001bea:	3402      	adds	r4, #2
 8001bec:	9305      	str	r3, [sp, #20]
 8001bee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001cc4 <_vfiprintf_r+0x22c>
 8001bf2:	7821      	ldrb	r1, [r4, #0]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	4650      	mov	r0, sl
 8001bf8:	f7fe fafa 	bl	80001f0 <memchr>
 8001bfc:	b138      	cbz	r0, 8001c0e <_vfiprintf_r+0x176>
 8001bfe:	9b04      	ldr	r3, [sp, #16]
 8001c00:	eba0 000a 	sub.w	r0, r0, sl
 8001c04:	2240      	movs	r2, #64	@ 0x40
 8001c06:	4082      	lsls	r2, r0
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	3401      	adds	r4, #1
 8001c0c:	9304      	str	r3, [sp, #16]
 8001c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c12:	4829      	ldr	r0, [pc, #164]	@ (8001cb8 <_vfiprintf_r+0x220>)
 8001c14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001c18:	2206      	movs	r2, #6
 8001c1a:	f7fe fae9 	bl	80001f0 <memchr>
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d03f      	beq.n	8001ca2 <_vfiprintf_r+0x20a>
 8001c22:	4b26      	ldr	r3, [pc, #152]	@ (8001cbc <_vfiprintf_r+0x224>)
 8001c24:	bb1b      	cbnz	r3, 8001c6e <_vfiprintf_r+0x1d6>
 8001c26:	9b03      	ldr	r3, [sp, #12]
 8001c28:	3307      	adds	r3, #7
 8001c2a:	f023 0307 	bic.w	r3, r3, #7
 8001c2e:	3308      	adds	r3, #8
 8001c30:	9303      	str	r3, [sp, #12]
 8001c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c34:	443b      	add	r3, r7
 8001c36:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c38:	e76a      	b.n	8001b10 <_vfiprintf_r+0x78>
 8001c3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c3e:	460c      	mov	r4, r1
 8001c40:	2001      	movs	r0, #1
 8001c42:	e7a8      	b.n	8001b96 <_vfiprintf_r+0xfe>
 8001c44:	2300      	movs	r3, #0
 8001c46:	3401      	adds	r4, #1
 8001c48:	9305      	str	r3, [sp, #20]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 0c0a 	mov.w	ip, #10
 8001c50:	4620      	mov	r0, r4
 8001c52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c56:	3a30      	subs	r2, #48	@ 0x30
 8001c58:	2a09      	cmp	r2, #9
 8001c5a:	d903      	bls.n	8001c64 <_vfiprintf_r+0x1cc>
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0c6      	beq.n	8001bee <_vfiprintf_r+0x156>
 8001c60:	9105      	str	r1, [sp, #20]
 8001c62:	e7c4      	b.n	8001bee <_vfiprintf_r+0x156>
 8001c64:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c68:	4604      	mov	r4, r0
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e7f0      	b.n	8001c50 <_vfiprintf_r+0x1b8>
 8001c6e:	ab03      	add	r3, sp, #12
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	462a      	mov	r2, r5
 8001c74:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <_vfiprintf_r+0x228>)
 8001c76:	a904      	add	r1, sp, #16
 8001c78:	4630      	mov	r0, r6
 8001c7a:	f3af 8000 	nop.w
 8001c7e:	4607      	mov	r7, r0
 8001c80:	1c78      	adds	r0, r7, #1
 8001c82:	d1d6      	bne.n	8001c32 <_vfiprintf_r+0x19a>
 8001c84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c86:	07d9      	lsls	r1, r3, #31
 8001c88:	d405      	bmi.n	8001c96 <_vfiprintf_r+0x1fe>
 8001c8a:	89ab      	ldrh	r3, [r5, #12]
 8001c8c:	059a      	lsls	r2, r3, #22
 8001c8e:	d402      	bmi.n	8001c96 <_vfiprintf_r+0x1fe>
 8001c90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c92:	f7ff fed7 	bl	8001a44 <__retarget_lock_release_recursive>
 8001c96:	89ab      	ldrh	r3, [r5, #12]
 8001c98:	065b      	lsls	r3, r3, #25
 8001c9a:	f53f af1f 	bmi.w	8001adc <_vfiprintf_r+0x44>
 8001c9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001ca0:	e71e      	b.n	8001ae0 <_vfiprintf_r+0x48>
 8001ca2:	ab03      	add	r3, sp, #12
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	462a      	mov	r2, r5
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <_vfiprintf_r+0x228>)
 8001caa:	a904      	add	r1, sp, #16
 8001cac:	4630      	mov	r0, r6
 8001cae:	f000 f91b 	bl	8001ee8 <_printf_i>
 8001cb2:	e7e4      	b.n	8001c7e <_vfiprintf_r+0x1e6>
 8001cb4:	080026f0 	.word	0x080026f0
 8001cb8:	080026fa 	.word	0x080026fa
 8001cbc:	00000000 	.word	0x00000000
 8001cc0:	08001a75 	.word	0x08001a75
 8001cc4:	080026f6 	.word	0x080026f6

08001cc8 <sbrk_aligned>:
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	4e0f      	ldr	r6, [pc, #60]	@ (8001d08 <sbrk_aligned+0x40>)
 8001ccc:	460c      	mov	r4, r1
 8001cce:	6831      	ldr	r1, [r6, #0]
 8001cd0:	4605      	mov	r5, r0
 8001cd2:	b911      	cbnz	r1, 8001cda <sbrk_aligned+0x12>
 8001cd4:	f000 fc70 	bl	80025b8 <_sbrk_r>
 8001cd8:	6030      	str	r0, [r6, #0]
 8001cda:	4621      	mov	r1, r4
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f000 fc6b 	bl	80025b8 <_sbrk_r>
 8001ce2:	1c43      	adds	r3, r0, #1
 8001ce4:	d103      	bne.n	8001cee <sbrk_aligned+0x26>
 8001ce6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001cea:	4620      	mov	r0, r4
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
 8001cee:	1cc4      	adds	r4, r0, #3
 8001cf0:	f024 0403 	bic.w	r4, r4, #3
 8001cf4:	42a0      	cmp	r0, r4
 8001cf6:	d0f8      	beq.n	8001cea <sbrk_aligned+0x22>
 8001cf8:	1a21      	subs	r1, r4, r0
 8001cfa:	4628      	mov	r0, r5
 8001cfc:	f000 fc5c 	bl	80025b8 <_sbrk_r>
 8001d00:	3001      	adds	r0, #1
 8001d02:	d1f2      	bne.n	8001cea <sbrk_aligned+0x22>
 8001d04:	e7ef      	b.n	8001ce6 <sbrk_aligned+0x1e>
 8001d06:	bf00      	nop
 8001d08:	200001cc 	.word	0x200001cc

08001d0c <_malloc_r>:
 8001d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d10:	1ccd      	adds	r5, r1, #3
 8001d12:	f025 0503 	bic.w	r5, r5, #3
 8001d16:	3508      	adds	r5, #8
 8001d18:	2d0c      	cmp	r5, #12
 8001d1a:	bf38      	it	cc
 8001d1c:	250c      	movcc	r5, #12
 8001d1e:	2d00      	cmp	r5, #0
 8001d20:	4606      	mov	r6, r0
 8001d22:	db01      	blt.n	8001d28 <_malloc_r+0x1c>
 8001d24:	42a9      	cmp	r1, r5
 8001d26:	d904      	bls.n	8001d32 <_malloc_r+0x26>
 8001d28:	230c      	movs	r3, #12
 8001d2a:	6033      	str	r3, [r6, #0]
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e08 <_malloc_r+0xfc>
 8001d36:	f000 faa3 	bl	8002280 <__malloc_lock>
 8001d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d3e:	461c      	mov	r4, r3
 8001d40:	bb44      	cbnz	r4, 8001d94 <_malloc_r+0x88>
 8001d42:	4629      	mov	r1, r5
 8001d44:	4630      	mov	r0, r6
 8001d46:	f7ff ffbf 	bl	8001cc8 <sbrk_aligned>
 8001d4a:	1c43      	adds	r3, r0, #1
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	d158      	bne.n	8001e02 <_malloc_r+0xf6>
 8001d50:	f8d8 4000 	ldr.w	r4, [r8]
 8001d54:	4627      	mov	r7, r4
 8001d56:	2f00      	cmp	r7, #0
 8001d58:	d143      	bne.n	8001de2 <_malloc_r+0xd6>
 8001d5a:	2c00      	cmp	r4, #0
 8001d5c:	d04b      	beq.n	8001df6 <_malloc_r+0xea>
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	4639      	mov	r1, r7
 8001d62:	4630      	mov	r0, r6
 8001d64:	eb04 0903 	add.w	r9, r4, r3
 8001d68:	f000 fc26 	bl	80025b8 <_sbrk_r>
 8001d6c:	4581      	cmp	r9, r0
 8001d6e:	d142      	bne.n	8001df6 <_malloc_r+0xea>
 8001d70:	6821      	ldr	r1, [r4, #0]
 8001d72:	1a6d      	subs	r5, r5, r1
 8001d74:	4629      	mov	r1, r5
 8001d76:	4630      	mov	r0, r6
 8001d78:	f7ff ffa6 	bl	8001cc8 <sbrk_aligned>
 8001d7c:	3001      	adds	r0, #1
 8001d7e:	d03a      	beq.n	8001df6 <_malloc_r+0xea>
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	442b      	add	r3, r5
 8001d84:	6023      	str	r3, [r4, #0]
 8001d86:	f8d8 3000 	ldr.w	r3, [r8]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	bb62      	cbnz	r2, 8001de8 <_malloc_r+0xdc>
 8001d8e:	f8c8 7000 	str.w	r7, [r8]
 8001d92:	e00f      	b.n	8001db4 <_malloc_r+0xa8>
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	1b52      	subs	r2, r2, r5
 8001d98:	d420      	bmi.n	8001ddc <_malloc_r+0xd0>
 8001d9a:	2a0b      	cmp	r2, #11
 8001d9c:	d917      	bls.n	8001dce <_malloc_r+0xc2>
 8001d9e:	1961      	adds	r1, r4, r5
 8001da0:	42a3      	cmp	r3, r4
 8001da2:	6025      	str	r5, [r4, #0]
 8001da4:	bf18      	it	ne
 8001da6:	6059      	strne	r1, [r3, #4]
 8001da8:	6863      	ldr	r3, [r4, #4]
 8001daa:	bf08      	it	eq
 8001dac:	f8c8 1000 	streq.w	r1, [r8]
 8001db0:	5162      	str	r2, [r4, r5]
 8001db2:	604b      	str	r3, [r1, #4]
 8001db4:	4630      	mov	r0, r6
 8001db6:	f000 fa69 	bl	800228c <__malloc_unlock>
 8001dba:	f104 000b 	add.w	r0, r4, #11
 8001dbe:	1d23      	adds	r3, r4, #4
 8001dc0:	f020 0007 	bic.w	r0, r0, #7
 8001dc4:	1ac2      	subs	r2, r0, r3
 8001dc6:	bf1c      	itt	ne
 8001dc8:	1a1b      	subne	r3, r3, r0
 8001dca:	50a3      	strne	r3, [r4, r2]
 8001dcc:	e7af      	b.n	8001d2e <_malloc_r+0x22>
 8001dce:	6862      	ldr	r2, [r4, #4]
 8001dd0:	42a3      	cmp	r3, r4
 8001dd2:	bf0c      	ite	eq
 8001dd4:	f8c8 2000 	streq.w	r2, [r8]
 8001dd8:	605a      	strne	r2, [r3, #4]
 8001dda:	e7eb      	b.n	8001db4 <_malloc_r+0xa8>
 8001ddc:	4623      	mov	r3, r4
 8001dde:	6864      	ldr	r4, [r4, #4]
 8001de0:	e7ae      	b.n	8001d40 <_malloc_r+0x34>
 8001de2:	463c      	mov	r4, r7
 8001de4:	687f      	ldr	r7, [r7, #4]
 8001de6:	e7b6      	b.n	8001d56 <_malloc_r+0x4a>
 8001de8:	461a      	mov	r2, r3
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	42a3      	cmp	r3, r4
 8001dee:	d1fb      	bne.n	8001de8 <_malloc_r+0xdc>
 8001df0:	2300      	movs	r3, #0
 8001df2:	6053      	str	r3, [r2, #4]
 8001df4:	e7de      	b.n	8001db4 <_malloc_r+0xa8>
 8001df6:	230c      	movs	r3, #12
 8001df8:	6033      	str	r3, [r6, #0]
 8001dfa:	4630      	mov	r0, r6
 8001dfc:	f000 fa46 	bl	800228c <__malloc_unlock>
 8001e00:	e794      	b.n	8001d2c <_malloc_r+0x20>
 8001e02:	6005      	str	r5, [r0, #0]
 8001e04:	e7d6      	b.n	8001db4 <_malloc_r+0xa8>
 8001e06:	bf00      	nop
 8001e08:	200001d0 	.word	0x200001d0

08001e0c <_printf_common>:
 8001e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e10:	4616      	mov	r6, r2
 8001e12:	4698      	mov	r8, r3
 8001e14:	688a      	ldr	r2, [r1, #8]
 8001e16:	690b      	ldr	r3, [r1, #16]
 8001e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bfb8      	it	lt
 8001e20:	4613      	movlt	r3, r2
 8001e22:	6033      	str	r3, [r6, #0]
 8001e24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001e28:	4607      	mov	r7, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	b10a      	cbz	r2, 8001e32 <_printf_common+0x26>
 8001e2e:	3301      	adds	r3, #1
 8001e30:	6033      	str	r3, [r6, #0]
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	0699      	lsls	r1, r3, #26
 8001e36:	bf42      	ittt	mi
 8001e38:	6833      	ldrmi	r3, [r6, #0]
 8001e3a:	3302      	addmi	r3, #2
 8001e3c:	6033      	strmi	r3, [r6, #0]
 8001e3e:	6825      	ldr	r5, [r4, #0]
 8001e40:	f015 0506 	ands.w	r5, r5, #6
 8001e44:	d106      	bne.n	8001e54 <_printf_common+0x48>
 8001e46:	f104 0a19 	add.w	sl, r4, #25
 8001e4a:	68e3      	ldr	r3, [r4, #12]
 8001e4c:	6832      	ldr	r2, [r6, #0]
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	42ab      	cmp	r3, r5
 8001e52:	dc26      	bgt.n	8001ea2 <_printf_common+0x96>
 8001e54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001e58:	6822      	ldr	r2, [r4, #0]
 8001e5a:	3b00      	subs	r3, #0
 8001e5c:	bf18      	it	ne
 8001e5e:	2301      	movne	r3, #1
 8001e60:	0692      	lsls	r2, r2, #26
 8001e62:	d42b      	bmi.n	8001ebc <_printf_common+0xb0>
 8001e64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001e68:	4641      	mov	r1, r8
 8001e6a:	4638      	mov	r0, r7
 8001e6c:	47c8      	blx	r9
 8001e6e:	3001      	adds	r0, #1
 8001e70:	d01e      	beq.n	8001eb0 <_printf_common+0xa4>
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	6922      	ldr	r2, [r4, #16]
 8001e76:	f003 0306 	and.w	r3, r3, #6
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf02      	ittt	eq
 8001e7e:	68e5      	ldreq	r5, [r4, #12]
 8001e80:	6833      	ldreq	r3, [r6, #0]
 8001e82:	1aed      	subeq	r5, r5, r3
 8001e84:	68a3      	ldr	r3, [r4, #8]
 8001e86:	bf0c      	ite	eq
 8001e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e8c:	2500      	movne	r5, #0
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	bfc4      	itt	gt
 8001e92:	1a9b      	subgt	r3, r3, r2
 8001e94:	18ed      	addgt	r5, r5, r3
 8001e96:	2600      	movs	r6, #0
 8001e98:	341a      	adds	r4, #26
 8001e9a:	42b5      	cmp	r5, r6
 8001e9c:	d11a      	bne.n	8001ed4 <_printf_common+0xc8>
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	e008      	b.n	8001eb4 <_printf_common+0xa8>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	4652      	mov	r2, sl
 8001ea6:	4641      	mov	r1, r8
 8001ea8:	4638      	mov	r0, r7
 8001eaa:	47c8      	blx	r9
 8001eac:	3001      	adds	r0, #1
 8001eae:	d103      	bne.n	8001eb8 <_printf_common+0xac>
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001eb8:	3501      	adds	r5, #1
 8001eba:	e7c6      	b.n	8001e4a <_printf_common+0x3e>
 8001ebc:	18e1      	adds	r1, r4, r3
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	2030      	movs	r0, #48	@ 0x30
 8001ec2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001ec6:	4422      	add	r2, r4
 8001ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	e7c7      	b.n	8001e64 <_printf_common+0x58>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	4622      	mov	r2, r4
 8001ed8:	4641      	mov	r1, r8
 8001eda:	4638      	mov	r0, r7
 8001edc:	47c8      	blx	r9
 8001ede:	3001      	adds	r0, #1
 8001ee0:	d0e6      	beq.n	8001eb0 <_printf_common+0xa4>
 8001ee2:	3601      	adds	r6, #1
 8001ee4:	e7d9      	b.n	8001e9a <_printf_common+0x8e>
	...

08001ee8 <_printf_i>:
 8001ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001eec:	7e0f      	ldrb	r7, [r1, #24]
 8001eee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ef0:	2f78      	cmp	r7, #120	@ 0x78
 8001ef2:	4691      	mov	r9, r2
 8001ef4:	4680      	mov	r8, r0
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	469a      	mov	sl, r3
 8001efa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001efe:	d807      	bhi.n	8001f10 <_printf_i+0x28>
 8001f00:	2f62      	cmp	r7, #98	@ 0x62
 8001f02:	d80a      	bhi.n	8001f1a <_printf_i+0x32>
 8001f04:	2f00      	cmp	r7, #0
 8001f06:	f000 80d2 	beq.w	80020ae <_printf_i+0x1c6>
 8001f0a:	2f58      	cmp	r7, #88	@ 0x58
 8001f0c:	f000 80b9 	beq.w	8002082 <_printf_i+0x19a>
 8001f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001f18:	e03a      	b.n	8001f90 <_printf_i+0xa8>
 8001f1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001f1e:	2b15      	cmp	r3, #21
 8001f20:	d8f6      	bhi.n	8001f10 <_printf_i+0x28>
 8001f22:	a101      	add	r1, pc, #4	@ (adr r1, 8001f28 <_printf_i+0x40>)
 8001f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f28:	08001f81 	.word	0x08001f81
 8001f2c:	08001f95 	.word	0x08001f95
 8001f30:	08001f11 	.word	0x08001f11
 8001f34:	08001f11 	.word	0x08001f11
 8001f38:	08001f11 	.word	0x08001f11
 8001f3c:	08001f11 	.word	0x08001f11
 8001f40:	08001f95 	.word	0x08001f95
 8001f44:	08001f11 	.word	0x08001f11
 8001f48:	08001f11 	.word	0x08001f11
 8001f4c:	08001f11 	.word	0x08001f11
 8001f50:	08001f11 	.word	0x08001f11
 8001f54:	08002095 	.word	0x08002095
 8001f58:	08001fbf 	.word	0x08001fbf
 8001f5c:	0800204f 	.word	0x0800204f
 8001f60:	08001f11 	.word	0x08001f11
 8001f64:	08001f11 	.word	0x08001f11
 8001f68:	080020b7 	.word	0x080020b7
 8001f6c:	08001f11 	.word	0x08001f11
 8001f70:	08001fbf 	.word	0x08001fbf
 8001f74:	08001f11 	.word	0x08001f11
 8001f78:	08001f11 	.word	0x08001f11
 8001f7c:	08002057 	.word	0x08002057
 8001f80:	6833      	ldr	r3, [r6, #0]
 8001f82:	1d1a      	adds	r2, r3, #4
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6032      	str	r2, [r6, #0]
 8001f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f90:	2301      	movs	r3, #1
 8001f92:	e09d      	b.n	80020d0 <_printf_i+0x1e8>
 8001f94:	6833      	ldr	r3, [r6, #0]
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	1d19      	adds	r1, r3, #4
 8001f9a:	6031      	str	r1, [r6, #0]
 8001f9c:	0606      	lsls	r6, r0, #24
 8001f9e:	d501      	bpl.n	8001fa4 <_printf_i+0xbc>
 8001fa0:	681d      	ldr	r5, [r3, #0]
 8001fa2:	e003      	b.n	8001fac <_printf_i+0xc4>
 8001fa4:	0645      	lsls	r5, r0, #25
 8001fa6:	d5fb      	bpl.n	8001fa0 <_printf_i+0xb8>
 8001fa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001fac:	2d00      	cmp	r5, #0
 8001fae:	da03      	bge.n	8001fb8 <_printf_i+0xd0>
 8001fb0:	232d      	movs	r3, #45	@ 0x2d
 8001fb2:	426d      	negs	r5, r5
 8001fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001fb8:	4859      	ldr	r0, [pc, #356]	@ (8002120 <_printf_i+0x238>)
 8001fba:	230a      	movs	r3, #10
 8001fbc:	e011      	b.n	8001fe2 <_printf_i+0xfa>
 8001fbe:	6821      	ldr	r1, [r4, #0]
 8001fc0:	6833      	ldr	r3, [r6, #0]
 8001fc2:	0608      	lsls	r0, r1, #24
 8001fc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8001fc8:	d402      	bmi.n	8001fd0 <_printf_i+0xe8>
 8001fca:	0649      	lsls	r1, r1, #25
 8001fcc:	bf48      	it	mi
 8001fce:	b2ad      	uxthmi	r5, r5
 8001fd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8001fd2:	4853      	ldr	r0, [pc, #332]	@ (8002120 <_printf_i+0x238>)
 8001fd4:	6033      	str	r3, [r6, #0]
 8001fd6:	bf14      	ite	ne
 8001fd8:	230a      	movne	r3, #10
 8001fda:	2308      	moveq	r3, #8
 8001fdc:	2100      	movs	r1, #0
 8001fde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001fe2:	6866      	ldr	r6, [r4, #4]
 8001fe4:	60a6      	str	r6, [r4, #8]
 8001fe6:	2e00      	cmp	r6, #0
 8001fe8:	bfa2      	ittt	ge
 8001fea:	6821      	ldrge	r1, [r4, #0]
 8001fec:	f021 0104 	bicge.w	r1, r1, #4
 8001ff0:	6021      	strge	r1, [r4, #0]
 8001ff2:	b90d      	cbnz	r5, 8001ff8 <_printf_i+0x110>
 8001ff4:	2e00      	cmp	r6, #0
 8001ff6:	d04b      	beq.n	8002090 <_printf_i+0x1a8>
 8001ff8:	4616      	mov	r6, r2
 8001ffa:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ffe:	fb03 5711 	mls	r7, r3, r1, r5
 8002002:	5dc7      	ldrb	r7, [r0, r7]
 8002004:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002008:	462f      	mov	r7, r5
 800200a:	42bb      	cmp	r3, r7
 800200c:	460d      	mov	r5, r1
 800200e:	d9f4      	bls.n	8001ffa <_printf_i+0x112>
 8002010:	2b08      	cmp	r3, #8
 8002012:	d10b      	bne.n	800202c <_printf_i+0x144>
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	07df      	lsls	r7, r3, #31
 8002018:	d508      	bpl.n	800202c <_printf_i+0x144>
 800201a:	6923      	ldr	r3, [r4, #16]
 800201c:	6861      	ldr	r1, [r4, #4]
 800201e:	4299      	cmp	r1, r3
 8002020:	bfde      	ittt	le
 8002022:	2330      	movle	r3, #48	@ 0x30
 8002024:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002028:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800202c:	1b92      	subs	r2, r2, r6
 800202e:	6122      	str	r2, [r4, #16]
 8002030:	f8cd a000 	str.w	sl, [sp]
 8002034:	464b      	mov	r3, r9
 8002036:	aa03      	add	r2, sp, #12
 8002038:	4621      	mov	r1, r4
 800203a:	4640      	mov	r0, r8
 800203c:	f7ff fee6 	bl	8001e0c <_printf_common>
 8002040:	3001      	adds	r0, #1
 8002042:	d14a      	bne.n	80020da <_printf_i+0x1f2>
 8002044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002048:	b004      	add	sp, #16
 800204a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	f043 0320 	orr.w	r3, r3, #32
 8002054:	6023      	str	r3, [r4, #0]
 8002056:	4833      	ldr	r0, [pc, #204]	@ (8002124 <_printf_i+0x23c>)
 8002058:	2778      	movs	r7, #120	@ 0x78
 800205a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	6831      	ldr	r1, [r6, #0]
 8002062:	061f      	lsls	r7, r3, #24
 8002064:	f851 5b04 	ldr.w	r5, [r1], #4
 8002068:	d402      	bmi.n	8002070 <_printf_i+0x188>
 800206a:	065f      	lsls	r7, r3, #25
 800206c:	bf48      	it	mi
 800206e:	b2ad      	uxthmi	r5, r5
 8002070:	6031      	str	r1, [r6, #0]
 8002072:	07d9      	lsls	r1, r3, #31
 8002074:	bf44      	itt	mi
 8002076:	f043 0320 	orrmi.w	r3, r3, #32
 800207a:	6023      	strmi	r3, [r4, #0]
 800207c:	b11d      	cbz	r5, 8002086 <_printf_i+0x19e>
 800207e:	2310      	movs	r3, #16
 8002080:	e7ac      	b.n	8001fdc <_printf_i+0xf4>
 8002082:	4827      	ldr	r0, [pc, #156]	@ (8002120 <_printf_i+0x238>)
 8002084:	e7e9      	b.n	800205a <_printf_i+0x172>
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	f023 0320 	bic.w	r3, r3, #32
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	e7f6      	b.n	800207e <_printf_i+0x196>
 8002090:	4616      	mov	r6, r2
 8002092:	e7bd      	b.n	8002010 <_printf_i+0x128>
 8002094:	6833      	ldr	r3, [r6, #0]
 8002096:	6825      	ldr	r5, [r4, #0]
 8002098:	6961      	ldr	r1, [r4, #20]
 800209a:	1d18      	adds	r0, r3, #4
 800209c:	6030      	str	r0, [r6, #0]
 800209e:	062e      	lsls	r6, r5, #24
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	d501      	bpl.n	80020a8 <_printf_i+0x1c0>
 80020a4:	6019      	str	r1, [r3, #0]
 80020a6:	e002      	b.n	80020ae <_printf_i+0x1c6>
 80020a8:	0668      	lsls	r0, r5, #25
 80020aa:	d5fb      	bpl.n	80020a4 <_printf_i+0x1bc>
 80020ac:	8019      	strh	r1, [r3, #0]
 80020ae:	2300      	movs	r3, #0
 80020b0:	6123      	str	r3, [r4, #16]
 80020b2:	4616      	mov	r6, r2
 80020b4:	e7bc      	b.n	8002030 <_printf_i+0x148>
 80020b6:	6833      	ldr	r3, [r6, #0]
 80020b8:	1d1a      	adds	r2, r3, #4
 80020ba:	6032      	str	r2, [r6, #0]
 80020bc:	681e      	ldr	r6, [r3, #0]
 80020be:	6862      	ldr	r2, [r4, #4]
 80020c0:	2100      	movs	r1, #0
 80020c2:	4630      	mov	r0, r6
 80020c4:	f7fe f894 	bl	80001f0 <memchr>
 80020c8:	b108      	cbz	r0, 80020ce <_printf_i+0x1e6>
 80020ca:	1b80      	subs	r0, r0, r6
 80020cc:	6060      	str	r0, [r4, #4]
 80020ce:	6863      	ldr	r3, [r4, #4]
 80020d0:	6123      	str	r3, [r4, #16]
 80020d2:	2300      	movs	r3, #0
 80020d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020d8:	e7aa      	b.n	8002030 <_printf_i+0x148>
 80020da:	6923      	ldr	r3, [r4, #16]
 80020dc:	4632      	mov	r2, r6
 80020de:	4649      	mov	r1, r9
 80020e0:	4640      	mov	r0, r8
 80020e2:	47d0      	blx	sl
 80020e4:	3001      	adds	r0, #1
 80020e6:	d0ad      	beq.n	8002044 <_printf_i+0x15c>
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	079b      	lsls	r3, r3, #30
 80020ec:	d413      	bmi.n	8002116 <_printf_i+0x22e>
 80020ee:	68e0      	ldr	r0, [r4, #12]
 80020f0:	9b03      	ldr	r3, [sp, #12]
 80020f2:	4298      	cmp	r0, r3
 80020f4:	bfb8      	it	lt
 80020f6:	4618      	movlt	r0, r3
 80020f8:	e7a6      	b.n	8002048 <_printf_i+0x160>
 80020fa:	2301      	movs	r3, #1
 80020fc:	4632      	mov	r2, r6
 80020fe:	4649      	mov	r1, r9
 8002100:	4640      	mov	r0, r8
 8002102:	47d0      	blx	sl
 8002104:	3001      	adds	r0, #1
 8002106:	d09d      	beq.n	8002044 <_printf_i+0x15c>
 8002108:	3501      	adds	r5, #1
 800210a:	68e3      	ldr	r3, [r4, #12]
 800210c:	9903      	ldr	r1, [sp, #12]
 800210e:	1a5b      	subs	r3, r3, r1
 8002110:	42ab      	cmp	r3, r5
 8002112:	dcf2      	bgt.n	80020fa <_printf_i+0x212>
 8002114:	e7eb      	b.n	80020ee <_printf_i+0x206>
 8002116:	2500      	movs	r5, #0
 8002118:	f104 0619 	add.w	r6, r4, #25
 800211c:	e7f5      	b.n	800210a <_printf_i+0x222>
 800211e:	bf00      	nop
 8002120:	08002701 	.word	0x08002701
 8002124:	08002712 	.word	0x08002712

08002128 <__sflush_r>:
 8002128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800212c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002130:	0716      	lsls	r6, r2, #28
 8002132:	4605      	mov	r5, r0
 8002134:	460c      	mov	r4, r1
 8002136:	d454      	bmi.n	80021e2 <__sflush_r+0xba>
 8002138:	684b      	ldr	r3, [r1, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	dc02      	bgt.n	8002144 <__sflush_r+0x1c>
 800213e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	dd48      	ble.n	80021d6 <__sflush_r+0xae>
 8002144:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002146:	2e00      	cmp	r6, #0
 8002148:	d045      	beq.n	80021d6 <__sflush_r+0xae>
 800214a:	2300      	movs	r3, #0
 800214c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002150:	682f      	ldr	r7, [r5, #0]
 8002152:	6a21      	ldr	r1, [r4, #32]
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	d030      	beq.n	80021ba <__sflush_r+0x92>
 8002158:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800215a:	89a3      	ldrh	r3, [r4, #12]
 800215c:	0759      	lsls	r1, r3, #29
 800215e:	d505      	bpl.n	800216c <__sflush_r+0x44>
 8002160:	6863      	ldr	r3, [r4, #4]
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002166:	b10b      	cbz	r3, 800216c <__sflush_r+0x44>
 8002168:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	2300      	movs	r3, #0
 800216e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002170:	6a21      	ldr	r1, [r4, #32]
 8002172:	4628      	mov	r0, r5
 8002174:	47b0      	blx	r6
 8002176:	1c43      	adds	r3, r0, #1
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	d106      	bne.n	800218a <__sflush_r+0x62>
 800217c:	6829      	ldr	r1, [r5, #0]
 800217e:	291d      	cmp	r1, #29
 8002180:	d82b      	bhi.n	80021da <__sflush_r+0xb2>
 8002182:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <__sflush_r+0x104>)
 8002184:	410a      	asrs	r2, r1
 8002186:	07d6      	lsls	r6, r2, #31
 8002188:	d427      	bmi.n	80021da <__sflush_r+0xb2>
 800218a:	2200      	movs	r2, #0
 800218c:	6062      	str	r2, [r4, #4]
 800218e:	04d9      	lsls	r1, r3, #19
 8002190:	6922      	ldr	r2, [r4, #16]
 8002192:	6022      	str	r2, [r4, #0]
 8002194:	d504      	bpl.n	80021a0 <__sflush_r+0x78>
 8002196:	1c42      	adds	r2, r0, #1
 8002198:	d101      	bne.n	800219e <__sflush_r+0x76>
 800219a:	682b      	ldr	r3, [r5, #0]
 800219c:	b903      	cbnz	r3, 80021a0 <__sflush_r+0x78>
 800219e:	6560      	str	r0, [r4, #84]	@ 0x54
 80021a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021a2:	602f      	str	r7, [r5, #0]
 80021a4:	b1b9      	cbz	r1, 80021d6 <__sflush_r+0xae>
 80021a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80021aa:	4299      	cmp	r1, r3
 80021ac:	d002      	beq.n	80021b4 <__sflush_r+0x8c>
 80021ae:	4628      	mov	r0, r5
 80021b0:	f000 fa24 	bl	80025fc <_free_r>
 80021b4:	2300      	movs	r3, #0
 80021b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80021b8:	e00d      	b.n	80021d6 <__sflush_r+0xae>
 80021ba:	2301      	movs	r3, #1
 80021bc:	4628      	mov	r0, r5
 80021be:	47b0      	blx	r6
 80021c0:	4602      	mov	r2, r0
 80021c2:	1c50      	adds	r0, r2, #1
 80021c4:	d1c9      	bne.n	800215a <__sflush_r+0x32>
 80021c6:	682b      	ldr	r3, [r5, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0c6      	beq.n	800215a <__sflush_r+0x32>
 80021cc:	2b1d      	cmp	r3, #29
 80021ce:	d001      	beq.n	80021d4 <__sflush_r+0xac>
 80021d0:	2b16      	cmp	r3, #22
 80021d2:	d11e      	bne.n	8002212 <__sflush_r+0xea>
 80021d4:	602f      	str	r7, [r5, #0]
 80021d6:	2000      	movs	r0, #0
 80021d8:	e022      	b.n	8002220 <__sflush_r+0xf8>
 80021da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021de:	b21b      	sxth	r3, r3
 80021e0:	e01b      	b.n	800221a <__sflush_r+0xf2>
 80021e2:	690f      	ldr	r7, [r1, #16]
 80021e4:	2f00      	cmp	r7, #0
 80021e6:	d0f6      	beq.n	80021d6 <__sflush_r+0xae>
 80021e8:	0793      	lsls	r3, r2, #30
 80021ea:	680e      	ldr	r6, [r1, #0]
 80021ec:	bf08      	it	eq
 80021ee:	694b      	ldreq	r3, [r1, #20]
 80021f0:	600f      	str	r7, [r1, #0]
 80021f2:	bf18      	it	ne
 80021f4:	2300      	movne	r3, #0
 80021f6:	eba6 0807 	sub.w	r8, r6, r7
 80021fa:	608b      	str	r3, [r1, #8]
 80021fc:	f1b8 0f00 	cmp.w	r8, #0
 8002200:	dde9      	ble.n	80021d6 <__sflush_r+0xae>
 8002202:	6a21      	ldr	r1, [r4, #32]
 8002204:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002206:	4643      	mov	r3, r8
 8002208:	463a      	mov	r2, r7
 800220a:	4628      	mov	r0, r5
 800220c:	47b0      	blx	r6
 800220e:	2800      	cmp	r0, #0
 8002210:	dc08      	bgt.n	8002224 <__sflush_r+0xfc>
 8002212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800221a:	81a3      	strh	r3, [r4, #12]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002224:	4407      	add	r7, r0
 8002226:	eba8 0800 	sub.w	r8, r8, r0
 800222a:	e7e7      	b.n	80021fc <__sflush_r+0xd4>
 800222c:	dfbffffe 	.word	0xdfbffffe

08002230 <_fflush_r>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	690b      	ldr	r3, [r1, #16]
 8002234:	4605      	mov	r5, r0
 8002236:	460c      	mov	r4, r1
 8002238:	b913      	cbnz	r3, 8002240 <_fflush_r+0x10>
 800223a:	2500      	movs	r5, #0
 800223c:	4628      	mov	r0, r5
 800223e:	bd38      	pop	{r3, r4, r5, pc}
 8002240:	b118      	cbz	r0, 800224a <_fflush_r+0x1a>
 8002242:	6a03      	ldr	r3, [r0, #32]
 8002244:	b90b      	cbnz	r3, 800224a <_fflush_r+0x1a>
 8002246:	f7ff fb81 	bl	800194c <__sinit>
 800224a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f3      	beq.n	800223a <_fflush_r+0xa>
 8002252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002254:	07d0      	lsls	r0, r2, #31
 8002256:	d404      	bmi.n	8002262 <_fflush_r+0x32>
 8002258:	0599      	lsls	r1, r3, #22
 800225a:	d402      	bmi.n	8002262 <_fflush_r+0x32>
 800225c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800225e:	f7ff fbf0 	bl	8001a42 <__retarget_lock_acquire_recursive>
 8002262:	4628      	mov	r0, r5
 8002264:	4621      	mov	r1, r4
 8002266:	f7ff ff5f 	bl	8002128 <__sflush_r>
 800226a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800226c:	07da      	lsls	r2, r3, #31
 800226e:	4605      	mov	r5, r0
 8002270:	d4e4      	bmi.n	800223c <_fflush_r+0xc>
 8002272:	89a3      	ldrh	r3, [r4, #12]
 8002274:	059b      	lsls	r3, r3, #22
 8002276:	d4e1      	bmi.n	800223c <_fflush_r+0xc>
 8002278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800227a:	f7ff fbe3 	bl	8001a44 <__retarget_lock_release_recursive>
 800227e:	e7dd      	b.n	800223c <_fflush_r+0xc>

08002280 <__malloc_lock>:
 8002280:	4801      	ldr	r0, [pc, #4]	@ (8002288 <__malloc_lock+0x8>)
 8002282:	f7ff bbde 	b.w	8001a42 <__retarget_lock_acquire_recursive>
 8002286:	bf00      	nop
 8002288:	200001c8 	.word	0x200001c8

0800228c <__malloc_unlock>:
 800228c:	4801      	ldr	r0, [pc, #4]	@ (8002294 <__malloc_unlock+0x8>)
 800228e:	f7ff bbd9 	b.w	8001a44 <__retarget_lock_release_recursive>
 8002292:	bf00      	nop
 8002294:	200001c8 	.word	0x200001c8

08002298 <__sread>:
 8002298:	b510      	push	{r4, lr}
 800229a:	460c      	mov	r4, r1
 800229c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022a0:	f000 f978 	bl	8002594 <_read_r>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	bfab      	itete	ge
 80022a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80022aa:	89a3      	ldrhlt	r3, [r4, #12]
 80022ac:	181b      	addge	r3, r3, r0
 80022ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80022b2:	bfac      	ite	ge
 80022b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80022b6:	81a3      	strhlt	r3, [r4, #12]
 80022b8:	bd10      	pop	{r4, pc}

080022ba <__swrite>:
 80022ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022be:	461f      	mov	r7, r3
 80022c0:	898b      	ldrh	r3, [r1, #12]
 80022c2:	05db      	lsls	r3, r3, #23
 80022c4:	4605      	mov	r5, r0
 80022c6:	460c      	mov	r4, r1
 80022c8:	4616      	mov	r6, r2
 80022ca:	d505      	bpl.n	80022d8 <__swrite+0x1e>
 80022cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d0:	2302      	movs	r3, #2
 80022d2:	2200      	movs	r2, #0
 80022d4:	f000 f94c 	bl	8002570 <_lseek_r>
 80022d8:	89a3      	ldrh	r3, [r4, #12]
 80022da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022e2:	81a3      	strh	r3, [r4, #12]
 80022e4:	4632      	mov	r2, r6
 80022e6:	463b      	mov	r3, r7
 80022e8:	4628      	mov	r0, r5
 80022ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022ee:	f000 b973 	b.w	80025d8 <_write_r>

080022f2 <__sseek>:
 80022f2:	b510      	push	{r4, lr}
 80022f4:	460c      	mov	r4, r1
 80022f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fa:	f000 f939 	bl	8002570 <_lseek_r>
 80022fe:	1c43      	adds	r3, r0, #1
 8002300:	89a3      	ldrh	r3, [r4, #12]
 8002302:	bf15      	itete	ne
 8002304:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800230a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800230e:	81a3      	strheq	r3, [r4, #12]
 8002310:	bf18      	it	ne
 8002312:	81a3      	strhne	r3, [r4, #12]
 8002314:	bd10      	pop	{r4, pc}

08002316 <__sclose>:
 8002316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800231a:	f000 b8f7 	b.w	800250c <_close_r>

0800231e <__swbuf_r>:
 800231e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002320:	460e      	mov	r6, r1
 8002322:	4614      	mov	r4, r2
 8002324:	4605      	mov	r5, r0
 8002326:	b118      	cbz	r0, 8002330 <__swbuf_r+0x12>
 8002328:	6a03      	ldr	r3, [r0, #32]
 800232a:	b90b      	cbnz	r3, 8002330 <__swbuf_r+0x12>
 800232c:	f7ff fb0e 	bl	800194c <__sinit>
 8002330:	69a3      	ldr	r3, [r4, #24]
 8002332:	60a3      	str	r3, [r4, #8]
 8002334:	89a3      	ldrh	r3, [r4, #12]
 8002336:	071a      	lsls	r2, r3, #28
 8002338:	d501      	bpl.n	800233e <__swbuf_r+0x20>
 800233a:	6923      	ldr	r3, [r4, #16]
 800233c:	b943      	cbnz	r3, 8002350 <__swbuf_r+0x32>
 800233e:	4621      	mov	r1, r4
 8002340:	4628      	mov	r0, r5
 8002342:	f000 f82b 	bl	800239c <__swsetup_r>
 8002346:	b118      	cbz	r0, 8002350 <__swbuf_r+0x32>
 8002348:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800234c:	4638      	mov	r0, r7
 800234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	6922      	ldr	r2, [r4, #16]
 8002354:	1a98      	subs	r0, r3, r2
 8002356:	6963      	ldr	r3, [r4, #20]
 8002358:	b2f6      	uxtb	r6, r6
 800235a:	4283      	cmp	r3, r0
 800235c:	4637      	mov	r7, r6
 800235e:	dc05      	bgt.n	800236c <__swbuf_r+0x4e>
 8002360:	4621      	mov	r1, r4
 8002362:	4628      	mov	r0, r5
 8002364:	f7ff ff64 	bl	8002230 <_fflush_r>
 8002368:	2800      	cmp	r0, #0
 800236a:	d1ed      	bne.n	8002348 <__swbuf_r+0x2a>
 800236c:	68a3      	ldr	r3, [r4, #8]
 800236e:	3b01      	subs	r3, #1
 8002370:	60a3      	str	r3, [r4, #8]
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	6022      	str	r2, [r4, #0]
 8002378:	701e      	strb	r6, [r3, #0]
 800237a:	6962      	ldr	r2, [r4, #20]
 800237c:	1c43      	adds	r3, r0, #1
 800237e:	429a      	cmp	r2, r3
 8002380:	d004      	beq.n	800238c <__swbuf_r+0x6e>
 8002382:	89a3      	ldrh	r3, [r4, #12]
 8002384:	07db      	lsls	r3, r3, #31
 8002386:	d5e1      	bpl.n	800234c <__swbuf_r+0x2e>
 8002388:	2e0a      	cmp	r6, #10
 800238a:	d1df      	bne.n	800234c <__swbuf_r+0x2e>
 800238c:	4621      	mov	r1, r4
 800238e:	4628      	mov	r0, r5
 8002390:	f7ff ff4e 	bl	8002230 <_fflush_r>
 8002394:	2800      	cmp	r0, #0
 8002396:	d0d9      	beq.n	800234c <__swbuf_r+0x2e>
 8002398:	e7d6      	b.n	8002348 <__swbuf_r+0x2a>
	...

0800239c <__swsetup_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4b29      	ldr	r3, [pc, #164]	@ (8002444 <__swsetup_r+0xa8>)
 80023a0:	4605      	mov	r5, r0
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	460c      	mov	r4, r1
 80023a6:	b118      	cbz	r0, 80023b0 <__swsetup_r+0x14>
 80023a8:	6a03      	ldr	r3, [r0, #32]
 80023aa:	b90b      	cbnz	r3, 80023b0 <__swsetup_r+0x14>
 80023ac:	f7ff face 	bl	800194c <__sinit>
 80023b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023b4:	0719      	lsls	r1, r3, #28
 80023b6:	d422      	bmi.n	80023fe <__swsetup_r+0x62>
 80023b8:	06da      	lsls	r2, r3, #27
 80023ba:	d407      	bmi.n	80023cc <__swsetup_r+0x30>
 80023bc:	2209      	movs	r2, #9
 80023be:	602a      	str	r2, [r5, #0]
 80023c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023c4:	81a3      	strh	r3, [r4, #12]
 80023c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023ca:	e033      	b.n	8002434 <__swsetup_r+0x98>
 80023cc:	0758      	lsls	r0, r3, #29
 80023ce:	d512      	bpl.n	80023f6 <__swsetup_r+0x5a>
 80023d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023d2:	b141      	cbz	r1, 80023e6 <__swsetup_r+0x4a>
 80023d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023d8:	4299      	cmp	r1, r3
 80023da:	d002      	beq.n	80023e2 <__swsetup_r+0x46>
 80023dc:	4628      	mov	r0, r5
 80023de:	f000 f90d 	bl	80025fc <_free_r>
 80023e2:	2300      	movs	r3, #0
 80023e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80023e6:	89a3      	ldrh	r3, [r4, #12]
 80023e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80023ec:	81a3      	strh	r3, [r4, #12]
 80023ee:	2300      	movs	r3, #0
 80023f0:	6063      	str	r3, [r4, #4]
 80023f2:	6923      	ldr	r3, [r4, #16]
 80023f4:	6023      	str	r3, [r4, #0]
 80023f6:	89a3      	ldrh	r3, [r4, #12]
 80023f8:	f043 0308 	orr.w	r3, r3, #8
 80023fc:	81a3      	strh	r3, [r4, #12]
 80023fe:	6923      	ldr	r3, [r4, #16]
 8002400:	b94b      	cbnz	r3, 8002416 <__swsetup_r+0x7a>
 8002402:	89a3      	ldrh	r3, [r4, #12]
 8002404:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800240c:	d003      	beq.n	8002416 <__swsetup_r+0x7a>
 800240e:	4621      	mov	r1, r4
 8002410:	4628      	mov	r0, r5
 8002412:	f000 f83f 	bl	8002494 <__smakebuf_r>
 8002416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800241a:	f013 0201 	ands.w	r2, r3, #1
 800241e:	d00a      	beq.n	8002436 <__swsetup_r+0x9a>
 8002420:	2200      	movs	r2, #0
 8002422:	60a2      	str	r2, [r4, #8]
 8002424:	6962      	ldr	r2, [r4, #20]
 8002426:	4252      	negs	r2, r2
 8002428:	61a2      	str	r2, [r4, #24]
 800242a:	6922      	ldr	r2, [r4, #16]
 800242c:	b942      	cbnz	r2, 8002440 <__swsetup_r+0xa4>
 800242e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002432:	d1c5      	bne.n	80023c0 <__swsetup_r+0x24>
 8002434:	bd38      	pop	{r3, r4, r5, pc}
 8002436:	0799      	lsls	r1, r3, #30
 8002438:	bf58      	it	pl
 800243a:	6962      	ldrpl	r2, [r4, #20]
 800243c:	60a2      	str	r2, [r4, #8]
 800243e:	e7f4      	b.n	800242a <__swsetup_r+0x8e>
 8002440:	2000      	movs	r0, #0
 8002442:	e7f7      	b.n	8002434 <__swsetup_r+0x98>
 8002444:	20000018 	.word	0x20000018

08002448 <__swhatbuf_r>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	460c      	mov	r4, r1
 800244c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002450:	2900      	cmp	r1, #0
 8002452:	b096      	sub	sp, #88	@ 0x58
 8002454:	4615      	mov	r5, r2
 8002456:	461e      	mov	r6, r3
 8002458:	da0d      	bge.n	8002476 <__swhatbuf_r+0x2e>
 800245a:	89a3      	ldrh	r3, [r4, #12]
 800245c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	bf14      	ite	ne
 8002466:	2340      	movne	r3, #64	@ 0x40
 8002468:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800246c:	2000      	movs	r0, #0
 800246e:	6031      	str	r1, [r6, #0]
 8002470:	602b      	str	r3, [r5, #0]
 8002472:	b016      	add	sp, #88	@ 0x58
 8002474:	bd70      	pop	{r4, r5, r6, pc}
 8002476:	466a      	mov	r2, sp
 8002478:	f000 f858 	bl	800252c <_fstat_r>
 800247c:	2800      	cmp	r0, #0
 800247e:	dbec      	blt.n	800245a <__swhatbuf_r+0x12>
 8002480:	9901      	ldr	r1, [sp, #4]
 8002482:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002486:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800248a:	4259      	negs	r1, r3
 800248c:	4159      	adcs	r1, r3
 800248e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002492:	e7eb      	b.n	800246c <__swhatbuf_r+0x24>

08002494 <__smakebuf_r>:
 8002494:	898b      	ldrh	r3, [r1, #12]
 8002496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002498:	079d      	lsls	r5, r3, #30
 800249a:	4606      	mov	r6, r0
 800249c:	460c      	mov	r4, r1
 800249e:	d507      	bpl.n	80024b0 <__smakebuf_r+0x1c>
 80024a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80024a4:	6023      	str	r3, [r4, #0]
 80024a6:	6123      	str	r3, [r4, #16]
 80024a8:	2301      	movs	r3, #1
 80024aa:	6163      	str	r3, [r4, #20]
 80024ac:	b003      	add	sp, #12
 80024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b0:	ab01      	add	r3, sp, #4
 80024b2:	466a      	mov	r2, sp
 80024b4:	f7ff ffc8 	bl	8002448 <__swhatbuf_r>
 80024b8:	9f00      	ldr	r7, [sp, #0]
 80024ba:	4605      	mov	r5, r0
 80024bc:	4639      	mov	r1, r7
 80024be:	4630      	mov	r0, r6
 80024c0:	f7ff fc24 	bl	8001d0c <_malloc_r>
 80024c4:	b948      	cbnz	r0, 80024da <__smakebuf_r+0x46>
 80024c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024ca:	059a      	lsls	r2, r3, #22
 80024cc:	d4ee      	bmi.n	80024ac <__smakebuf_r+0x18>
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	f043 0302 	orr.w	r3, r3, #2
 80024d6:	81a3      	strh	r3, [r4, #12]
 80024d8:	e7e2      	b.n	80024a0 <__smakebuf_r+0xc>
 80024da:	89a3      	ldrh	r3, [r4, #12]
 80024dc:	6020      	str	r0, [r4, #0]
 80024de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e2:	81a3      	strh	r3, [r4, #12]
 80024e4:	9b01      	ldr	r3, [sp, #4]
 80024e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80024ea:	b15b      	cbz	r3, 8002504 <__smakebuf_r+0x70>
 80024ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024f0:	4630      	mov	r0, r6
 80024f2:	f000 f82d 	bl	8002550 <_isatty_r>
 80024f6:	b128      	cbz	r0, 8002504 <__smakebuf_r+0x70>
 80024f8:	89a3      	ldrh	r3, [r4, #12]
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	81a3      	strh	r3, [r4, #12]
 8002504:	89a3      	ldrh	r3, [r4, #12]
 8002506:	431d      	orrs	r5, r3
 8002508:	81a5      	strh	r5, [r4, #12]
 800250a:	e7cf      	b.n	80024ac <__smakebuf_r+0x18>

0800250c <_close_r>:
 800250c:	b538      	push	{r3, r4, r5, lr}
 800250e:	4d06      	ldr	r5, [pc, #24]	@ (8002528 <_close_r+0x1c>)
 8002510:	2300      	movs	r3, #0
 8002512:	4604      	mov	r4, r0
 8002514:	4608      	mov	r0, r1
 8002516:	602b      	str	r3, [r5, #0]
 8002518:	f7fe f922 	bl	8000760 <_close>
 800251c:	1c43      	adds	r3, r0, #1
 800251e:	d102      	bne.n	8002526 <_close_r+0x1a>
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	b103      	cbz	r3, 8002526 <_close_r+0x1a>
 8002524:	6023      	str	r3, [r4, #0]
 8002526:	bd38      	pop	{r3, r4, r5, pc}
 8002528:	200001d4 	.word	0x200001d4

0800252c <_fstat_r>:
 800252c:	b538      	push	{r3, r4, r5, lr}
 800252e:	4d07      	ldr	r5, [pc, #28]	@ (800254c <_fstat_r+0x20>)
 8002530:	2300      	movs	r3, #0
 8002532:	4604      	mov	r4, r0
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	602b      	str	r3, [r5, #0]
 800253a:	f7fe f91d 	bl	8000778 <_fstat>
 800253e:	1c43      	adds	r3, r0, #1
 8002540:	d102      	bne.n	8002548 <_fstat_r+0x1c>
 8002542:	682b      	ldr	r3, [r5, #0]
 8002544:	b103      	cbz	r3, 8002548 <_fstat_r+0x1c>
 8002546:	6023      	str	r3, [r4, #0]
 8002548:	bd38      	pop	{r3, r4, r5, pc}
 800254a:	bf00      	nop
 800254c:	200001d4 	.word	0x200001d4

08002550 <_isatty_r>:
 8002550:	b538      	push	{r3, r4, r5, lr}
 8002552:	4d06      	ldr	r5, [pc, #24]	@ (800256c <_isatty_r+0x1c>)
 8002554:	2300      	movs	r3, #0
 8002556:	4604      	mov	r4, r0
 8002558:	4608      	mov	r0, r1
 800255a:	602b      	str	r3, [r5, #0]
 800255c:	f7fe f91c 	bl	8000798 <_isatty>
 8002560:	1c43      	adds	r3, r0, #1
 8002562:	d102      	bne.n	800256a <_isatty_r+0x1a>
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	b103      	cbz	r3, 800256a <_isatty_r+0x1a>
 8002568:	6023      	str	r3, [r4, #0]
 800256a:	bd38      	pop	{r3, r4, r5, pc}
 800256c:	200001d4 	.word	0x200001d4

08002570 <_lseek_r>:
 8002570:	b538      	push	{r3, r4, r5, lr}
 8002572:	4d07      	ldr	r5, [pc, #28]	@ (8002590 <_lseek_r+0x20>)
 8002574:	4604      	mov	r4, r0
 8002576:	4608      	mov	r0, r1
 8002578:	4611      	mov	r1, r2
 800257a:	2200      	movs	r2, #0
 800257c:	602a      	str	r2, [r5, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	f7fe f915 	bl	80007ae <_lseek>
 8002584:	1c43      	adds	r3, r0, #1
 8002586:	d102      	bne.n	800258e <_lseek_r+0x1e>
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	b103      	cbz	r3, 800258e <_lseek_r+0x1e>
 800258c:	6023      	str	r3, [r4, #0]
 800258e:	bd38      	pop	{r3, r4, r5, pc}
 8002590:	200001d4 	.word	0x200001d4

08002594 <_read_r>:
 8002594:	b538      	push	{r3, r4, r5, lr}
 8002596:	4d07      	ldr	r5, [pc, #28]	@ (80025b4 <_read_r+0x20>)
 8002598:	4604      	mov	r4, r0
 800259a:	4608      	mov	r0, r1
 800259c:	4611      	mov	r1, r2
 800259e:	2200      	movs	r2, #0
 80025a0:	602a      	str	r2, [r5, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	f7fe f8a3 	bl	80006ee <_read>
 80025a8:	1c43      	adds	r3, r0, #1
 80025aa:	d102      	bne.n	80025b2 <_read_r+0x1e>
 80025ac:	682b      	ldr	r3, [r5, #0]
 80025ae:	b103      	cbz	r3, 80025b2 <_read_r+0x1e>
 80025b0:	6023      	str	r3, [r4, #0]
 80025b2:	bd38      	pop	{r3, r4, r5, pc}
 80025b4:	200001d4 	.word	0x200001d4

080025b8 <_sbrk_r>:
 80025b8:	b538      	push	{r3, r4, r5, lr}
 80025ba:	4d06      	ldr	r5, [pc, #24]	@ (80025d4 <_sbrk_r+0x1c>)
 80025bc:	2300      	movs	r3, #0
 80025be:	4604      	mov	r4, r0
 80025c0:	4608      	mov	r0, r1
 80025c2:	602b      	str	r3, [r5, #0]
 80025c4:	f7fe f900 	bl	80007c8 <_sbrk>
 80025c8:	1c43      	adds	r3, r0, #1
 80025ca:	d102      	bne.n	80025d2 <_sbrk_r+0x1a>
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	b103      	cbz	r3, 80025d2 <_sbrk_r+0x1a>
 80025d0:	6023      	str	r3, [r4, #0]
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
 80025d4:	200001d4 	.word	0x200001d4

080025d8 <_write_r>:
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4d07      	ldr	r5, [pc, #28]	@ (80025f8 <_write_r+0x20>)
 80025dc:	4604      	mov	r4, r0
 80025de:	4608      	mov	r0, r1
 80025e0:	4611      	mov	r1, r2
 80025e2:	2200      	movs	r2, #0
 80025e4:	602a      	str	r2, [r5, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f7fe f89e 	bl	8000728 <_write>
 80025ec:	1c43      	adds	r3, r0, #1
 80025ee:	d102      	bne.n	80025f6 <_write_r+0x1e>
 80025f0:	682b      	ldr	r3, [r5, #0]
 80025f2:	b103      	cbz	r3, 80025f6 <_write_r+0x1e>
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	200001d4 	.word	0x200001d4

080025fc <_free_r>:
 80025fc:	b538      	push	{r3, r4, r5, lr}
 80025fe:	4605      	mov	r5, r0
 8002600:	2900      	cmp	r1, #0
 8002602:	d041      	beq.n	8002688 <_free_r+0x8c>
 8002604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002608:	1f0c      	subs	r4, r1, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	bfb8      	it	lt
 800260e:	18e4      	addlt	r4, r4, r3
 8002610:	f7ff fe36 	bl	8002280 <__malloc_lock>
 8002614:	4a1d      	ldr	r2, [pc, #116]	@ (800268c <_free_r+0x90>)
 8002616:	6813      	ldr	r3, [r2, #0]
 8002618:	b933      	cbnz	r3, 8002628 <_free_r+0x2c>
 800261a:	6063      	str	r3, [r4, #4]
 800261c:	6014      	str	r4, [r2, #0]
 800261e:	4628      	mov	r0, r5
 8002620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002624:	f7ff be32 	b.w	800228c <__malloc_unlock>
 8002628:	42a3      	cmp	r3, r4
 800262a:	d908      	bls.n	800263e <_free_r+0x42>
 800262c:	6820      	ldr	r0, [r4, #0]
 800262e:	1821      	adds	r1, r4, r0
 8002630:	428b      	cmp	r3, r1
 8002632:	bf01      	itttt	eq
 8002634:	6819      	ldreq	r1, [r3, #0]
 8002636:	685b      	ldreq	r3, [r3, #4]
 8002638:	1809      	addeq	r1, r1, r0
 800263a:	6021      	streq	r1, [r4, #0]
 800263c:	e7ed      	b.n	800261a <_free_r+0x1e>
 800263e:	461a      	mov	r2, r3
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	b10b      	cbz	r3, 8002648 <_free_r+0x4c>
 8002644:	42a3      	cmp	r3, r4
 8002646:	d9fa      	bls.n	800263e <_free_r+0x42>
 8002648:	6811      	ldr	r1, [r2, #0]
 800264a:	1850      	adds	r0, r2, r1
 800264c:	42a0      	cmp	r0, r4
 800264e:	d10b      	bne.n	8002668 <_free_r+0x6c>
 8002650:	6820      	ldr	r0, [r4, #0]
 8002652:	4401      	add	r1, r0
 8002654:	1850      	adds	r0, r2, r1
 8002656:	4283      	cmp	r3, r0
 8002658:	6011      	str	r1, [r2, #0]
 800265a:	d1e0      	bne.n	800261e <_free_r+0x22>
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	6053      	str	r3, [r2, #4]
 8002662:	4408      	add	r0, r1
 8002664:	6010      	str	r0, [r2, #0]
 8002666:	e7da      	b.n	800261e <_free_r+0x22>
 8002668:	d902      	bls.n	8002670 <_free_r+0x74>
 800266a:	230c      	movs	r3, #12
 800266c:	602b      	str	r3, [r5, #0]
 800266e:	e7d6      	b.n	800261e <_free_r+0x22>
 8002670:	6820      	ldr	r0, [r4, #0]
 8002672:	1821      	adds	r1, r4, r0
 8002674:	428b      	cmp	r3, r1
 8002676:	bf04      	itt	eq
 8002678:	6819      	ldreq	r1, [r3, #0]
 800267a:	685b      	ldreq	r3, [r3, #4]
 800267c:	6063      	str	r3, [r4, #4]
 800267e:	bf04      	itt	eq
 8002680:	1809      	addeq	r1, r1, r0
 8002682:	6021      	streq	r1, [r4, #0]
 8002684:	6054      	str	r4, [r2, #4]
 8002686:	e7ca      	b.n	800261e <_free_r+0x22>
 8002688:	bd38      	pop	{r3, r4, r5, pc}
 800268a:	bf00      	nop
 800268c:	200001d0 	.word	0x200001d0

08002690 <_init>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr

0800269c <_fini>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	bf00      	nop
 80026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a2:	bc08      	pop	{r3}
 80026a4:	469e      	mov	lr, r3
 80026a6:	4770      	bx	lr
