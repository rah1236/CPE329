
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000283c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080029e8  080029e8  000039e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae4  08002ae4  00004790  2**0
                  CONTENTS
  4 .ARM          00000008  08002ae4  08002ae4  00003ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002aec  08002aec  00004790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aec  08002aec  00003aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002af0  08002af0  00003af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000790  20000000  08002af4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000790  08003284  00004790  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  08003284  000047e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004790  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a11  00000000  00000000  000047c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f9  00000000  00000000  0000b1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000cad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000510  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b08  00000000  00000000  0000d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091c1  00000000  00000000  000101f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f317d  00000000  00000000  000193b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c52e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019f4  00000000  00000000  0010c574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0010df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000790 	.word	0x20000790
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080029d0 	.word	0x080029d0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000794 	.word	0x20000794
 80001e8:	080029d0 	.word	0x080029d0

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	@ 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_d2iz>:
 8000574:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000578:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800057c:	d215      	bcs.n	80005aa <__aeabi_d2iz+0x36>
 800057e:	d511      	bpl.n	80005a4 <__aeabi_d2iz+0x30>
 8000580:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000584:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000588:	d912      	bls.n	80005b0 <__aeabi_d2iz+0x3c>
 800058a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800058e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000592:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000596:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800059a:	fa23 f002 	lsr.w	r0, r3, r2
 800059e:	bf18      	it	ne
 80005a0:	4240      	negne	r0, r0
 80005a2:	4770      	bx	lr
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	4770      	bx	lr
 80005aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005ae:	d105      	bne.n	80005bc <__aeabi_d2iz+0x48>
 80005b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80005b4:	bf08      	it	eq
 80005b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80005ba:	4770      	bx	lr
 80005bc:	f04f 0000 	mov.w	r0, #0
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <SysTick_Init>:
 * action   : configure SysTick timer for use with delay_us().
 * authors  : provided project code
 * version  : 0.1
 * date     : 240424
 * -------------------------------------------------------------------------- */
void SysTick_Init(void) {
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
    SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |         // enable SysTick Timer
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <SysTick_Init+0x28>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <SysTick_Init+0x28>)
 80005ce:	f043 0305 	orr.w	r3, r3, #5
 80005d2:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk);  // select CPU clock
    SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);   // disable interrupt
 80005d4:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <SysTick_Init+0x28>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <SysTick_Init+0x28>)
 80005da:	f023 0302 	bic.w	r3, r3, #2
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000e010 	.word	0xe000e010

080005f0 <delay_us>:
 *            e.g. @4MHz, delay_us(1) = 10=15 us delay.
 * authors  : provided project code
 * version  : 0.1
 * date     : 240424
 * -------------------------------------------------------------------------- */
void delay_us(const uint32_t time_us) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    // set the counts for the specified delay
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <delay_us+0x50>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a11      	ldr	r2, [pc, #68]	@ (8000644 <delay_us+0x54>)
 80005fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000602:	0c9b      	lsrs	r3, r3, #18
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	fb02 f303 	mul.w	r3, r2, r3
 800060a:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <delay_us+0x58>)
 800060c:	3b01      	subs	r3, #1
 800060e:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear timer count
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <delay_us+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear count flag
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <delay_us+0x58>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <delay_us+0x58>)
 800061c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000620:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 8000622:	bf00      	nop
 8000624:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <delay_us+0x58>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0f9      	beq.n	8000624 <delay_us+0x34>
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000784 	.word	0x20000784
 8000644:	431bde83 	.word	0x431bde83
 8000648:	e000e010 	.word	0xe000e010

0800064c <Keypad_Config>:
 * authors  : Daniel Hoefer (drh) - dhoefer@calpoly.edu
 * version  : 0.1
 * date     : 240417
 * -------------------------------------------------------------------------- */
void Keypad_Config(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);	//enable clock
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <Keypad_Config+0x74>)
 8000652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000654:	4a1a      	ldr	r2, [pc, #104]	@ (80006c0 <Keypad_Config+0x74>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOC->MODER   &= 	~(GPIO_MODER_MODE4 |
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <Keypad_Config+0x78>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a18      	ldr	r2, [pc, #96]	@ (80006c4 <Keypad_Config+0x78>)
 8000662:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8000666:	6013      	str	r3, [r2, #0]
					  	  GPIO_MODER_MODE5 |
						  GPIO_MODER_MODE6 );
	GPIOC->MODER   |=  	 (GPIO_MODER_MODE4_0 |
 8000668:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <Keypad_Config+0x78>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <Keypad_Config+0x78>)
 800066e:	f443 53a8 	orr.w	r3, r3, #5376	@ 0x1500
 8000672:	6013      	str	r3, [r2, #0]
					  	  GPIO_MODER_MODE5_0 |
						  GPIO_MODER_MODE6_0 );
	GPIOC->PUPDR   &= 	~(GPIO_PUPDR_PUPD4 |
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <Keypad_Config+0x78>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <Keypad_Config+0x78>)
 800067a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800067e:	60d3      	str	r3, [r2, #12]
					  	  GPIO_PUPDR_PUPD5 |
						  GPIO_PUPDR_PUPD6 );
	GPIOC->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED4_Pos) |
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <Keypad_Config+0x78>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	4a0f      	ldr	r2, [pc, #60]	@ (80006c4 <Keypad_Config+0x78>)
 8000686:	f443 537c 	orr.w	r3, r3, #16128	@ 0x3f00
 800068a:	6093      	str	r3, [r2, #8]
						(3 << GPIO_OSPEEDR_OSPEED5_Pos) |
						(3 << GPIO_OSPEEDR_OSPEED6_Pos) );
	GPIOC->BRR = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 800068c:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <Keypad_Config+0x78>)
 800068e:	2270      	movs	r2, #112	@ 0x70
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

	// Configure PC8-11 as inputs with pulldowns
	GPIOC->MODER   &= ~(GPIO_MODER_MODE8_Msk |
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <Keypad_Config+0x78>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a0b      	ldr	r2, [pc, #44]	@ (80006c4 <Keypad_Config+0x78>)
 8000698:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800069c:	6013      	str	r3, [r2, #0]
	                    GPIO_MODER_MODE9_Msk |
	                    GPIO_MODER_MODE10_Msk |
	                    GPIO_MODER_MODE11_Msk);
	GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD8_Msk |
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <Keypad_Config+0x78>)
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	4a08      	ldr	r2, [pc, #32]	@ (80006c4 <Keypad_Config+0x78>)
 80006a4:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80006a8:	60d3      	str	r3, [r2, #12]
	                    GPIO_PUPDR_PUPD9_Msk |
	                    GPIO_PUPDR_PUPD10_Msk |
	                    GPIO_PUPDR_PUPD11_Msk);
	GPIOC->PUPDR   |=  (GPIO_PUPDR_PUPD8_1 |
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <Keypad_Config+0x78>)
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	4a05      	ldr	r2, [pc, #20]	@ (80006c4 <Keypad_Config+0x78>)
 80006b0:	f443 032a 	orr.w	r3, r3, #11141120	@ 0xaa0000
 80006b4:	60d3      	str	r3, [r2, #12]
	                    GPIO_PUPDR_PUPD9_1 |
	                    GPIO_PUPDR_PUPD10_1 |
	                    GPIO_PUPDR_PUPD11_1);
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000800 	.word	0x48000800

080006c8 <Keypad_IsAnyKeyPressed>:
 * authors  : Daniel Hoefer (drh) - dhoefer@calpoly.edu
 * version  : 0.1
 * date     : 240417
 * -------------------------------------------------------------------------- */
int Keypad_IsAnyKeyPressed(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
   COL_PORT->BSRR = COL_PINS;         	     	// set all columns HI
 80006cc:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <Keypad_IsAnyKeyPressed+0x34>)
 80006ce:	2270      	movs	r2, #112	@ 0x70
 80006d0:	619a      	str	r2, [r3, #24]
   if ((ROW_PORT->IDR & ROW_PINS) != 0 )		//check for keypress
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <Keypad_IsAnyKeyPressed+0x34>)
 80006d4:	691b      	ldr	r3, [r3, #16]
 80006d6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00a      	beq.n	80006f4 <Keypad_IsAnyKeyPressed+0x2c>
   {
       delay_us( 100000 );
 80006de:	4808      	ldr	r0, [pc, #32]	@ (8000700 <Keypad_IsAnyKeyPressed+0x38>)
 80006e0:	f7ff ff86 	bl	80005f0 <delay_us>
       if((ROW_PORT->IDR & ROW_PINS) != 0 )
 80006e4:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <Keypad_IsAnyKeyPressed+0x34>)
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <Keypad_IsAnyKeyPressed+0x2c>
           return( 1 );						//yes!
 80006f0:	2301      	movs	r3, #1
 80006f2:	e000      	b.n	80006f6 <Keypad_IsAnyKeyPressed+0x2e>
   }
   return( 0 );                         // nope.
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	48000800 	.word	0x48000800
 8000700:	000186a0 	.word	0x000186a0

08000704 <Keypad_WhichKeyIsPressed>:
 * authors  : Daniel Hoefer (drh) - dhoefer@calpoly.edu
 * version  : 0.1
 * date     : 240417
 * -------------------------------------------------------------------------- */
int Keypad_WhichKeyIsPressed(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
	int8_t iRow=0, iCol=0, iKey=0;  // keypad row & col index, key ID result
 800070a:	2300      	movs	r3, #0
 800070c:	71fb      	strb	r3, [r7, #7]
 800070e:	2300      	movs	r3, #0
 8000710:	71bb      	strb	r3, [r7, #6]
 8000712:	2300      	movs	r3, #0
 8000714:	717b      	strb	r3, [r7, #5]
	int8_t bGotKey = 0;             // bool for keypress, 0 = no press
 8000716:	2300      	movs	r3, #0
 8000718:	713b      	strb	r3, [r7, #4]

	COL_PORT->BSRR = COL_PINS;							// set all columns HI
 800071a:	4b3c      	ldr	r3, [pc, #240]	@ (800080c <Keypad_WhichKeyIsPressed+0x108>)
 800071c:	2270      	movs	r2, #112	@ 0x70
 800071e:	619a      	str	r2, [r3, #24]
	delay_us( SETTLE );
 8000720:	200a      	movs	r0, #10
 8000722:	f7ff ff65 	bl	80005f0 <delay_us>
	for ( iRow = 0; iRow < NUM_ROWS; iRow++ )			// check all ROWS
 8000726:	2300      	movs	r3, #0
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	e03f      	b.n	80007ac <Keypad_WhichKeyIsPressed+0xa8>
	{
		if ( ROW_PORT->IDR & (BIT0 << (8+iRow)) ) {		// keypress in iRow!
 800072c:	4b37      	ldr	r3, [pc, #220]	@ (800080c <Keypad_WhichKeyIsPressed+0x108>)
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000734:	3208      	adds	r2, #8
 8000736:	2101      	movs	r1, #1
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	4013      	ands	r3, r2
 800073e:	2b00      	cmp	r3, #0
 8000740:	d02e      	beq.n	80007a0 <Keypad_WhichKeyIsPressed+0x9c>
			COL_PORT->BRR = COL_PINS;            	 	// set all columns LO
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <Keypad_WhichKeyIsPressed+0x108>)
 8000744:	2270      	movs	r2, #112	@ 0x70
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
			delay_us( SETTLE );
 8000748:	200a      	movs	r0, #10
 800074a:	f7ff ff51 	bl	80005f0 <delay_us>
			for ( iCol = 0; iCol < NUM_COLS; iCol++ )		//1 column at a time
 800074e:	2300      	movs	r3, #0
 8000750:	71bb      	strb	r3, [r7, #6]
 8000752:	e01d      	b.n	8000790 <Keypad_WhichKeyIsPressed+0x8c>
			{
				COL_PORT->BSRR = ( BIT0 << (4+iCol) );     	//set this column HI
 8000754:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000758:	3304      	adds	r3, #4
 800075a:	2201      	movs	r2, #1
 800075c:	409a      	lsls	r2, r3
 800075e:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <Keypad_WhichKeyIsPressed+0x108>)
 8000760:	619a      	str	r2, [r3, #24]
				delay_us( SETTLE );
 8000762:	200a      	movs	r0, #10
 8000764:	f7ff ff44 	bl	80005f0 <delay_us>
				if ( ROW_PORT->IDR & (BIT0 << (8+iRow)) )	// keypress in iCol!
 8000768:	4b28      	ldr	r3, [pc, #160]	@ (800080c <Keypad_WhichKeyIsPressed+0x108>)
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000770:	3208      	adds	r2, #8
 8000772:	2101      	movs	r1, #1
 8000774:	fa01 f202 	lsl.w	r2, r1, r2
 8000778:	4013      	ands	r3, r2
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <Keypad_WhichKeyIsPressed+0x80>
				{
				   bGotKey = 1;								// yay, can now exit
 800077e:	2301      	movs	r3, #1
 8000780:	713b      	strb	r3, [r7, #4]
				   break;                                  	// for iCol loop!
 8000782:	e009      	b.n	8000798 <Keypad_WhichKeyIsPressed+0x94>
			for ( iCol = 0; iCol < NUM_COLS; iCol++ )		//1 column at a time
 8000784:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	3301      	adds	r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	71bb      	strb	r3, [r7, #6]
 8000790:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000794:	2b02      	cmp	r3, #2
 8000796:	dddd      	ble.n	8000754 <Keypad_WhichKeyIsPressed+0x50>
				}
			}
			if ( bGotKey )
 8000798:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10a      	bne.n	80007b6 <Keypad_WhichKeyIsPressed+0xb2>
	for ( iRow = 0; iRow < NUM_ROWS; iRow++ )			// check all ROWS
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	3301      	adds	r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	ddbb      	ble.n	800072c <Keypad_WhichKeyIsPressed+0x28>
 80007b4:	e000      	b.n	80007b8 <Keypad_WhichKeyIsPressed+0xb4>
				break;							//and we can exit for iRow loop!
 80007b6:	bf00      	nop
		}
	}
   // encode {iRow,iCol} into LED word : row 1-3 : numeric, ‘1’-’9’
   //	                                 row 4   : ‘*’=10, ‘0’=0, ‘#’=15
   //                                    no press: send NO_KEYPRESS
	if ( bGotKey )
 80007b8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d01f      	beq.n	8000800 <Keypad_WhichKeyIsPressed+0xfc>
	{
		iKey = ( iRow * NUM_COLS ) + iCol + 1;  // handle numeric keys ...
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	461a      	mov	r2, r3
 80007c4:	0052      	lsls	r2, r2, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	4413      	add	r3, r2
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	717b      	strb	r3, [r7, #5]

		if ( iKey == KEY_ZERO )                 // handle '0' case
 80007d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80007da:	2b0b      	cmp	r3, #11
 80007dc:	d101      	bne.n	80007e2 <Keypad_WhichKeyIsPressed+0xde>
			iKey = CODE_ZERO;
 80007de:	2300      	movs	r3, #0
 80007e0:	717b      	strb	r3, [r7, #5]
		if ( iKey == KEY_STAR )                 // handles '*' case
 80007e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80007e6:	2b0a      	cmp	r3, #10
 80007e8:	d101      	bne.n	80007ee <Keypad_WhichKeyIsPressed+0xea>
 	         iKey = CODE_STAR;
 80007ea:	230a      	movs	r3, #10
 80007ec:	717b      	strb	r3, [r7, #5]
		if ( iKey == KEY_HASHTAG )				// handles '#' case
 80007ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80007f2:	2b0c      	cmp	r3, #12
 80007f4:	d101      	bne.n	80007fa <Keypad_WhichKeyIsPressed+0xf6>
 	         iKey = CODE_HASHTAG;
 80007f6:	230f      	movs	r3, #15
 80007f8:	717b      	strb	r3, [r7, #5]

		return( iKey );                         // return encoded keypress
 80007fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80007fe:	e001      	b.n	8000804 <Keypad_WhichKeyIsPressed+0x100>
   }
   return( NO_KEYPRESS );                     	// unable to verify keypress
 8000800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	48000800 	.word	0x48000800

08000810 <LCD_init>:
 * action   : sets up all GPIO outputs for the lcd, sends setup commands
 * authors  : Daniel Hoefer (drh) - dhoefer@calpoly.edu
 * version  : 0.1
 * date     : 240424
 * -------------------------------------------------------------------------- */
void LCD_init( void )  {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

    // Enable clock for GPIO port
    RCC->AHB2ENR   |=   (RCC_AHB2ENR_GPIODEN);   //enable clock
 8000816:	4b32      	ldr	r3, [pc, #200]	@ (80008e0 <LCD_init+0xd0>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a31      	ldr	r2, [pc, #196]	@ (80008e0 <LCD_init+0xd0>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Configure GPIO pins for the lcd
    LCD_PORT->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 |
 8000822:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <LCD_init+0xd4>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a2f      	ldr	r2, [pc, #188]	@ (80008e4 <LCD_init+0xd4>)
 8000828:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800082c:	f023 030f 	bic.w	r3, r3, #15
 8000830:	6013      	str	r3, [r2, #0]
                         GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
                         GPIO_MODER_MODE4 | GPIO_MODER_MODE5);

    LCD_PORT->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 |
 8000832:	4b2c      	ldr	r3, [pc, #176]	@ (80008e4 <LCD_init+0xd4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a2b      	ldr	r2, [pc, #172]	@ (80008e4 <LCD_init+0xd4>)
 8000838:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800083c:	f043 0305 	orr.w	r3, r3, #5
 8000840:	6013      	str	r3, [r2, #0]
                        GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |
                        GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0);

    LCD_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 |
 8000842:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <LCD_init+0xd4>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	4a27      	ldr	r2, [pc, #156]	@ (80008e4 <LCD_init+0xd4>)
 8000848:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800084c:	f023 030f 	bic.w	r3, r3, #15
 8000850:	60d3      	str	r3, [r2, #12]
                         GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3 |
                         GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5);

    LCD_PORT->OSPEEDR |= ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 8000852:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <LCD_init+0xd4>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	4a23      	ldr	r2, [pc, #140]	@ (80008e4 <LCD_init+0xd4>)
 8000858:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800085c:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8000860:	6093      	str	r3, [r2, #8]
                          (3 << GPIO_OSPEEDR_OSPEED3_Pos) |
                          (3 << GPIO_OSPEEDR_OSPEED4_Pos) |
                          (3 << GPIO_OSPEEDR_OSPEED5_Pos));

    // Default all outputs to off
    LCD_PORT->BRR = (LCD_DATA_BITS | LCD_EN | LCD_RS);
 8000862:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <LCD_init+0xd4>)
 8000864:	223f      	movs	r2, #63	@ 0x3f
 8000866:	629a      	str	r2, [r3, #40]	@ 0x28


    delay_us( 40000 );                     // power-up wait 40 ms
 8000868:	f649 4040 	movw	r0, #40000	@ 0x9c40
 800086c:	f7ff fec0 	bl	80005f0 <delay_us>
    for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	e008      	b.n	8000888 <LCD_init+0x78>
        LCD_4b_command( 0x30 );            // HI 4b of 8b cmd, low nibble = X
 8000876:	2030      	movs	r0, #48	@ 0x30
 8000878:	f000 f84e 	bl	8000918 <LCD_4b_command>
        delay_us( 200 );
 800087c:	20c8      	movs	r0, #200	@ 0xc8
 800087e:	f7ff feb7 	bl	80005f0 <delay_us>
    for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3301      	adds	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b02      	cmp	r3, #2
 800088c:	ddf3      	ble.n	8000876 <LCD_init+0x66>
    }
    LCD_4b_command( 0x20 ); // fcn set #4: 4b cmd set 4b mode - next 0x28:2-line
 800088e:	2020      	movs	r0, #32
 8000890:	f000 f842 	bl	8000918 <LCD_4b_command>
    delay_us( 40 );
 8000894:	2028      	movs	r0, #40	@ 0x28
 8000896:	f7ff feab 	bl	80005f0 <delay_us>
    LCD_command( 0x28 );    // Function set: 4-bit/2-line
 800089a:	2028      	movs	r0, #40	@ 0x28
 800089c:	f000 f85c 	bl	8000958 <LCD_command>
    delay_us( 40 );
 80008a0:	2028      	movs	r0, #40	@ 0x28
 80008a2:	f7ff fea5 	bl	80005f0 <delay_us>
    LCD_command( 0x10 );    // Set cursor
 80008a6:	2010      	movs	r0, #16
 80008a8:	f000 f856 	bl	8000958 <LCD_command>
    delay_us( 40 );
 80008ac:	2028      	movs	r0, #40	@ 0x28
 80008ae:	f7ff fe9f 	bl	80005f0 <delay_us>
    LCD_command( 0x0C );    // display on, no cursor
 80008b2:	200c      	movs	r0, #12
 80008b4:	f000 f850 	bl	8000958 <LCD_command>
    delay_us( 40 );
 80008b8:	2028      	movs	r0, #40	@ 0x28
 80008ba:	f7ff fe99 	bl	80005f0 <delay_us>
    LCD_command( 0x06 );    // entry mode set
 80008be:	2006      	movs	r0, #6
 80008c0:	f000 f84a 	bl	8000958 <LCD_command>
    delay_us( 40 );
 80008c4:	2028      	movs	r0, #40	@ 0x28
 80008c6:	f7ff fe93 	bl	80005f0 <delay_us>
    LCD_command( 0x01 );    // clear
 80008ca:	2001      	movs	r0, #1
 80008cc:	f000 f844 	bl	8000958 <LCD_command>
    delay_us( 40000 );
 80008d0:	f649 4040 	movw	r0, #40000	@ 0x9c40
 80008d4:	f7ff fe8c 	bl	80005f0 <delay_us>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000c00 	.word	0x48000c00

080008e8 <LCD_pulse_ENA>:
 * action   : pulses enable pin to send data
 * authors  : provided project code
 * version  : 0.1
 * date     : 240424
 * -------------------------------------------------------------------------- */
void LCD_pulse_ENA( void )  {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    // ENAble line sends command on falling edge
    // set to restore default then clear to trigger
    LCD_PORT->ODR   |= ( LCD_EN );         // ENABLE = HI
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <LCD_pulse_ENA+0x2c>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <LCD_pulse_ENA+0x2c>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6153      	str	r3, [r2, #20]
    delay_us( 5 );                         // TDDR > 320 ns
 80008f8:	2005      	movs	r0, #5
 80008fa:	f7ff fe79 	bl	80005f0 <delay_us>
    LCD_PORT->ODR   &= ~( LCD_EN );        // ENABLE = LOW
 80008fe:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <LCD_pulse_ENA+0x2c>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <LCD_pulse_ENA+0x2c>)
 8000904:	f023 0310 	bic.w	r3, r3, #16
 8000908:	6153      	str	r3, [r2, #20]
    delay_us( 5 );                         // low values flakey, see A3:p.1
 800090a:	2005      	movs	r0, #5
 800090c:	f7ff fe70 	bl	80005f0 <delay_us>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	48000c00 	.word	0x48000c00

08000918 <LCD_4b_command>:
 * action   : LCD command using high nibble only (wake-up' 0x30 commands)
 * authors  : provided project code
 * version  : 0.1
 * date     : 240424
 * -------------------------------------------------------------------------- */
void LCD_4b_command( uint8_t command )  {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
    LCD_PORT->ODR   &= ~( LCD_DATA_BITS );      // clear DATA bits
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <LCD_4b_command+0x3c>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a0b      	ldr	r2, [pc, #44]	@ (8000954 <LCD_4b_command+0x3c>)
 8000928:	f023 030f 	bic.w	r3, r3, #15
 800092c:	6153      	str	r3, [r2, #20]
    LCD_PORT->ODR   |= ( command >> 4 );        // DATA = command
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <LCD_4b_command+0x3c>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	79fa      	ldrb	r2, [r7, #7]
 8000934:	0912      	lsrs	r2, r2, #4
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	4611      	mov	r1, r2
 800093a:	4a06      	ldr	r2, [pc, #24]	@ (8000954 <LCD_4b_command+0x3c>)
 800093c:	430b      	orrs	r3, r1
 800093e:	6153      	str	r3, [r2, #20]
    delay_us( 5 );
 8000940:	2005      	movs	r0, #5
 8000942:	f7ff fe55 	bl	80005f0 <delay_us>
    LCD_pulse_ENA( );
 8000946:	f7ff ffcf 	bl	80008e8 <LCD_pulse_ENA>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	48000c00 	.word	0x48000c00

08000958 <LCD_command>:
 * action   : send command to LCD in 4-bit instruction mode
 * authors  : provided project code
 * version  : 0.1
 * date     : 240424
 * -------------------------------------------------------------------------- */
void LCD_command( uint8_t command )  {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
    // HIGH nibble then LOW nibble, timing sensitive
    LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <LCD_command+0x64>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a15      	ldr	r2, [pc, #84]	@ (80009bc <LCD_command+0x64>)
 8000968:	f023 030f 	bic.w	r3, r3, #15
 800096c:	6153      	str	r3, [r2, #20]
    LCD_PORT->ODR   |= ( (command>>4) & LCD_DATA_BITS ); // HIGH shifted low
 800096e:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <LCD_command+0x64>)
 8000970:	695a      	ldr	r2, [r3, #20]
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	091b      	lsrs	r3, r3, #4
 8000976:	b2db      	uxtb	r3, r3
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	490f      	ldr	r1, [pc, #60]	@ (80009bc <LCD_command+0x64>)
 800097e:	4313      	orrs	r3, r2
 8000980:	614b      	str	r3, [r1, #20]
    delay_us( 5 );
 8000982:	2005      	movs	r0, #5
 8000984:	f7ff fe34 	bl	80005f0 <delay_us>
    LCD_pulse_ENA( );                                    // latch HIGH NIBBLE
 8000988:	f7ff ffae 	bl	80008e8 <LCD_pulse_ENA>

    LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <LCD_command+0x64>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <LCD_command+0x64>)
 8000992:	f023 030f 	bic.w	r3, r3, #15
 8000996:	6153      	str	r3, [r2, #20]
    LCD_PORT->ODR   |= ( command & LCD_DATA_BITS );      // LOW nibble
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <LCD_command+0x64>)
 800099a:	695a      	ldr	r2, [r3, #20]
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	4906      	ldr	r1, [pc, #24]	@ (80009bc <LCD_command+0x64>)
 80009a4:	4313      	orrs	r3, r2
 80009a6:	614b      	str	r3, [r1, #20]
    delay_us( 5 );
 80009a8:	2005      	movs	r0, #5
 80009aa:	f7ff fe21 	bl	80005f0 <delay_us>
    LCD_pulse_ENA( );                                    // latch LOW NIBBLE
 80009ae:	f7ff ff9b 	bl	80008e8 <LCD_pulse_ENA>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	48000c00 	.word	0x48000c00

080009c0 <LCD_write_char>:
 * action   : prints a single character on the display
 * authors  : provided project code
 * version  : 0.1
 * date     : 240424
 * -------------------------------------------------------------------------- */
void LCD_write_char( uint8_t letter )  {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
    // calls LCD_command() w/char data; assumes all ctrl bits set LO in LCD_init()
    LCD_PORT->ODR   |= (LCD_RS);       // RS = HI for data to address
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <LCD_write_char+0x38>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <LCD_write_char+0x38>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	6153      	str	r3, [r2, #20]
    delay_us( 5 );
 80009d6:	2005      	movs	r0, #5
 80009d8:	f7ff fe0a 	bl	80005f0 <delay_us>
    LCD_command( letter );             // character to print
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ffba 	bl	8000958 <LCD_command>
    LCD_PORT->ODR   &= ~(LCD_RS);      // RS = LO
 80009e4:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <LCD_write_char+0x38>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	4a03      	ldr	r2, [pc, #12]	@ (80009f8 <LCD_write_char+0x38>)
 80009ea:	f023 0320 	bic.w	r3, r3, #32
 80009ee:	6153      	str	r3, [r2, #20]
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	48000c00 	.word	0x48000c00

080009fc <LCD_write_text>:
 * action   : prints a line of text to the display
 * authors  : provided project code
 * version  : 0.1
 * date     : 240424
 * -------------------------------------------------------------------------- */
void LCD_write_text(const char *text) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
    size_t  len = strlen(text);             // find length of char array
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff fbf1 	bl	80001ec <strlen>
 8000a0a:	60b8      	str	r0, [r7, #8]

    for ( size_t  i = 0; i < len; i++ ) {
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	e00c      	b.n	8000a2c <LCD_write_text+0x30>
        LCD_write_char(text[i]);            //write each char to the LCD
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ffd0 	bl	80009c0 <LCD_write_char>
        delay_us( 40 );
 8000a20:	2028      	movs	r0, #40	@ 0x28
 8000a22:	f7ff fde5 	bl	80005f0 <delay_us>
    for ( size_t  i = 0; i < len; i++ ) {
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d3ee      	bcc.n	8000a12 <LCD_write_text+0x16>
    }
}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <LCD_set_cursor>:
 * action   : moves the cursor to a specific position on the LCD
 * authors  : Daniel Hoefer (drh) - dhoefer@calpoly.edu
 * version  : 0.1
 * date     : 240424
 * -------------------------------------------------------------------------- */
void LCD_set_cursor(uint8_t x, uint8_t y) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	460a      	mov	r2, r1
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	71bb      	strb	r3, [r7, #6]

    uint8_t address = 0x80;         //first line address offset
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	73fb      	strb	r3, [r7, #15]
    if (y == 1) {                   //add the line offset for second line
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d102      	bne.n	8000a5e <LCD_set_cursor+0x20>
        address += 0x40;            //address offset for the second line
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	3340      	adds	r3, #64	@ 0x40
 8000a5c:	73fb      	strb	r3, [r7, #15]
    }

    address += x;           // find column offset using x pos
 8000a5e:	7bfa      	ldrb	r2, [r7, #15]
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	4413      	add	r3, r2
 8000a64:	73fb      	strb	r3, [r7, #15]

    LCD_command(address);   //send this command to lcd to update cursor
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff75 	bl	8000958 <LCD_command>
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <main>:


//static int sec_passed = 0;

int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	@ 0x38
 8000a7c:	af02      	add	r7, sp, #8
    int set_point = 100;
 8000a7e:	2364      	movs	r3, #100	@ 0x64
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_Init();
 8000a82:	f000 ff12 	bl	80018aa <HAL_Init>
  SystemClock_Config();
 8000a86:	f000 fb02 	bl	800108e <SystemClock_Config>
  SysTick_Init();                     //setup delay function
 8000a8a:	f7ff fd9b 	bl	80005c4 <SysTick_Init>
  Keypad_Config();
 8000a8e:	f7ff fddd 	bl	800064c <Keypad_Config>
  SPI_init();
 8000a92:	f000 fb49 	bl	8001128 <SPI_init>
  setup_TIM2(50);
 8000a96:	2032      	movs	r0, #50	@ 0x32
 8000a98:	f000 fcbc 	bl	8001414 <setup_TIM2>
  LPUART_init();
 8000a9c:	f000 fd4e 	bl	800153c <LPUART_init>
  LCD_init();
 8000aa0:	f7ff feb6 	bl	8000810 <LCD_init>
    RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOGEN); //Heater
 8000aa4:	4bab      	ldr	r3, [pc, #684]	@ (8000d54 <main+0x2dc>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa8:	4aaa      	ldr	r2, [pc, #680]	@ (8000d54 <main+0x2dc>)
 8000aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOG->MODER   &= ~(GPIO_MODER_MODE1 );
 8000ab0:	4ba9      	ldr	r3, [pc, #676]	@ (8000d58 <main+0x2e0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4aa8      	ldr	r2, [pc, #672]	@ (8000d58 <main+0x2e0>)
 8000ab6:	f023 030c 	bic.w	r3, r3, #12
 8000aba:	6013      	str	r3, [r2, #0]
    GPIOG->MODER   |=  (GPIO_MODER_MODE1_0 );
 8000abc:	4ba6      	ldr	r3, [pc, #664]	@ (8000d58 <main+0x2e0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4aa5      	ldr	r2, [pc, #660]	@ (8000d58 <main+0x2e0>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6013      	str	r3, [r2, #0]
    GPIOG->OTYPER  &= ~(GPIO_OTYPER_OT1 );
 8000ac8:	4ba3      	ldr	r3, [pc, #652]	@ (8000d58 <main+0x2e0>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	4aa2      	ldr	r2, [pc, #648]	@ (8000d58 <main+0x2e0>)
 8000ace:	f023 0302 	bic.w	r3, r3, #2
 8000ad2:	6053      	str	r3, [r2, #4]
    GPIOG->PUPDR   &= ~(GPIO_PUPDR_PUPD1);
 8000ad4:	4ba0      	ldr	r3, [pc, #640]	@ (8000d58 <main+0x2e0>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	4a9f      	ldr	r2, [pc, #636]	@ (8000d58 <main+0x2e0>)
 8000ada:	f023 030c 	bic.w	r3, r3, #12
 8000ade:	60d3      	str	r3, [r2, #12]
    GPIOG->OSPEEDR |=  (3 << GPIO_OSPEEDR_OSPEED1_Pos);
 8000ae0:	4b9d      	ldr	r3, [pc, #628]	@ (8000d58 <main+0x2e0>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4a9c      	ldr	r2, [pc, #624]	@ (8000d58 <main+0x2e0>)
 8000ae6:	f043 030c 	orr.w	r3, r3, #12
 8000aea:	6093      	str	r3, [r2, #8]
    GPIOG->ODR &= ~GPIO_PIN_1;
 8000aec:	4b9a      	ldr	r3, [pc, #616]	@ (8000d58 <main+0x2e0>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	4a99      	ldr	r2, [pc, #612]	@ (8000d58 <main+0x2e0>)
 8000af2:	f023 0302 	bic.w	r3, r3, #2
 8000af6:	6153      	str	r3, [r2, #20]

    RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOFEN); //Fan
 8000af8:	4b96      	ldr	r3, [pc, #600]	@ (8000d54 <main+0x2dc>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	4a95      	ldr	r2, [pc, #596]	@ (8000d54 <main+0x2dc>)
 8000afe:	f043 0320 	orr.w	r3, r3, #32
 8000b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOF->MODER   &= ~(GPIO_MODER_MODE0 );
 8000b04:	4b95      	ldr	r3, [pc, #596]	@ (8000d5c <main+0x2e4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a94      	ldr	r2, [pc, #592]	@ (8000d5c <main+0x2e4>)
 8000b0a:	f023 0303 	bic.w	r3, r3, #3
 8000b0e:	6013      	str	r3, [r2, #0]
    GPIOF->MODER   |=  (GPIO_MODER_MODE0_0 );
 8000b10:	4b92      	ldr	r3, [pc, #584]	@ (8000d5c <main+0x2e4>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a91      	ldr	r2, [pc, #580]	@ (8000d5c <main+0x2e4>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6013      	str	r3, [r2, #0]
    GPIOF->OTYPER  &= ~(GPIO_OTYPER_OT0 );
 8000b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8000d5c <main+0x2e4>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	4a8e      	ldr	r2, [pc, #568]	@ (8000d5c <main+0x2e4>)
 8000b22:	f023 0301 	bic.w	r3, r3, #1
 8000b26:	6053      	str	r3, [r2, #4]
    GPIOF->PUPDR   &= ~(GPIO_PUPDR_PUPD0);
 8000b28:	4b8c      	ldr	r3, [pc, #560]	@ (8000d5c <main+0x2e4>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	4a8b      	ldr	r2, [pc, #556]	@ (8000d5c <main+0x2e4>)
 8000b2e:	f023 0303 	bic.w	r3, r3, #3
 8000b32:	60d3      	str	r3, [r2, #12]
    GPIOF->OSPEEDR |=  (3 << GPIO_OSPEEDR_OSPEED0_Pos);
 8000b34:	4b89      	ldr	r3, [pc, #548]	@ (8000d5c <main+0x2e4>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	4a88      	ldr	r2, [pc, #544]	@ (8000d5c <main+0x2e4>)
 8000b3a:	f043 0303 	orr.w	r3, r3, #3
 8000b3e:	6093      	str	r3, [r2, #8]
    GPIOF->ODR &= ~GPIO_PIN_0;
 8000b40:	4b86      	ldr	r3, [pc, #536]	@ (8000d5c <main+0x2e4>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	4a85      	ldr	r2, [pc, #532]	@ (8000d5c <main+0x2e4>)
 8000b46:	f023 0301 	bic.w	r3, r3, #1
 8000b4a:	6153      	str	r3, [r2, #20]

    initialize_pin(GPIOF, 7, INPUT_MODE, 0, PULLUP, HIGH_SPEED);
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	2301      	movs	r3, #1
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2300      	movs	r3, #0
 8000b56:	2200      	movs	r2, #0
 8000b58:	2107      	movs	r1, #7
 8000b5a:	4880      	ldr	r0, [pc, #512]	@ (8000d5c <main+0x2e4>)
 8000b5c:	f000 fd9c 	bl	8001698 <initialize_pin>
    uint32_t temp;
    uint8_t reflow_flag = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int home_state = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
  while (1)
  {
      newtemp = SPI_read();
 8000b6a:	f000 fbad 	bl	80012c8 <SPI_read>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4a7b      	ldr	r2, [pc, #492]	@ (8000d60 <main+0x2e8>)
 8000b72:	6013      	str	r3, [r2, #0]

      timer_ctr = timer_ctr + 1;
 8000b74:	4b7b      	ldr	r3, [pc, #492]	@ (8000d64 <main+0x2ec>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4a7a      	ldr	r2, [pc, #488]	@ (8000d64 <main+0x2ec>)
 8000b7c:	6013      	str	r3, [r2, #0]
      switch(state){
 8000b7e:	4b7a      	ldr	r3, [pc, #488]	@ (8000d68 <main+0x2f0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	f200 81fc 	bhi.w	8000f80 <main+0x508>
 8000b88:	a201      	add	r2, pc, #4	@ (adr r2, 8000b90 <main+0x118>)
 8000b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8e:	bf00      	nop
 8000b90:	08000ba5 	.word	0x08000ba5
 8000b94:	08000c7b 	.word	0x08000c7b
 8000b98:	08000d4d 	.word	0x08000d4d
 8000b9c:	08000def 	.word	0x08000def
 8000ba0:	08000ef1 	.word	0x08000ef1
      case 0:
          set_point = 15;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
          // If start button pressed...
          if ((GPIOF->IDR & GPIO_PIN_7) == 0){
 8000ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8000d5c <main+0x2e4>)
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d110      	bne.n	8000bd6 <main+0x15e>
              LCD_set_cursor(0, 0);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f7ff ff41 	bl	8000a3e <LCD_set_cursor>
              LCD_write_text("                ");
 8000bbc:	486b      	ldr	r0, [pc, #428]	@ (8000d6c <main+0x2f4>)
 8000bbe:	f7ff ff1d 	bl	80009fc <LCD_write_text>
              LCD_set_cursor(0, 1);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff ff3a 	bl	8000a3e <LCD_set_cursor>
              LCD_write_text("                ");
 8000bca:	4868      	ldr	r0, [pc, #416]	@ (8000d6c <main+0x2f4>)
 8000bcc:	f7ff ff16 	bl	80009fc <LCD_write_text>
              state = 3;
 8000bd0:	4b65      	ldr	r3, [pc, #404]	@ (8000d68 <main+0x2f0>)
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	701a      	strb	r2, [r3, #0]
            LCD_set_cursor(0, 1);
            LCD_write_text("  to reflow  ");


            for (int i = 0; i < 500000; i++);*/
           if (timer_ctr > 200){
 8000bd6:	4b63      	ldr	r3, [pc, #396]	@ (8000d64 <main+0x2ec>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2bc8      	cmp	r3, #200	@ 0xc8
 8000bdc:	d90a      	bls.n	8000bf4 <main+0x17c>
               if(home_state == 0)
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <main+0x172>
                   home_state = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
 8000be8:	e001      	b.n	8000bee <main+0x176>
               else
                   home_state = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
               timer_ctr = 0;
 8000bee:	4b5d      	ldr	r3, [pc, #372]	@ (8000d64 <main+0x2ec>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
           }
          if(home_state == 1) {
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d10d      	bne.n	8000c16 <main+0x19e>
              LCD_set_cursor(0, 0);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff ff1e 	bl	8000a3e <LCD_set_cursor>
              LCD_write_text("click * to enter ");
 8000c02:	485b      	ldr	r0, [pc, #364]	@ (8000d70 <main+0x2f8>)
 8000c04:	f7ff fefa 	bl	80009fc <LCD_write_text>
              LCD_set_cursor(0, 1);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff ff17 	bl	8000a3e <LCD_set_cursor>
              LCD_write_text("a setpoint  ");
 8000c10:	4858      	ldr	r0, [pc, #352]	@ (8000d74 <main+0x2fc>)
 8000c12:	f7ff fef3 	bl	80009fc <LCD_write_text>
          }
          if(home_state == 0) {
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10d      	bne.n	8000c38 <main+0x1c0>
              LCD_set_cursor(0, 0);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff ff0d 	bl	8000a3e <LCD_set_cursor>
              LCD_write_text("or click 'START'");
 8000c24:	4854      	ldr	r0, [pc, #336]	@ (8000d78 <main+0x300>)
 8000c26:	f7ff fee9 	bl	80009fc <LCD_write_text>
              LCD_set_cursor(0, 1);
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff ff06 	bl	8000a3e <LCD_set_cursor>
              LCD_write_text("  to reflow  ");
 8000c32:	4852      	ldr	r0, [pc, #328]	@ (8000d7c <main+0x304>)
 8000c34:	f7ff fee2 	bl	80009fc <LCD_write_text>
          }
          if (Keypad_IsAnyKeyPressed() == 1){
 8000c38:	f7ff fd46 	bl	80006c8 <Keypad_IsAnyKeyPressed>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	f040 819d 	bne.w	8000f7e <main+0x506>
              if (Keypad_WhichKeyIsPressed() == 10){
 8000c44:	f7ff fd5e 	bl	8000704 <Keypad_WhichKeyIsPressed>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b0a      	cmp	r3, #10
 8000c4c:	f040 8197 	bne.w	8000f7e <main+0x506>
                  LCD_set_cursor(0, 0);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fef3 	bl	8000a3e <LCD_set_cursor>
                  LCD_write_text("                ");
 8000c58:	4844      	ldr	r0, [pc, #272]	@ (8000d6c <main+0x2f4>)
 8000c5a:	f7ff fecf 	bl	80009fc <LCD_write_text>
                  LCD_set_cursor(0, 1);
 8000c5e:	2101      	movs	r1, #1
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff feec 	bl	8000a3e <LCD_set_cursor>
                  LCD_write_text("                ");
 8000c66:	4841      	ldr	r0, [pc, #260]	@ (8000d6c <main+0x2f4>)
 8000c68:	f7ff fec8 	bl	80009fc <LCD_write_text>

                  state++;
 8000c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d68 <main+0x2f0>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <main+0x2f0>)
 8000c76:	701a      	strb	r2, [r3, #0]

                  state = 3;
              }*/

          }
          break;
 8000c78:	e181      	b.n	8000f7e <main+0x506>
      case 1:
        uint8_t user_temp_select_place_index = 3;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	77fb      	strb	r3, [r7, #31]
        uint8_t user_set_point;

        while(user_temp_select_place_index != 0){
 8000c7e:	e04b      	b.n	8000d18 <main+0x2a0>
          if (Keypad_IsAnyKeyPressed() == 1){
 8000c80:	f7ff fd22 	bl	80006c8 <Keypad_IsAnyKeyPressed>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d12f      	bne.n	8000cea <main+0x272>
              uint8_t key_pressed = Keypad_WhichKeyIsPressed();
 8000c8a:	f7ff fd3b 	bl	8000704 <Keypad_WhichKeyIsPressed>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
              if (key_pressed >= 0 && key_pressed < 10){
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b09      	cmp	r3, #9
 8000c96:	d828      	bhi.n	8000cea <main+0x272>
                  if (user_temp_select_place_index == 3){
 8000c98:	7ffb      	ldrb	r3, [r7, #31]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d10e      	bne.n	8000cbc <main+0x244>
                      user_set_point += key_pressed * 100;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	0091      	lsls	r1, r2, #2
 8000caa:	461a      	mov	r2, r3
 8000cac:	460b      	mov	r3, r1
 8000cae:	4413      	add	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	7fbb      	ldrb	r3, [r7, #30]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	77bb      	strb	r3, [r7, #30]
 8000cba:	e013      	b.n	8000ce4 <main+0x26c>
                  }
                  else if (user_temp_select_place_index == 2){
 8000cbc:	7ffb      	ldrb	r3, [r7, #31]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d109      	bne.n	8000cd6 <main+0x25e>
                      user_set_point += key_pressed * 10;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	0092      	lsls	r2, r2, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	7fbb      	ldrb	r3, [r7, #30]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	77bb      	strb	r3, [r7, #30]
 8000cd4:	e006      	b.n	8000ce4 <main+0x26c>
                  }
                  else if (user_temp_select_place_index == 1){
 8000cd6:	7ffb      	ldrb	r3, [r7, #31]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d103      	bne.n	8000ce4 <main+0x26c>
                      user_set_point += key_pressed;
 8000cdc:	7fba      	ldrb	r2, [r7, #30]
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	77bb      	strb	r3, [r7, #30]
                  }

                  user_temp_select_place_index--;
 8000ce4:	7ffb      	ldrb	r3, [r7, #31]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	77fb      	strb	r3, [r7, #31]

              }


          }
          LCD_set_cursor(0, 0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff fea6 	bl	8000a3e <LCD_set_cursor>
          LCD_write_text("User setpoint = ");
 8000cf2:	4823      	ldr	r0, [pc, #140]	@ (8000d80 <main+0x308>)
 8000cf4:	f7ff fe82 	bl	80009fc <LCD_write_text>

          LCD_set_cursor(0, 1);
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fe9f 	bl	8000a3e <LCD_set_cursor>
          itoa(user_set_point, buffer, 10);
 8000d00:	7fbb      	ldrb	r3, [r7, #30]
 8000d02:	220a      	movs	r2, #10
 8000d04:	491f      	ldr	r1, [pc, #124]	@ (8000d84 <main+0x30c>)
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fdac 	bl	8002864 <itoa>
          LCD_write_text(buffer);
 8000d0c:	481d      	ldr	r0, [pc, #116]	@ (8000d84 <main+0x30c>)
 8000d0e:	f7ff fe75 	bl	80009fc <LCD_write_text>
          LCD_write_text("C");
 8000d12:	481d      	ldr	r0, [pc, #116]	@ (8000d88 <main+0x310>)
 8000d14:	f7ff fe72 	bl	80009fc <LCD_write_text>
        while(user_temp_select_place_index != 0){
 8000d18:	7ffb      	ldrb	r3, [r7, #31]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1b0      	bne.n	8000c80 <main+0x208>
        }

          LCD_set_cursor(0, 0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fe8c 	bl	8000a3e <LCD_set_cursor>
          LCD_write_text("                ");
 8000d26:	4811      	ldr	r0, [pc, #68]	@ (8000d6c <main+0x2f4>)
 8000d28:	f7ff fe68 	bl	80009fc <LCD_write_text>
          LCD_set_cursor(0, 1);
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff fe85 	bl	8000a3e <LCD_set_cursor>
          LCD_write_text("                ");
 8000d34:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <main+0x2f4>)
 8000d36:	f7ff fe61 	bl	80009fc <LCD_write_text>
          set_point = user_set_point;
 8000d3a:	7fbb      	ldrb	r3, [r7, #30]
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          state++;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <main+0x2f0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <main+0x2f0>)
 8000d48:	701a      	strb	r2, [r3, #0]
          break;
 8000d4a:	e119      	b.n	8000f80 <main+0x508>
      case 2:


            //set_input(temp);
            for(int i = 0; i < 10000; i++){};
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	e01f      	b.n	8000d92 <main+0x31a>
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48001800 	.word	0x48001800
 8000d5c:	48001400 	.word	0x48001400
 8000d60:	200007ac 	.word	0x200007ac
 8000d64:	200007b4 	.word	0x200007b4
 8000d68:	200007b0 	.word	0x200007b0
 8000d6c:	080029e8 	.word	0x080029e8
 8000d70:	080029fc 	.word	0x080029fc
 8000d74:	08002a10 	.word	0x08002a10
 8000d78:	08002a20 	.word	0x08002a20
 8000d7c:	08002a34 	.word	0x08002a34
 8000d80:	08002a44 	.word	0x08002a44
 8000d84:	200007b8 	.word	0x200007b8
 8000d88:	08002a58 	.word	0x08002a58
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	ddf7      	ble.n	8000d8c <main+0x314>
            LCD_set_cursor(0, 0);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff fe4d 	bl	8000a3e <LCD_set_cursor>
            LCD_write_text("Setpoint = ");
 8000da4:	4899      	ldr	r0, [pc, #612]	@ (800100c <main+0x594>)
 8000da6:	f7ff fe29 	bl	80009fc <LCD_write_text>
            itoa(set_point, buffer, 10);
 8000daa:	220a      	movs	r2, #10
 8000dac:	4998      	ldr	r1, [pc, #608]	@ (8001010 <main+0x598>)
 8000dae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000db0:	f001 fd58 	bl	8002864 <itoa>

            LCD_write_text(buffer);
 8000db4:	4896      	ldr	r0, [pc, #600]	@ (8001010 <main+0x598>)
 8000db6:	f7ff fe21 	bl	80009fc <LCD_write_text>
            LCD_write_text("C");
 8000dba:	4896      	ldr	r0, [pc, #600]	@ (8001014 <main+0x59c>)
 8000dbc:	f7ff fe1e 	bl	80009fc <LCD_write_text>

            if (temp > 0){
 8000dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d005      	beq.n	8000dd2 <main+0x35a>
                itoa(temp, buffer, 10);
 8000dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc8:	220a      	movs	r2, #10
 8000dca:	4991      	ldr	r1, [pc, #580]	@ (8001010 <main+0x598>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fd49 	bl	8002864 <itoa>
            }
            LCD_set_cursor(0, 1);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fe32 	bl	8000a3e <LCD_set_cursor>
            LCD_write_text("Temp = ");
 8000dda:	488f      	ldr	r0, [pc, #572]	@ (8001018 <main+0x5a0>)
 8000ddc:	f7ff fe0e 	bl	80009fc <LCD_write_text>
            LCD_write_text(buffer);
 8000de0:	488b      	ldr	r0, [pc, #556]	@ (8001010 <main+0x598>)
 8000de2:	f7ff fe0b 	bl	80009fc <LCD_write_text>
            LCD_write_text("C");
 8000de6:	488b      	ldr	r0, [pc, #556]	@ (8001014 <main+0x59c>)
 8000de8:	f7ff fe08 	bl	80009fc <LCD_write_text>

            break;
 8000dec:	e0c8      	b.n	8000f80 <main+0x508>
      case 3:
          if (!reflow_flag){
 8000dee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d104      	bne.n	8000e00 <main+0x388>
              reset_TIM2_timer();
 8000df6:	f000 fb89 	bl	800150c <reset_TIM2_timer>
              reflow_flag = 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
          setup_TIM2(50);
 8000e00:	2032      	movs	r0, #50	@ 0x32
 8000e02:	f000 fb07 	bl	8001414 <setup_TIM2>
          int sec = TIM2->CNT/100;
 8000e06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0c:	4a83      	ldr	r2, [pc, #524]	@ (800101c <main+0x5a4>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	60fb      	str	r3, [r7, #12]
          int num_secs_total = sizeof(reflow_vals)/sizeof(reflow_vals[0]);
 8000e16:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8000e1a:	60bb      	str	r3, [r7, #8]
          if (sec >= num_secs_total){
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	db10      	blt.n	8000e46 <main+0x3ce>
              TIM2->CR1 &= ~TIM_CR1_CEN;                       // start TIM2 CR1
 8000e24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e2e:	f023 0301 	bic.w	r3, r3, #1
 8000e32:	6013      	str	r3, [r2, #0]
              state++;
 8000e34:	4b7a      	ldr	r3, [pc, #488]	@ (8001020 <main+0x5a8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b78      	ldr	r3, [pc, #480]	@ (8001020 <main+0x5a8>)
 8000e3e:	701a      	strb	r2, [r3, #0]
              reflow_flag = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
          set_point = round((double)reflow_vals[sec]);
 8000e46:	4a77      	ldr	r2, [pc, #476]	@ (8001024 <main+0x5ac>)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fb37 	bl	80004c4 <__aeabi_f2d>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	ec43 2b10 	vmov	d0, r2, r3
 8000e5e:	f001 fd71 	bl	8002944 <round>
 8000e62:	ec53 2b10 	vmov	r2, r3, d0
 8000e66:	4610      	mov	r0, r2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f7ff fb83 	bl	8000574 <__aeabi_d2iz>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
          for(int i = 0; i < 10000; i++){};
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e002      	b.n	8000e7e <main+0x406>
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e84:	4293      	cmp	r3, r2
 8000e86:	ddf7      	ble.n	8000e78 <main+0x400>

          LCD_set_cursor(0, 0);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fdd7 	bl	8000a3e <LCD_set_cursor>
          LCD_write_text("                ");
 8000e90:	4865      	ldr	r0, [pc, #404]	@ (8001028 <main+0x5b0>)
 8000e92:	f7ff fdb3 	bl	80009fc <LCD_write_text>
          LCD_set_cursor(0, 1);
 8000e96:	2101      	movs	r1, #1
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fdd0 	bl	8000a3e <LCD_set_cursor>
          LCD_write_text("                ");
 8000e9e:	4862      	ldr	r0, [pc, #392]	@ (8001028 <main+0x5b0>)
 8000ea0:	f7ff fdac 	bl	80009fc <LCD_write_text>
          LCD_set_cursor(0, 0);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fdc9 	bl	8000a3e <LCD_set_cursor>
          LCD_write_text("Setpoint = ");
 8000eac:	4857      	ldr	r0, [pc, #348]	@ (800100c <main+0x594>)
 8000eae:	f7ff fda5 	bl	80009fc <LCD_write_text>
          itoa(set_point, buffer, 10);
 8000eb2:	220a      	movs	r2, #10
 8000eb4:	4956      	ldr	r1, [pc, #344]	@ (8001010 <main+0x598>)
 8000eb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000eb8:	f001 fcd4 	bl	8002864 <itoa>

          LCD_write_text(buffer);
 8000ebc:	4854      	ldr	r0, [pc, #336]	@ (8001010 <main+0x598>)
 8000ebe:	f7ff fd9d 	bl	80009fc <LCD_write_text>
          LCD_write_text("C");
 8000ec2:	4854      	ldr	r0, [pc, #336]	@ (8001014 <main+0x59c>)
 8000ec4:	f7ff fd9a 	bl	80009fc <LCD_write_text>

          itoa(temp, buffer, 10);
 8000ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eca:	220a      	movs	r2, #10
 8000ecc:	4950      	ldr	r1, [pc, #320]	@ (8001010 <main+0x598>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fcc8 	bl	8002864 <itoa>

          LCD_set_cursor(0, 1);
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff fdb1 	bl	8000a3e <LCD_set_cursor>
          LCD_write_text("Temp = ");
 8000edc:	484e      	ldr	r0, [pc, #312]	@ (8001018 <main+0x5a0>)
 8000ede:	f7ff fd8d 	bl	80009fc <LCD_write_text>
          LCD_write_text(buffer);
 8000ee2:	484b      	ldr	r0, [pc, #300]	@ (8001010 <main+0x598>)
 8000ee4:	f7ff fd8a 	bl	80009fc <LCD_write_text>
          LCD_write_text("C");
 8000ee8:	484a      	ldr	r0, [pc, #296]	@ (8001014 <main+0x59c>)
 8000eea:	f7ff fd87 	bl	80009fc <LCD_write_text>
          break;
 8000eee:	e047      	b.n	8000f80 <main+0x508>
      case 4:
          set_point = 15;
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
          for(int i = 0; i < 10000; i++){};
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	e002      	b.n	8000f00 <main+0x488>
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	3301      	adds	r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f06:	4293      	cmp	r3, r2
 8000f08:	ddf7      	ble.n	8000efa <main+0x482>
          if (temp < 30){
 8000f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0c:	2b1d      	cmp	r3, #29
 8000f0e:	d802      	bhi.n	8000f16 <main+0x49e>
              state = 0;
 8000f10:	4b43      	ldr	r3, [pc, #268]	@ (8001020 <main+0x5a8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
          }

          LCD_set_cursor(0, 0);
 8000f16:	2100      	movs	r1, #0
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fd90 	bl	8000a3e <LCD_set_cursor>
          LCD_write_text("                ");
 8000f1e:	4842      	ldr	r0, [pc, #264]	@ (8001028 <main+0x5b0>)
 8000f20:	f7ff fd6c 	bl	80009fc <LCD_write_text>
          LCD_set_cursor(0, 1);
 8000f24:	2101      	movs	r1, #1
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff fd89 	bl	8000a3e <LCD_set_cursor>
          LCD_write_text("                ");
 8000f2c:	483e      	ldr	r0, [pc, #248]	@ (8001028 <main+0x5b0>)
 8000f2e:	f7ff fd65 	bl	80009fc <LCD_write_text>
          LCD_set_cursor(0, 0);
 8000f32:	2100      	movs	r1, #0
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fd82 	bl	8000a3e <LCD_set_cursor>
          LCD_write_text("Setpoint = ");
 8000f3a:	4834      	ldr	r0, [pc, #208]	@ (800100c <main+0x594>)
 8000f3c:	f7ff fd5e 	bl	80009fc <LCD_write_text>
          itoa(set_point, buffer, 10);
 8000f40:	220a      	movs	r2, #10
 8000f42:	4933      	ldr	r1, [pc, #204]	@ (8001010 <main+0x598>)
 8000f44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000f46:	f001 fc8d 	bl	8002864 <itoa>

          LCD_write_text(buffer);
 8000f4a:	4831      	ldr	r0, [pc, #196]	@ (8001010 <main+0x598>)
 8000f4c:	f7ff fd56 	bl	80009fc <LCD_write_text>
          LCD_write_text("C");
 8000f50:	4830      	ldr	r0, [pc, #192]	@ (8001014 <main+0x59c>)
 8000f52:	f7ff fd53 	bl	80009fc <LCD_write_text>

          itoa(temp, buffer, 10);
 8000f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f58:	220a      	movs	r2, #10
 8000f5a:	492d      	ldr	r1, [pc, #180]	@ (8001010 <main+0x598>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fc81 	bl	8002864 <itoa>

          LCD_set_cursor(0, 1);
 8000f62:	2101      	movs	r1, #1
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fd6a 	bl	8000a3e <LCD_set_cursor>
          LCD_write_text("Temp = ");
 8000f6a:	482b      	ldr	r0, [pc, #172]	@ (8001018 <main+0x5a0>)
 8000f6c:	f7ff fd46 	bl	80009fc <LCD_write_text>
          LCD_write_text(buffer);
 8000f70:	4827      	ldr	r0, [pc, #156]	@ (8001010 <main+0x598>)
 8000f72:	f7ff fd43 	bl	80009fc <LCD_write_text>
          LCD_write_text("C");
 8000f76:	4827      	ldr	r0, [pc, #156]	@ (8001014 <main+0x59c>)
 8000f78:	f7ff fd40 	bl	80009fc <LCD_write_text>
          break;
 8000f7c:	e000      	b.n	8000f80 <main+0x508>
          break;
 8000f7e:	bf00      	nop
      }


      if (newtemp != 0){
 8000f80:	4b2a      	ldr	r3, [pc, #168]	@ (800102c <main+0x5b4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <main+0x516>
           temp = newtemp;
 8000f88:	4b28      	ldr	r3, [pc, #160]	@ (800102c <main+0x5b4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
       }
       if (temp > (set_point + MARGIN_HIGH)){
 8000f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d90c      	bls.n	8000fb0 <main+0x538>
           GPIOG->ODR &= ~(GPIO_PIN_1);     // Turn off
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <main+0x5b8>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a25      	ldr	r2, [pc, #148]	@ (8001030 <main+0x5b8>)
 8000f9c:	f023 0302 	bic.w	r3, r3, #2
 8000fa0:	6153      	str	r3, [r2, #20]
           GPIOF->ODR |= GPIO_PIN_0;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <main+0x5bc>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a23      	ldr	r2, [pc, #140]	@ (8001034 <main+0x5bc>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6153      	str	r3, [r2, #20]
 8000fae:	e011      	b.n	8000fd4 <main+0x55c>
       }
       else if (temp < (set_point - MARGIN_LOW)){
 8000fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d20b      	bcs.n	8000fd4 <main+0x55c>
           GPIOG->ODR |= GPIO_PIN_1;         // Turn on
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <main+0x5b8>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001030 <main+0x5b8>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	6153      	str	r3, [r2, #20]
           GPIOF->ODR &= ~(GPIO_PIN_0);
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <main+0x5bc>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	4a19      	ldr	r2, [pc, #100]	@ (8001034 <main+0x5bc>)
 8000fce:	f023 0301 	bic.w	r3, r3, #1
 8000fd2:	6153      	str	r3, [r2, #20]
       }

      itoa(set_point, buffer, 10);
 8000fd4:	220a      	movs	r2, #10
 8000fd6:	490e      	ldr	r1, [pc, #56]	@ (8001010 <main+0x598>)
 8000fd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000fda:	f001 fc43 	bl	8002864 <itoa>
      LPUART_print(buffer);
 8000fde:	480c      	ldr	r0, [pc, #48]	@ (8001010 <main+0x598>)
 8000fe0:	f000 fb2c 	bl	800163c <LPUART_print>
      LPUART_print(",");
 8000fe4:	4814      	ldr	r0, [pc, #80]	@ (8001038 <main+0x5c0>)
 8000fe6:	f000 fb29 	bl	800163c <LPUART_print>
      itoa(temp, buffer, 10);
 8000fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fec:	220a      	movs	r2, #10
 8000fee:	4908      	ldr	r1, [pc, #32]	@ (8001010 <main+0x598>)
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fc37 	bl	8002864 <itoa>
      LPUART_print(buffer);
 8000ff6:	4806      	ldr	r0, [pc, #24]	@ (8001010 <main+0x598>)
 8000ff8:	f000 fb20 	bl	800163c <LPUART_print>
      LPUART_print("\r");
 8000ffc:	480f      	ldr	r0, [pc, #60]	@ (800103c <main+0x5c4>)
 8000ffe:	f000 fb1d 	bl	800163c <LPUART_print>
      LPUART_print("\n");
 8001002:	480f      	ldr	r0, [pc, #60]	@ (8001040 <main+0x5c8>)
 8001004:	f000 fb1a 	bl	800163c <LPUART_print>
      newtemp = SPI_read();
 8001008:	e5af      	b.n	8000b6a <main+0xf2>
 800100a:	bf00      	nop
 800100c:	08002a5c 	.word	0x08002a5c
 8001010:	200007b8 	.word	0x200007b8
 8001014:	08002a58 	.word	0x08002a58
 8001018:	08002a68 	.word	0x08002a68
 800101c:	51eb851f 	.word	0x51eb851f
 8001020:	200007b0 	.word	0x200007b0
 8001024:	20000000 	.word	0x20000000
 8001028:	080029e8 	.word	0x080029e8
 800102c:	200007ac 	.word	0x200007ac
 8001030:	48001800 	.word	0x48001800
 8001034:	48001400 	.word	0x48001400
 8001038:	08002a70 	.word	0x08002a70
 800103c:	08002a74 	.word	0x08002a74
 8001040:	08002a78 	.word	0x08002a78

08001044 <TIM2_IRQHandler>:
 *            number of ms that have passed and updates static variable
 * Author   : Jack Ryan (jar) - jryan39@calpoly.edu
 * Version  : 0.1
 * Date    `: 240501
------------------------------------------------------------------------------*/
void TIM2_IRQHandler(void) {
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
   if (TIM2->SR & TIM_SR_CC1IF) {       // triggered by CCR1 event ...
 8001048:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <TIM2_IRQHandler+0x22>
       TIM2->SR &= ~(TIM_SR_CC1IF);
 8001056:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001060:	f023 0302 	bic.w	r3, r3, #2
 8001064:	6113      	str	r3, [r2, #16]
      // GPIOG->ODR &= ~GPIO_PIN_1;        // Turn off heater
   }
   if (TIM2->SR & TIM_SR_UIF) {         // triggered by ARR event ...
 8001066:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <TIM2_IRQHandler+0x40>
       TIM2->SR &= ~(TIM_SR_UIF);
 8001074:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800107e:	f023 0301 	bic.w	r3, r3, #1
 8001082:	6113      	str	r3, [r2, #16]
      // GPIOG->ODR |= (GPIO_PIN_1);     // Turn on heater
//      sec_passed += 1/SAMPLE_RATE;      // Increment time
   }
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <SystemClock_Config>:


void SystemClock_Config(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b096      	sub	sp, #88	@ 0x58
 8001092:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2244      	movs	r2, #68	@ 0x44
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fc25 	bl	80028ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a2:	463b      	mov	r3, r7
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010b4:	f000 fd62 	bl	8001b7c <HAL_PWREx_ControlVoltageScaling>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010be:	f000 f82d 	bl	800111c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010c2:	2310      	movs	r3, #16
 80010c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010c6:	2301      	movs	r3, #1
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010ce:	2360      	movs	r3, #96	@ 0x60
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fda4 	bl	8001c28 <HAL_RCC_OscConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80010e6:	f000 f819 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	230f      	movs	r3, #15
 80010ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f001 f9a9 	bl	800245c <HAL_RCC_ClockConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001110:	f000 f804 	bl	800111c <Error_Handler>
  }
}
 8001114:	bf00      	nop
 8001116:	3758      	adds	r7, #88	@ 0x58
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <Error_Handler>:

void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <Error_Handler+0x8>

08001128 <SPI_init>:
#include "spi.h"


void SPI_init( void ) {
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	// enable clock for GPIOA & SPI1


	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // GPIOA: DAC NSS/SCK/SDO
 800112c:	4b64      	ldr	r3, [pc, #400]	@ (80012c0 <SPI_init+0x198>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	4a63      	ldr	r2, [pc, #396]	@ (80012c0 <SPI_init+0x198>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN); // SPI1 port
 8001138:	4b61      	ldr	r3, [pc, #388]	@ (80012c0 <SPI_init+0x198>)
 800113a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113c:	4a60      	ldr	r2, [pc, #384]	@ (80012c0 <SPI_init+0x198>)
 800113e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001142:	6613      	str	r3, [r2, #96]	@ 0x60
	/* USER ADD GPIO configuration of MODER/PUPDR/OTYPER/OSPEEDR registers HERE */
	GPIOA->MODER &= ~( GPIO_MODER_MODE4 |
 8001144:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800114e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001152:	f023 030c 	bic.w	r3, r3, #12
 8001156:	6013      	str	r3, [r2, #0]
					   GPIO_MODER_MODE5 |
					   GPIO_MODER_MODE6 |
					   GPIO_MODER_MODE7 |
					   GPIO_MODER_MODE1 );
	GPIOA->MODER |= ( GPIO_MODER_MODE4_0 |
 8001158:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001162:	f443 4329 	orr.w	r3, r3, #43264	@ 0xa900
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6013      	str	r3, [r2, #0]
					  GPIO_MODER_MODE5_1 |
					  GPIO_MODER_MODE6_1 |
					  GPIO_MODER_MODE7_1 |
					  GPIO_MODER_MODE1_0 );
	GPIOA->PUPDR &= ~( GPIO_PUPDR_PUPD4 |
 800116c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800117a:	f023 030c 	bic.w	r3, r3, #12
 800117e:	60d3      	str	r3, [r2, #12]
					   GPIO_PUPDR_PUPD5 |
			   	   	   GPIO_PUPDR_PUPD6 |
					   GPIO_PUPDR_PUPD7 |
					   GPIO_PUPDR_PUPD1 );
	GPIOA->PUPDR |= ( GPIO_PUPDR_PUPD6_1 );
 8001180:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800118a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800118e:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~( GPIO_OTYPER_OT4 |
 8001190:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800119a:	f023 03f2 	bic.w	r3, r3, #242	@ 0xf2
 800119e:	6053      	str	r3, [r2, #4]
						GPIO_OTYPER_OT5 |
						GPIO_OTYPER_OT6 |
						GPIO_OTYPER_OT7 |
						GPIO_OTYPER_OT1 );
	GPIOA->OSPEEDR |= ( ( 3 << GPIO_OSPEEDR_OSPEED4_Pos ) |
 80011a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011aa:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 80011ae:	f043 030c 	orr.w	r3, r3, #12
 80011b2:	6093      	str	r3, [r2, #8]
						( 3 << GPIO_OSPEEDR_OSPEED5_Pos ) |
						( 3 << GPIO_OSPEEDR_OSPEED6_Pos ) |
						( 3 << GPIO_OSPEEDR_OSPEED7_Pos ) |
						( 3 << GPIO_OSPEEDR_OSPEED1_Pos ) );
	// configure AFR for SPI1 function (1 of 3 SPI bits shown here)
	GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos));
 80011b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80011c2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL6_Pos));
 80011c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011ce:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80011d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL7_Pos)); // clear nibble for bit 7 AF
 80011d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80011e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((0x0005 << GPIO_AFRL_AFSEL5_Pos));
 80011e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011ee:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80011f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((0x0005 << GPIO_AFRL_AFSEL6_Pos));
 80011f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011fe:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8001202:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((0x0005 << GPIO_AFRL_AFSEL7_Pos)); // set b7 AF to SPI1 (fcn 5)
 8001204:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800120e:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8001212:	6213      	str	r3, [r2, #32]
	// SPI config as specified @ STM32L4 RM0351 rev.9 p.1459
	// called by or with DAC_init()
	// build control registers CR1 & CR2 for SPI control of peripheral DAC
	// assumes no active SPI xmits & no recv data in process (BSY=0)
	// CR1 (reset value = 0x0000)
	SPI1->CR1 &= ~( SPI_CR1_SPE ); // disable SPI for config
 8001214:	4b2b      	ldr	r3, [pc, #172]	@ (80012c4 <SPI_init+0x19c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2a      	ldr	r2, [pc, #168]	@ (80012c4 <SPI_init+0x19c>)
 800121a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800121e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_RXONLY ); // recv-only OFF
 8001220:	4b28      	ldr	r3, [pc, #160]	@ (80012c4 <SPI_init+0x19c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a27      	ldr	r2, [pc, #156]	@ (80012c4 <SPI_init+0x19c>)
 8001226:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800122a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_LSBFIRST ); // data bit order MSb:LSb
 800122c:	4b25      	ldr	r3, [pc, #148]	@ (80012c4 <SPI_init+0x19c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a24      	ldr	r2, [pc, #144]	@ (80012c4 <SPI_init+0x19c>)
 8001232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001236:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_CPOL | SPI_CR1_CPHA ); // SCLK polarity:phase = 0:0
 8001238:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <SPI_init+0x19c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a21      	ldr	r2, [pc, #132]	@ (80012c4 <SPI_init+0x19c>)
 800123e:	f023 0303 	bic.w	r3, r3, #3
 8001242:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_MSTR; // MCU is SPI controller
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <SPI_init+0x19c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a1e      	ldr	r2, [pc, #120]	@ (80012c4 <SPI_init+0x19c>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6013      	str	r3, [r2, #0]
	// CR2 (reset value = 0x0700 : 8b data)
	SPI1->CR2 &= ~( SPI_CR2_TXEIE | SPI_CR2_RXNEIE ); // disable FIFO intrpts
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <SPI_init+0x19c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4a1b      	ldr	r2, [pc, #108]	@ (80012c4 <SPI_init+0x19c>)
 8001256:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800125a:	6053      	str	r3, [r2, #4]
	SPI1->CR2 &= ~( SPI_CR2_FRF); // Moto frame format
 800125c:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <SPI_init+0x19c>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a18      	ldr	r2, [pc, #96]	@ (80012c4 <SPI_init+0x19c>)
 8001262:	f023 0310 	bic.w	r3, r3, #16
 8001266:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_SSOE; // SS output is enabled in master mode
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <SPI_init+0x19c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a15      	ldr	r2, [pc, #84]	@ (80012c4 <SPI_init+0x19c>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_NSSP; // auto-generate NSS pulse
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <SPI_init+0x19c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <SPI_init+0x19c>)
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_DS; // 16-bit data
 8001280:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <SPI_init+0x19c>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a0f      	ldr	r2, [pc, #60]	@ (80012c4 <SPI_init+0x19c>)
 8001286:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 800128a:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_SSOE; // enable SS output
 800128c:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <SPI_init+0x19c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a0c      	ldr	r2, [pc, #48]	@ (80012c4 <SPI_init+0x19c>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6053      	str	r3, [r2, #4]
	// CR1
	SPI1->CR1 |= SPI_CR1_SPE; // re-enable SPI for ops
 8001298:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <SPI_init+0x19c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a09      	ldr	r2, [pc, #36]	@ (80012c4 <SPI_init+0x19c>)
 800129e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a2:	6013      	str	r3, [r2, #0]

	SPI_PORT->BSRR |= ( CS | PS );
 80012a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012ae:	f043 0312 	orr.w	r3, r3, #18
 80012b2:	6193      	str	r3, [r2, #24]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40013000 	.word	0x40013000

080012c8 <SPI_read>:
	while ( SPI1->SR & SPI_SR_BSY )
		;
	SPI_PORT->BSRR |= CS; //end data transmission, switch ~CS back to high
}

uint32_t SPI_read ( void ) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
	uint16_t d1;
	uint16_t d2;
	uint32_t data;
	uint32_t tempc;

	SPI_PORT->ODR &= ~CS;	//set CS low to start receiving data
 80012ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012d8:	f023 0302 	bic.w	r3, r3, #2
 80012dc:	6153      	str	r3, [r2, #20]
	SPI1->CR1 |= ( SPI_CR1_RXONLY ); // recv-only ON
 80012de:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <SPI_read+0x7c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a18      	ldr	r2, [pc, #96]	@ (8001344 <SPI_read+0x7c>)
 80012e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012e8:	6013      	str	r3, [r2, #0]
	//while ( ~( SPI1->SR & SPI_SR_RXNE ) )
	//	;
		//wait for full receive buffer
	for(int i = 0; i < 10; i++){};
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e002      	b.n	80012f6 <SPI_read+0x2e>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b09      	cmp	r3, #9
 80012fa:	ddf9      	ble.n	80012f0 <SPI_read+0x28>


	SPI1->CR1 &= ~( SPI_CR1_RXONLY ); // recv-only OFF
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <SPI_read+0x7c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a10      	ldr	r2, [pc, #64]	@ (8001344 <SPI_read+0x7c>)
 8001302:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001306:	6013      	str	r3, [r2, #0]
	SPI_PORT->ODR |= CS; //end data transmission, switch ~CS back to high
 8001308:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	6153      	str	r3, [r2, #20]

	d1 = SPI1->DR;
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <SPI_read+0x7c>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	817b      	strh	r3, [r7, #10]
	d2 = SPI1->DR;
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <SPI_read+0x7c>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	813b      	strh	r3, [r7, #8]
	data = (d1 << 16 | d2);
 8001324:	897b      	ldrh	r3, [r7, #10]
 8001326:	041a      	lsls	r2, r3, #16
 8001328:	893b      	ldrh	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
 800132c:	607b      	str	r3, [r7, #4]
	//tempc = ((data) >> 18) * 0.25;
	tempc = ((data) >> 20);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	0d1b      	lsrs	r3, r3, #20
 8001332:	603b      	str	r3, [r7, #0]
	return(tempc);
 8001334:	683b      	ldr	r3, [r7, #0]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40013000 	.word	0x40013000

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <HAL_MspInit+0x44>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001352:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <HAL_MspInit+0x44>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6613      	str	r3, [r2, #96]	@ 0x60
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <HAL_MspInit+0x44>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_MspInit+0x44>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136a:	4a08      	ldr	r2, [pc, #32]	@ (800138c <HAL_MspInit+0x44>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	6593      	str	r3, [r2, #88]	@ 0x58
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_MspInit+0x44>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e6:	f000 fab5 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <setup_TIM2>:
 * Action   : Initialize TIM2 and enable interrupts to start
 * Author   : Jack Ryan (jar) - jryan39@calpoly.edu
 * Version  : 0.1
 * Date    `: 240501
------------------------------------------------------------------------------*/
void setup_TIM2( int iDutyCycle ) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af02      	add	r7, sp, #8
 800141a:	6078      	str	r0, [r7, #4]
    //Configure GPIO pins PA0 and PA1 for TIM2_CH1 and TIM2_CH2
    initialize_pin(GPIOA, 0, ALT_FUNCT_MODE, 0, 0, HIGH_SPEED);
 800141c:	2302      	movs	r3, #2
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	2300      	movs	r3, #0
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2300      	movs	r3, #0
 8001426:	2202      	movs	r2, #2
 8001428:	2100      	movs	r1, #0
 800142a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142e:	f000 f933 	bl	8001698 <initialize_pin>
    initialize_pin(GPIOB, 3, ALT_FUNCT_MODE, 0, 0, HIGH_SPEED);
 8001432:	2302      	movs	r3, #2
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	2300      	movs	r3, #0
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	2202      	movs	r2, #2
 800143e:	2103      	movs	r1, #3
 8001440:	482f      	ldr	r0, [pc, #188]	@ (8001500 <setup_TIM2+0xec>)
 8001442:	f000 f929 	bl	8001698 <initialize_pin>
    GPIOA->AFR[0] &= ~(0xF << 0);
 8001446:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001450:	f023 030f 	bic.w	r3, r3, #15
 8001454:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x1);
 8001456:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(0xF << 4*3);
 8001466:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001470:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001474:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x1 << 4*3);
 8001476:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001484:	6213      	str	r3, [r2, #32]
   // Enable clock and interrupts
   RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;           // enable clock for TIM2
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <setup_TIM2+0xf0>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	4a1e      	ldr	r2, [pc, #120]	@ (8001504 <setup_TIM2+0xf0>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6593      	str	r3, [r2, #88]	@ 0x58
   TIM2->DIER |= (TIM_DIER_CC1IE | TIM_DIER_UIE);  // enable event gen, rcv CCR1
 8001492:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800149c:	f043 0303 	orr.w	r3, r3, #3
 80014a0:	60d3      	str	r3, [r2, #12]
   TIM2->PSC |= 0x9C3F; // 1Hz counter
 80014a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ac:	f443 431c 	orr.w	r3, r3, #39936	@ 0x9c00
 80014b0:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80014b4:	6293      	str	r3, [r2, #40]	@ 0x28
   TIM2->ARR = 480*100;                             // ARR = T = counts @4MHz
 80014b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014ba:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80014be:	62da      	str	r2, [r3, #44]	@ 0x2c
   TIM2->CCR1 = iDutyCycle;                        // ticks for duty cycle
 80014c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6353      	str	r3, [r2, #52]	@ 0x34
   TIM2->SR &= ~(TIM_SR_CC1IF | TIM_SR_UIF);       // clr IRQ flag in status reg
 80014c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	6113      	str	r3, [r2, #16]
   NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));     // set NVIC interrupt: 0x1F
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <setup_TIM2+0xf4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001508 <setup_TIM2+0xf4>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014e4:	b662      	cpsie	i
}
 80014e6:	bf00      	nop
   __enable_irq();                                 // global IRQ enable
   TIM2->CR1 |= TIM_CR1_CEN;                       // start TIM2 CR1
 80014e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	48000400 	.word	0x48000400
 8001504:	40021000 	.word	0x40021000
 8001508:	e000e100 	.word	0xe000e100

0800150c <reset_TIM2_timer>:
 * Action   : Reset TIM2 clock and CCR to be correct value
 * Author   : Jack Ryan (jar) - jryan39@calpoly.edu
 * Version  : 0.1
 * Date    `: 240501
------------------------------------------------------------------------------*/
void reset_TIM2_timer(void){
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
    TIM2->CNT = 0;              // Set counter to 0
 8001510:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->CCR1 = CCR_INC;       // Reset CCR to correct starting spot
 8001518:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800151c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001520:	635a      	str	r2, [r3, #52]	@ 0x34
    sec_passed = 0;              // Reset ms counter
 8001522:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <reset_TIM2_timer+0x2c>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001528:	b662      	cpsie	i
}
 800152a:	bf00      	nop
    __enable_irq();             // Enable interrupts
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200007dc 	.word	0x200007dc

0800153c <LPUART_init>:
#include "uart.h"

char keyPressed;

void LPUART_init(){
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	//power avail and RCC config
	PWR->CR2 |= (PWR_CR2_IOSV);
 8001540:	4b39      	ldr	r3, [pc, #228]	@ (8001628 <LPUART_init+0xec>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a38      	ldr	r2, [pc, #224]	@ (8001628 <LPUART_init+0xec>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154a:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);
 800154c:	4b37      	ldr	r3, [pc, #220]	@ (800162c <LPUART_init+0xf0>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	4a36      	ldr	r2, [pc, #216]	@ (800162c <LPUART_init+0xf0>)
 8001552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001556:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN;
 8001558:	4b34      	ldr	r3, [pc, #208]	@ (800162c <LPUART_init+0xf0>)
 800155a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155c:	4a33      	ldr	r2, [pc, #204]	@ (800162c <LPUART_init+0xf0>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	65d3      	str	r3, [r2, #92]	@ 0x5c

	//GPIOG pins and Alt Func config
	//PG7 (TX) and PG8 (RX)
	GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
 8001564:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <LPUART_init+0xf4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a31      	ldr	r2, [pc, #196]	@ (8001630 <LPUART_init+0xf4>)
 800156a:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 800156e:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //AF mode
 8001570:	4b2f      	ldr	r3, [pc, #188]	@ (8001630 <LPUART_init+0xf4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2e      	ldr	r2, [pc, #184]	@ (8001630 <LPUART_init+0xf4>)
 8001576:	f443 3320 	orr.w	r3, r3, #163840	@ 0x28000
 800157a:	6013      	str	r3, [r2, #0]
	GPIOG->OTYPER &= ~(GPIO_PIN_7 | GPIO_PIN_8);
 800157c:	4b2c      	ldr	r3, [pc, #176]	@ (8001630 <LPUART_init+0xf4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a2b      	ldr	r2, [pc, #172]	@ (8001630 <LPUART_init+0xf4>)
 8001582:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8001586:	6053      	str	r3, [r2, #4]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
 8001588:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <LPUART_init+0xf4>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4a28      	ldr	r2, [pc, #160]	@ (8001630 <LPUART_init+0xf4>)
 800158e:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8001592:	60d3      	str	r3, [r2, #12]
	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8);
 8001594:	4b26      	ldr	r3, [pc, #152]	@ (8001630 <LPUART_init+0xf4>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a25      	ldr	r2, [pc, #148]	@ (8001630 <LPUART_init+0xf4>)
 800159a:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 800159e:	6093      	str	r3, [r2, #8]
	GPIOG->AFR[0] &= ~(GPIO_AFRL_AFSEL7); //pin7 AF to FN8
 80015a0:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <LPUART_init+0xf4>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4a22      	ldr	r2, [pc, #136]	@ (8001630 <LPUART_init+0xf4>)
 80015a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80015aa:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[0] |= (GPIO_AFRL_AFSEL7_3);
 80015ac:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <LPUART_init+0xf4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001630 <LPUART_init+0xf4>)
 80015b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80015b6:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[1] &= ~(GPIO_AFRH_AFSEL8); //pin8 AF to FN8
 80015b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <LPUART_init+0xf4>)
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001630 <LPUART_init+0xf4>)
 80015be:	f023 030f 	bic.w	r3, r3, #15
 80015c2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL8_3);
 80015c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <LPUART_init+0xf4>)
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c8:	4a19      	ldr	r2, [pc, #100]	@ (8001630 <LPUART_init+0xf4>)
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	6253      	str	r3, [r2, #36]	@ 0x24

	//UART control reg config
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); //8b data mode
 80015d0:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <LPUART_init+0xf8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a17      	ldr	r2, [pc, #92]	@ (8001634 <LPUART_init+0xf8>)
 80015d6:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 80015da:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE; //en LPUART1
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <LPUART_init+0xf8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <LPUART_init+0xf8>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE); //en xmit & recv
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <LPUART_init+0xf8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a11      	ldr	r2, [pc, #68]	@ (8001634 <LPUART_init+0xf8>)
 80015ee:	f043 030c 	orr.w	r3, r3, #12
 80015f2:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE; //en LPUART1 recv int
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <LPUART_init+0xf8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001634 <LPUART_init+0xf8>)
 80015fa:	f043 0320 	orr.w	r3, r3, #32
 80015fe:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE); //clr Recv-Not-Empty flag
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <LPUART_init+0xf8>)
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <LPUART_init+0xf8>)
 8001606:	f023 0320 	bic.w	r3, r3, #32
 800160a:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 256*2000000/115200; //set baud-rate reg
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <LPUART_init+0xf8>)
 800160e:	f241 125c 	movw	r2, #4444	@ 0x115c
 8001612:	60da      	str	r2, [r3, #12]

	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   //en LPUART1 ISR
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <LPUART_init+0xfc>)
 8001616:	2240      	movs	r2, #64	@ 0x40
 8001618:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800161a:	b662      	cpsie	i
}
 800161c:	bf00      	nop
	__enable_irq();
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	40007000 	.word	0x40007000
 800162c:	40021000 	.word	0x40021000
 8001630:	48001800 	.word	0x48001800
 8001634:	40008000 	.word	0x40008000
 8001638:	e000e100 	.word	0xe000e100

0800163c <LPUART_print>:

void LPUART_print(const char* message){
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	//send chars until empty
	uint16_t iStrIdx = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	81fb      	strh	r3, [r7, #14]
	while(message[iStrIdx]!=0){
 8001648:	e00f      	b.n	800166a <LPUART_print+0x2e>
		while(!(LPUART1->ISR & USART_ISR_TXE));
 800164a:	bf00      	nop
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <LPUART_print+0x48>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f9      	beq.n	800164c <LPUART_print+0x10>
		LPUART1->TDR = message[iStrIdx++];
 8001658:	89fb      	ldrh	r3, [r7, #14]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	81fa      	strh	r2, [r7, #14]
 800165e:	461a      	mov	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <LPUART_print+0x48>)
 8001668:	851a      	strh	r2, [r3, #40]	@ 0x28
	while(message[iStrIdx]!=0){
 800166a:	89fb      	ldrh	r3, [r7, #14]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1e9      	bne.n	800164a <LPUART_print+0xe>
	}
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	40008000 	.word	0x40008000

08001688 <LPUART1_IRQHandler>:
	LPUART_print("\x1B");//ESC
	LPUART_print("[");
	LPUART_print(message);
}

void LPUART1_IRQHandler(void){
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
//	   default:
//		  while(!(LPUART1->ISR & USART_ISR_TXE));
//		  LPUART1->TDR = character;
//	  }
//	}
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <initialize_pin>:
 * Author   : Jack Ryan (jar) - jryan39@calpoly.edu
 * Version  : 0.1
 * Date : 240417
------------------------------------------------------------------------------*/
void initialize_pin(GPIO_TypeDef *pin_reg, uint32_t pin_num, uint32_t mode,
		uint32_t output_type, uint32_t pupdr, uint32_t speed){
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
    // Enable clock for chosen GPIO register
    if (pin_reg == GPIOA){
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016ac:	d106      	bne.n	80016bc <initialize_pin+0x24>
        RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOAEN);
 80016ae:	4b61      	ldr	r3, [pc, #388]	@ (8001834 <initialize_pin+0x19c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	4a60      	ldr	r2, [pc, #384]	@ (8001834 <initialize_pin+0x19c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ba:	e056      	b.n	800176a <initialize_pin+0xd2>
    }else if (pin_reg == GPIOB){
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a5e      	ldr	r2, [pc, #376]	@ (8001838 <initialize_pin+0x1a0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d106      	bne.n	80016d2 <initialize_pin+0x3a>
        RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN);
 80016c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001834 <initialize_pin+0x19c>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001834 <initialize_pin+0x19c>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d0:	e04b      	b.n	800176a <initialize_pin+0xd2>
    }else if (pin_reg == GPIOC){
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4a59      	ldr	r2, [pc, #356]	@ (800183c <initialize_pin+0x1a4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d106      	bne.n	80016e8 <initialize_pin+0x50>
        RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 80016da:	4b56      	ldr	r3, [pc, #344]	@ (8001834 <initialize_pin+0x19c>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a55      	ldr	r2, [pc, #340]	@ (8001834 <initialize_pin+0x19c>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	e040      	b.n	800176a <initialize_pin+0xd2>
    }else if (pin_reg == GPIOD){
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4a55      	ldr	r2, [pc, #340]	@ (8001840 <initialize_pin+0x1a8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d106      	bne.n	80016fe <initialize_pin+0x66>
        RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIODEN);
 80016f0:	4b50      	ldr	r3, [pc, #320]	@ (8001834 <initialize_pin+0x19c>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001834 <initialize_pin+0x19c>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fc:	e035      	b.n	800176a <initialize_pin+0xd2>
    }else if (pin_reg == GPIOE){
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a50      	ldr	r2, [pc, #320]	@ (8001844 <initialize_pin+0x1ac>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d106      	bne.n	8001714 <initialize_pin+0x7c>
        RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOEEN);
 8001706:	4b4b      	ldr	r3, [pc, #300]	@ (8001834 <initialize_pin+0x19c>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	4a4a      	ldr	r2, [pc, #296]	@ (8001834 <initialize_pin+0x19c>)
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001712:	e02a      	b.n	800176a <initialize_pin+0xd2>
    }else if (pin_reg == GPIOF){
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4a4c      	ldr	r2, [pc, #304]	@ (8001848 <initialize_pin+0x1b0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d106      	bne.n	800172a <initialize_pin+0x92>
        RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOFEN);
 800171c:	4b45      	ldr	r3, [pc, #276]	@ (8001834 <initialize_pin+0x19c>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001720:	4a44      	ldr	r2, [pc, #272]	@ (8001834 <initialize_pin+0x19c>)
 8001722:	f043 0320 	orr.w	r3, r3, #32
 8001726:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001728:	e01f      	b.n	800176a <initialize_pin+0xd2>
    }else if (pin_reg == GPIOG){
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4a47      	ldr	r2, [pc, #284]	@ (800184c <initialize_pin+0x1b4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d106      	bne.n	8001740 <initialize_pin+0xa8>
        RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOGEN);
 8001732:	4b40      	ldr	r3, [pc, #256]	@ (8001834 <initialize_pin+0x19c>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4a3f      	ldr	r2, [pc, #252]	@ (8001834 <initialize_pin+0x19c>)
 8001738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	e014      	b.n	800176a <initialize_pin+0xd2>
    }else if (pin_reg == GPIOH){
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4a43      	ldr	r2, [pc, #268]	@ (8001850 <initialize_pin+0x1b8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d106      	bne.n	8001756 <initialize_pin+0xbe>
        RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOHEN);
 8001748:	4b3a      	ldr	r3, [pc, #232]	@ (8001834 <initialize_pin+0x19c>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	4a39      	ldr	r2, [pc, #228]	@ (8001834 <initialize_pin+0x19c>)
 800174e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001754:	e009      	b.n	800176a <initialize_pin+0xd2>
    }else if (pin_reg == GPIOI){
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4a3e      	ldr	r2, [pc, #248]	@ (8001854 <initialize_pin+0x1bc>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d105      	bne.n	800176a <initialize_pin+0xd2>
        RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOIEN);
 800175e:	4b35      	ldr	r3, [pc, #212]	@ (8001834 <initialize_pin+0x19c>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	4a34      	ldr	r2, [pc, #208]	@ (8001834 <initialize_pin+0x19c>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001768:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }
	// If pin is configured as ouput
	if (mode == 1){
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d112      	bne.n	8001796 <initialize_pin+0xfe>
		// Set push/pull config
		pin_reg->OTYPER &= ~(0x1 << pin_num);           // Clear output mode bits
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2101      	movs	r1, #1
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	fa01 f202 	lsl.w	r2, r1, r2
 800177c:	43d2      	mvns	r2, r2
 800177e:	401a      	ands	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	605a      	str	r2, [r3, #4]
		pin_reg->OTYPER |= (output_type << pin_num);    // Set output type
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	431a      	orrs	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	605a      	str	r2, [r3, #4]
	}
	// Set pullup/pulldown/neither
	pin_reg->PUPDR &= ~(0x03 << 2*pin_num);         // Clear pupdr bits
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	0052      	lsls	r2, r2, #1
 800179e:	2103      	movs	r1, #3
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	43d2      	mvns	r2, r2
 80017a6:	401a      	ands	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	60da      	str	r2, [r3, #12]
	pin_reg->PUPDR |= (pupdr << 2*pin_num);         // Set pupdr bits
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	69b9      	ldr	r1, [r7, #24]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	431a      	orrs	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	60da      	str	r2, [r3, #12]
	// Set GPIO speed
	pin_reg->OSPEEDR &= ~(0x03 << 2*pin_num);   // Clear bits
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	0052      	lsls	r2, r2, #1
 80017c8:	2103      	movs	r1, #3
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	43d2      	mvns	r2, r2
 80017d0:	401a      	ands	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	609a      	str	r2, [r3, #8]
	pin_reg->OSPEEDR |= (speed << 2*pin_num);   // Set to chosen speed
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	69f9      	ldr	r1, [r7, #28]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	431a      	orrs	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	609a      	str	r2, [r3, #8]
	// Initial state
	pin_reg->BRR |= (0x01 << pin_num);          // Initialize as off
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ee:	2101      	movs	r1, #1
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	fa01 f202 	lsl.w	r2, r1, r2
 80017f6:	431a      	orrs	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28
    // Set mode
    pin_reg->MODER &= ~(0x03 << 2*pin_num);     // Clear mode bits
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	0052      	lsls	r2, r2, #1
 8001804:	2103      	movs	r1, #3
 8001806:	fa01 f202 	lsl.w	r2, r1, r2
 800180a:	43d2      	mvns	r2, r2
 800180c:	401a      	ands	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	601a      	str	r2, [r3, #0]
    pin_reg->MODER |= (mode << 2*pin_num);      // Set output mode
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	431a      	orrs	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	601a      	str	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	48000400 	.word	0x48000400
 800183c:	48000800 	.word	0x48000800
 8001840:	48000c00 	.word	0x48000c00
 8001844:	48001000 	.word	0x48001000
 8001848:	48001400 	.word	0x48001400
 800184c:	48001800 	.word	0x48001800
 8001850:	48001c00 	.word	0x48001c00
 8001854:	48002000 	.word	0x48002000

08001858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001890 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800185c:	f7ff fdc8 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <LoopForever+0x6>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	@ (8001898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <LoopForever+0xe>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	@ (80018a4 <LoopForever+0x16>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001886:	f001 f839 	bl	80028fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800188a:	f7ff f8f5 	bl	8000a78 <main>

0800188e <LoopForever>:

LoopForever:
    b LoopForever
 800188e:	e7fe      	b.n	800188e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001890:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	20000790 	.word	0x20000790
  ldr r2, =_sidata
 800189c:	08002af4 	.word	0x08002af4
  ldr r2, =_sbss
 80018a0:	20000790 	.word	0x20000790
  ldr r4, =_ebss
 80018a4:	200007e4 	.word	0x200007e4

080018a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_2_IRQHandler>

080018aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f000 f91f 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ba:	2000      	movs	r0, #0
 80018bc:	f000 f80e 	bl	80018dc <HAL_InitTick>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	e001      	b.n	80018d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018cc:	f7ff fd3c 	bl	8001348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018e8:	4b17      	ldr	r3, [pc, #92]	@ (8001948 <HAL_InitTick+0x6c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d023      	beq.n	8001938 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018f0:	4b16      	ldr	r3, [pc, #88]	@ (800194c <HAL_InitTick+0x70>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <HAL_InitTick+0x6c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f91d 	bl	8001b46 <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10f      	bne.n	8001932 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d809      	bhi.n	800192c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001918:	2200      	movs	r2, #0
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f000 f8f5 	bl	8001b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001924:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <HAL_InitTick+0x74>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e007      	b.n	800193c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e004      	b.n	800193c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e001      	b.n	800193c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000078c 	.word	0x2000078c
 800194c:	20000784 	.word	0x20000784
 8001950:	20000788 	.word	0x20000788

08001954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000078c 	.word	0x2000078c
 8001978:	200007e0 	.word	0x200007e0

0800197c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200007e0 	.word	0x200007e0

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c6:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	60d3      	str	r3, [r2, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	@ (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	@ (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	@ 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ff8e 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff47 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff5c 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff8e 	bl	8001a4c <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5d 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffb0 	bl	8001ab4 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b64:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40007000 	.word	0x40007000

08001b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b8a:	d130      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b8c:	4b23      	ldr	r3, [pc, #140]	@ (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b98:	d038      	beq.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001baa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2232      	movs	r2, #50	@ 0x32
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0c9b      	lsrs	r3, r3, #18
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc0:	e002      	b.n	8001bc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc8:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bd4:	d102      	bne.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f2      	bne.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be8:	d110      	bne.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e00f      	b.n	8001c0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bfa:	d007      	beq.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bfc:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c04:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	20000784 	.word	0x20000784
 8001c24:	431bde83 	.word	0x431bde83

08001c28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f000 bc08 	b.w	800244c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3c:	4b96      	ldr	r3, [pc, #600]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c46:	4b94      	ldr	r3, [pc, #592]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80e4 	beq.w	8001e26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <HAL_RCC_OscConfig+0x4c>
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	f040 808b 	bne.w	8001d82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	f040 8087 	bne.w	8001d82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c74:	4b88      	ldr	r3, [pc, #544]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_OscConfig+0x64>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e3df      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1a      	ldr	r2, [r3, #32]
 8001c90:	4b81      	ldr	r3, [pc, #516]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x7e>
 8001c9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ca4:	e005      	b.n	8001cb2 <HAL_RCC_OscConfig+0x8a>
 8001ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d223      	bcs.n	8001cfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fd5a 	bl	8002774 <RCC_SetFlashLatencyFromMSIRange>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e3c0      	b.n	800244c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cca:	4b73      	ldr	r3, [pc, #460]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a72      	ldr	r2, [pc, #456]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	f043 0308 	orr.w	r3, r3, #8
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b70      	ldr	r3, [pc, #448]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	496d      	ldr	r1, [pc, #436]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	4968      	ldr	r1, [pc, #416]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
 8001cfc:	e025      	b.n	8001d4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfe:	4b66      	ldr	r3, [pc, #408]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a65      	ldr	r2, [pc, #404]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b63      	ldr	r3, [pc, #396]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4960      	ldr	r1, [pc, #384]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	495b      	ldr	r1, [pc, #364]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fd1a 	bl	8002774 <RCC_SetFlashLatencyFromMSIRange>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e380      	b.n	800244c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d4a:	f000 fc87 	bl	800265c <HAL_RCC_GetSysClockFreq>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	4b51      	ldr	r3, [pc, #324]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	4950      	ldr	r1, [pc, #320]	@ (8001e9c <HAL_RCC_OscConfig+0x274>)
 8001d5c:	5ccb      	ldrb	r3, [r1, r3]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	fa22 f303 	lsr.w	r3, r2, r3
 8001d66:	4a4e      	ldr	r2, [pc, #312]	@ (8001ea0 <HAL_RCC_OscConfig+0x278>)
 8001d68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fdb4 	bl	80018dc <HAL_InitTick>
 8001d74:	4603      	mov	r3, r0
 8001d76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d052      	beq.n	8001e24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	e364      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d032      	beq.n	8001df0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d8a:	4b43      	ldr	r3, [pc, #268]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a42      	ldr	r2, [pc, #264]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d96:	f7ff fdf1 	bl	800197c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d9e:	f7ff fded 	bl	800197c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e34d      	b.n	800244c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db0:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dbc:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a35      	ldr	r2, [pc, #212]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	f043 0308 	orr.w	r3, r3, #8
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b33      	ldr	r3, [pc, #204]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4930      	ldr	r1, [pc, #192]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dda:	4b2f      	ldr	r3, [pc, #188]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	492b      	ldr	r1, [pc, #172]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
 8001dee:	e01a      	b.n	8001e26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001df0:	4b29      	ldr	r3, [pc, #164]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a28      	ldr	r2, [pc, #160]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fdbe 	bl	800197c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e04:	f7ff fdba 	bl	800197c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e31a      	b.n	800244c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1dc>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d073      	beq.n	8001f1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_OscConfig+0x21c>
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d10e      	bne.n	8001e5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d10b      	bne.n	8001e5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d063      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d15f      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e2f7      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e64:	d106      	bne.n	8001e74 <HAL_RCC_OscConfig+0x24c>
 8001e66:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e025      	b.n	8001ec0 <HAL_RCC_OscConfig+0x298>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e7c:	d114      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x280>
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b03      	ldr	r3, [pc, #12]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a02      	ldr	r2, [pc, #8]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e013      	b.n	8001ec0 <HAL_RCC_OscConfig+0x298>
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08002a7c 	.word	0x08002a7c
 8001ea0:	20000784 	.word	0x20000784
 8001ea4:	20000788 	.word	0x20000788
 8001ea8:	4ba0      	ldr	r3, [pc, #640]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a9f      	ldr	r2, [pc, #636]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b9d      	ldr	r3, [pc, #628]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a9c      	ldr	r2, [pc, #624]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fd58 	bl	800197c <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fd54 	bl	800197c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	@ 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e2b4      	b.n	800244c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee2:	4b92      	ldr	r3, [pc, #584]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x2a8>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fd44 	bl	800197c <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fd40 	bl	800197c <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	@ 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e2a0      	b.n	800244c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f0a:	4b88      	ldr	r3, [pc, #544]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x2d0>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d060      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_OscConfig+0x310>
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d119      	bne.n	8001f66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d116      	bne.n	8001f66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f38:	4b7c      	ldr	r3, [pc, #496]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x328>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e27d      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f50:	4b76      	ldr	r3, [pc, #472]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	4973      	ldr	r1, [pc, #460]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f64:	e040      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d023      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6e      	ldr	r2, [pc, #440]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fcff 	bl	800197c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff fcfb 	bl	800197c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e25b      	b.n	800244c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f94:	4b65      	ldr	r3, [pc, #404]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b62      	ldr	r3, [pc, #392]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	061b      	lsls	r3, r3, #24
 8001fae:	495f      	ldr	r1, [pc, #380]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	e018      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a5c      	ldr	r2, [pc, #368]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fcdb 	bl	800197c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff fcd7 	bl	800197c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e237      	b.n	800244c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fdc:	4b53      	ldr	r3, [pc, #332]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d03c      	beq.n	800206e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01c      	beq.n	8002036 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8001ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002002:	4a4a      	ldr	r2, [pc, #296]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7ff fcb6 	bl	800197c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7ff fcb2 	bl	800197c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e212      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002026:	4b41      	ldr	r3, [pc, #260]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8002028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ef      	beq.n	8002014 <HAL_RCC_OscConfig+0x3ec>
 8002034:	e01b      	b.n	800206e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002036:	4b3d      	ldr	r3, [pc, #244]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203c:	4a3b      	ldr	r2, [pc, #236]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7ff fc99 	bl	800197c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204e:	f7ff fc95 	bl	800197c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1f5      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002060:	4b32      	ldr	r3, [pc, #200]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8002062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ef      	bne.n	800204e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80a6 	beq.w	80021c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002080:	4b2a      	ldr	r3, [pc, #168]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10d      	bne.n	80020a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b27      	ldr	r3, [pc, #156]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002090:	4a26      	ldr	r2, [pc, #152]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	@ 0x58
 8002098:	4b24      	ldr	r3, [pc, #144]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a8:	4b21      	ldr	r3, [pc, #132]	@ (8002130 <HAL_RCC_OscConfig+0x508>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d118      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002130 <HAL_RCC_OscConfig+0x508>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002130 <HAL_RCC_OscConfig+0x508>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c0:	f7ff fc5c 	bl	800197c <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7ff fc58 	bl	800197c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e1b8      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020da:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <HAL_RCC_OscConfig+0x508>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <HAL_RCC_OscConfig+0x4d8>
 80020ee:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f4:	4a0d      	ldr	r2, [pc, #52]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020fe:	e029      	b.n	8002154 <HAL_RCC_OscConfig+0x52c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d115      	bne.n	8002134 <HAL_RCC_OscConfig+0x50c>
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210e:	4a07      	ldr	r2, [pc, #28]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211e:	4a03      	ldr	r2, [pc, #12]	@ (800212c <HAL_RCC_OscConfig+0x504>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002128:	e014      	b.n	8002154 <HAL_RCC_OscConfig+0x52c>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
 8002134:	4b9d      	ldr	r3, [pc, #628]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213a:	4a9c      	ldr	r2, [pc, #624]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002144:	4b99      	ldr	r3, [pc, #612]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214a:	4a98      	ldr	r2, [pc, #608]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d016      	beq.n	800218a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7ff fc0e 	bl	800197c <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002162:	e00a      	b.n	800217a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7ff fc0a 	bl	800197c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e168      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217a:	4b8c      	ldr	r3, [pc, #560]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ed      	beq.n	8002164 <HAL_RCC_OscConfig+0x53c>
 8002188:	e015      	b.n	80021b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7ff fbf7 	bl	800197c <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7ff fbf3 	bl	800197c <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e151      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a8:	4b80      	ldr	r3, [pc, #512]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ed      	bne.n	8002192 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b6:	7ffb      	ldrb	r3, [r7, #31]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d105      	bne.n	80021c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021bc:	4b7b      	ldr	r3, [pc, #492]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c0:	4a7a      	ldr	r2, [pc, #488]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 80021c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d03c      	beq.n	800224e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01c      	beq.n	8002216 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021dc:	4b73      	ldr	r3, [pc, #460]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 80021de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021e2:	4a72      	ldr	r2, [pc, #456]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7ff fbc6 	bl	800197c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f4:	f7ff fbc2 	bl	800197c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e122      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002206:	4b69      	ldr	r3, [pc, #420]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 8002208:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ef      	beq.n	80021f4 <HAL_RCC_OscConfig+0x5cc>
 8002214:	e01b      	b.n	800224e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002216:	4b65      	ldr	r3, [pc, #404]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 8002218:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800221c:	4a63      	ldr	r2, [pc, #396]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002226:	f7ff fba9 	bl	800197c <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800222e:	f7ff fba5 	bl	800197c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e105      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002240:	4b5a      	ldr	r3, [pc, #360]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 8002242:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ef      	bne.n	800222e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80f9 	beq.w	800244a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	2b02      	cmp	r3, #2
 800225e:	f040 80cf 	bne.w	8002400 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002262:	4b52      	ldr	r3, [pc, #328]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f003 0203 	and.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002272:	429a      	cmp	r2, r3
 8002274:	d12c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	3b01      	subs	r3, #1
 8002282:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d123      	bne.n	80022d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002292:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d11b      	bne.n	80022d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d113      	bne.n	80022d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	3b01      	subs	r3, #1
 80022b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d109      	bne.n	80022d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	085b      	lsrs	r3, r3, #1
 80022c8:	3b01      	subs	r3, #1
 80022ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d071      	beq.n	80023b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	d068      	beq.n	80023a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022d6:	4b35      	ldr	r3, [pc, #212]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d105      	bne.n	80022ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022e2:	4b32      	ldr	r3, [pc, #200]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0ac      	b.n	800244c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022f2:	4b2e      	ldr	r3, [pc, #184]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a2d      	ldr	r2, [pc, #180]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 80022f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022fe:	f7ff fb3d 	bl	800197c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7ff fb39 	bl	800197c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e099      	b.n	800244c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002318:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f0      	bne.n	8002306 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002324:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	4b21      	ldr	r3, [pc, #132]	@ (80023b0 <HAL_RCC_OscConfig+0x788>)
 800232a:	4013      	ands	r3, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002334:	3a01      	subs	r2, #1
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	4311      	orrs	r1, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800233e:	0212      	lsls	r2, r2, #8
 8002340:	4311      	orrs	r1, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002346:	0852      	lsrs	r2, r2, #1
 8002348:	3a01      	subs	r2, #1
 800234a:	0552      	lsls	r2, r2, #21
 800234c:	4311      	orrs	r1, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002352:	0852      	lsrs	r2, r2, #1
 8002354:	3a01      	subs	r2, #1
 8002356:	0652      	lsls	r2, r2, #25
 8002358:	4311      	orrs	r1, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800235e:	06d2      	lsls	r2, r2, #27
 8002360:	430a      	orrs	r2, r1
 8002362:	4912      	ldr	r1, [pc, #72]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 8002364:	4313      	orrs	r3, r2
 8002366:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002368:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0f      	ldr	r2, [pc, #60]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002372:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002374:	4b0d      	ldr	r3, [pc, #52]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a0c      	ldr	r2, [pc, #48]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800237e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002380:	f7ff fafc 	bl	800197c <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002388:	f7ff faf8 	bl	800197c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e058      	b.n	800244c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239a:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <HAL_RCC_OscConfig+0x784>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a6:	e050      	b.n	800244a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e04f      	b.n	800244c <HAL_RCC_OscConfig+0x824>
 80023ac:	40021000 	.word	0x40021000
 80023b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b4:	4b27      	ldr	r3, [pc, #156]	@ (8002454 <HAL_RCC_OscConfig+0x82c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d144      	bne.n	800244a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023c0:	4b24      	ldr	r3, [pc, #144]	@ (8002454 <HAL_RCC_OscConfig+0x82c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a23      	ldr	r2, [pc, #140]	@ (8002454 <HAL_RCC_OscConfig+0x82c>)
 80023c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023cc:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <HAL_RCC_OscConfig+0x82c>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a20      	ldr	r2, [pc, #128]	@ (8002454 <HAL_RCC_OscConfig+0x82c>)
 80023d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023d8:	f7ff fad0 	bl	800197c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e0:	f7ff facc 	bl	800197c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e02c      	b.n	800244c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f2:	4b18      	ldr	r3, [pc, #96]	@ (8002454 <HAL_RCC_OscConfig+0x82c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x7b8>
 80023fe:	e024      	b.n	800244a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d01f      	beq.n	8002446 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002406:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <HAL_RCC_OscConfig+0x82c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <HAL_RCC_OscConfig+0x82c>)
 800240c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7ff fab3 	bl	800197c <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7ff faaf 	bl	800197c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e00f      	b.n	800244c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242c:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_RCC_OscConfig+0x82c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_RCC_OscConfig+0x82c>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4905      	ldr	r1, [pc, #20]	@ (8002454 <HAL_RCC_OscConfig+0x82c>)
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_RCC_OscConfig+0x830>)
 8002440:	4013      	ands	r3, r2
 8002442:	60cb      	str	r3, [r1, #12]
 8002444:	e001      	b.n	800244a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3720      	adds	r7, #32
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	feeefffc 	.word	0xfeeefffc

0800245c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0e7      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b75      	ldr	r3, [pc, #468]	@ (8002648 <HAL_RCC_ClockConfig+0x1ec>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d910      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b72      	ldr	r3, [pc, #456]	@ (8002648 <HAL_RCC_ClockConfig+0x1ec>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0207 	bic.w	r2, r3, #7
 8002486:	4970      	ldr	r1, [pc, #448]	@ (8002648 <HAL_RCC_ClockConfig+0x1ec>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b6e      	ldr	r3, [pc, #440]	@ (8002648 <HAL_RCC_ClockConfig+0x1ec>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0cf      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d010      	beq.n	80024ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	4b66      	ldr	r3, [pc, #408]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d908      	bls.n	80024ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024bc:	4b63      	ldr	r3, [pc, #396]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4960      	ldr	r1, [pc, #384]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d04c      	beq.n	8002574 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e2:	4b5a      	ldr	r3, [pc, #360]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d121      	bne.n	8002532 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0a6      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fa:	4b54      	ldr	r3, [pc, #336]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d115      	bne.n	8002532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e09a      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002512:	4b4e      	ldr	r3, [pc, #312]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e08e      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002522:	4b4a      	ldr	r3, [pc, #296]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e086      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002532:	4b46      	ldr	r3, [pc, #280]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f023 0203 	bic.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4943      	ldr	r1, [pc, #268]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002544:	f7ff fa1a 	bl	800197c <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7ff fa16 	bl	800197c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e06e      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	4b3a      	ldr	r3, [pc, #232]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 020c 	and.w	r2, r3, #12
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	429a      	cmp	r2, r3
 8002572:	d1eb      	bne.n	800254c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	4b31      	ldr	r3, [pc, #196]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800258c:	429a      	cmp	r2, r3
 800258e:	d208      	bcs.n	80025a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b2e      	ldr	r3, [pc, #184]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	492b      	ldr	r1, [pc, #172]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a2:	4b29      	ldr	r3, [pc, #164]	@ (8002648 <HAL_RCC_ClockConfig+0x1ec>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d210      	bcs.n	80025d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b0:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <HAL_RCC_ClockConfig+0x1ec>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 0207 	bic.w	r2, r3, #7
 80025b8:	4923      	ldr	r1, [pc, #140]	@ (8002648 <HAL_RCC_ClockConfig+0x1ec>)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c0:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <HAL_RCC_ClockConfig+0x1ec>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e036      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025de:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4918      	ldr	r1, [pc, #96]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fc:	4b13      	ldr	r3, [pc, #76]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4910      	ldr	r1, [pc, #64]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002610:	f000 f824 	bl	800265c <HAL_RCC_GetSysClockFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <HAL_RCC_ClockConfig+0x1f0>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	490b      	ldr	r1, [pc, #44]	@ (8002650 <HAL_RCC_ClockConfig+0x1f4>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
 800262c:	4a09      	ldr	r2, [pc, #36]	@ (8002654 <HAL_RCC_ClockConfig+0x1f8>)
 800262e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002630:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <HAL_RCC_ClockConfig+0x1fc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f951 	bl	80018dc <HAL_InitTick>
 800263a:	4603      	mov	r3, r0
 800263c:	72fb      	strb	r3, [r7, #11]

  return status;
 800263e:	7afb      	ldrb	r3, [r7, #11]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40022000 	.word	0x40022000
 800264c:	40021000 	.word	0x40021000
 8002650:	08002a7c 	.word	0x08002a7c
 8002654:	20000784 	.word	0x20000784
 8002658:	20000788 	.word	0x20000788

0800265c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	@ 0x24
 8002660:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266a:	4b3e      	ldr	r3, [pc, #248]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x108>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002674:	4b3b      	ldr	r3, [pc, #236]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x108>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x34>
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d121      	bne.n	80026ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d11e      	bne.n	80026ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002690:	4b34      	ldr	r3, [pc, #208]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x108>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d107      	bne.n	80026ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800269c:	4b31      	ldr	r3, [pc, #196]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x108>)
 800269e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e005      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d102      	bne.n	80026da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026d4:	4b25      	ldr	r3, [pc, #148]	@ (800276c <HAL_RCC_GetSysClockFreq+0x110>)
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	e004      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026e0:	4b23      	ldr	r3, [pc, #140]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x114>)
 80026e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d134      	bne.n	8002754 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0xa6>
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d003      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0xac>
 8002700:	e005      	b.n	800270e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002702:	4b1a      	ldr	r3, [pc, #104]	@ (800276c <HAL_RCC_GetSysClockFreq+0x110>)
 8002704:	617b      	str	r3, [r7, #20]
      break;
 8002706:	e005      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002708:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x114>)
 800270a:	617b      	str	r3, [r7, #20]
      break;
 800270c:	e002      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	617b      	str	r3, [r7, #20]
      break;
 8002712:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002714:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x108>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	3301      	adds	r3, #1
 8002720:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x108>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	fb03 f202 	mul.w	r2, r3, r2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800273a:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x108>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	0e5b      	lsrs	r3, r3, #25
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	3301      	adds	r3, #1
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002754:	69bb      	ldr	r3, [r7, #24]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	@ 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
 8002768:	08002a8c 	.word	0x08002a8c
 800276c:	00f42400 	.word	0x00f42400
 8002770:	007a1200 	.word	0x007a1200

08002774 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002780:	4b2a      	ldr	r3, [pc, #168]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800278c:	f7ff f9e8 	bl	8001b60 <HAL_PWREx_GetVoltageRange>
 8002790:	6178      	str	r0, [r7, #20]
 8002792:	e014      	b.n	80027be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4b25      	ldr	r3, [pc, #148]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	4a24      	ldr	r2, [pc, #144]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279e:	6593      	str	r3, [r2, #88]	@ 0x58
 80027a0:	4b22      	ldr	r3, [pc, #136]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027ac:	f7ff f9d8 	bl	8001b60 <HAL_PWREx_GetVoltageRange>
 80027b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027b2:	4b1e      	ldr	r3, [pc, #120]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	4a1d      	ldr	r2, [pc, #116]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027c4:	d10b      	bne.n	80027de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b80      	cmp	r3, #128	@ 0x80
 80027ca:	d919      	bls.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80027d0:	d902      	bls.n	80027d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027d2:	2302      	movs	r3, #2
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	e013      	b.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027d8:	2301      	movs	r3, #1
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	e010      	b.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b80      	cmp	r3, #128	@ 0x80
 80027e2:	d902      	bls.n	80027ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027e4:	2303      	movs	r3, #3
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	e00a      	b.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b80      	cmp	r3, #128	@ 0x80
 80027ee:	d102      	bne.n	80027f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027f0:	2302      	movs	r3, #2
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	e004      	b.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b70      	cmp	r3, #112	@ 0x70
 80027fa:	d101      	bne.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027fc:	2301      	movs	r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 0207 	bic.w	r2, r3, #7
 8002808:	4909      	ldr	r1, [pc, #36]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002810:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	429a      	cmp	r2, r3
 800281c:	d001      	beq.n	8002822 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	40022000 	.word	0x40022000

08002834 <__itoa>:
 8002834:	1e93      	subs	r3, r2, #2
 8002836:	2b22      	cmp	r3, #34	@ 0x22
 8002838:	b510      	push	{r4, lr}
 800283a:	460c      	mov	r4, r1
 800283c:	d904      	bls.n	8002848 <__itoa+0x14>
 800283e:	2300      	movs	r3, #0
 8002840:	700b      	strb	r3, [r1, #0]
 8002842:	461c      	mov	r4, r3
 8002844:	4620      	mov	r0, r4
 8002846:	bd10      	pop	{r4, pc}
 8002848:	2a0a      	cmp	r2, #10
 800284a:	d109      	bne.n	8002860 <__itoa+0x2c>
 800284c:	2800      	cmp	r0, #0
 800284e:	da07      	bge.n	8002860 <__itoa+0x2c>
 8002850:	232d      	movs	r3, #45	@ 0x2d
 8002852:	700b      	strb	r3, [r1, #0]
 8002854:	4240      	negs	r0, r0
 8002856:	2101      	movs	r1, #1
 8002858:	4421      	add	r1, r4
 800285a:	f000 f805 	bl	8002868 <__utoa>
 800285e:	e7f1      	b.n	8002844 <__itoa+0x10>
 8002860:	2100      	movs	r1, #0
 8002862:	e7f9      	b.n	8002858 <__itoa+0x24>

08002864 <itoa>:
 8002864:	f7ff bfe6 	b.w	8002834 <__itoa>

08002868 <__utoa>:
 8002868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286a:	4c1f      	ldr	r4, [pc, #124]	@ (80028e8 <__utoa+0x80>)
 800286c:	b08b      	sub	sp, #44	@ 0x2c
 800286e:	4605      	mov	r5, r0
 8002870:	460b      	mov	r3, r1
 8002872:	466e      	mov	r6, sp
 8002874:	f104 0c20 	add.w	ip, r4, #32
 8002878:	6820      	ldr	r0, [r4, #0]
 800287a:	6861      	ldr	r1, [r4, #4]
 800287c:	4637      	mov	r7, r6
 800287e:	c703      	stmia	r7!, {r0, r1}
 8002880:	3408      	adds	r4, #8
 8002882:	4564      	cmp	r4, ip
 8002884:	463e      	mov	r6, r7
 8002886:	d1f7      	bne.n	8002878 <__utoa+0x10>
 8002888:	7921      	ldrb	r1, [r4, #4]
 800288a:	7139      	strb	r1, [r7, #4]
 800288c:	1e91      	subs	r1, r2, #2
 800288e:	6820      	ldr	r0, [r4, #0]
 8002890:	6038      	str	r0, [r7, #0]
 8002892:	2922      	cmp	r1, #34	@ 0x22
 8002894:	f04f 0100 	mov.w	r1, #0
 8002898:	d904      	bls.n	80028a4 <__utoa+0x3c>
 800289a:	7019      	strb	r1, [r3, #0]
 800289c:	460b      	mov	r3, r1
 800289e:	4618      	mov	r0, r3
 80028a0:	b00b      	add	sp, #44	@ 0x2c
 80028a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a4:	1e58      	subs	r0, r3, #1
 80028a6:	4684      	mov	ip, r0
 80028a8:	fbb5 f7f2 	udiv	r7, r5, r2
 80028ac:	fb02 5617 	mls	r6, r2, r7, r5
 80028b0:	3628      	adds	r6, #40	@ 0x28
 80028b2:	446e      	add	r6, sp
 80028b4:	460c      	mov	r4, r1
 80028b6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80028ba:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80028be:	462e      	mov	r6, r5
 80028c0:	42b2      	cmp	r2, r6
 80028c2:	f101 0101 	add.w	r1, r1, #1
 80028c6:	463d      	mov	r5, r7
 80028c8:	d9ee      	bls.n	80028a8 <__utoa+0x40>
 80028ca:	2200      	movs	r2, #0
 80028cc:	545a      	strb	r2, [r3, r1]
 80028ce:	1919      	adds	r1, r3, r4
 80028d0:	1aa5      	subs	r5, r4, r2
 80028d2:	42aa      	cmp	r2, r5
 80028d4:	dae3      	bge.n	800289e <__utoa+0x36>
 80028d6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80028da:	780e      	ldrb	r6, [r1, #0]
 80028dc:	7006      	strb	r6, [r0, #0]
 80028de:	3201      	adds	r2, #1
 80028e0:	f801 5901 	strb.w	r5, [r1], #-1
 80028e4:	e7f4      	b.n	80028d0 <__utoa+0x68>
 80028e6:	bf00      	nop
 80028e8:	08002abc 	.word	0x08002abc

080028ec <memset>:
 80028ec:	4402      	add	r2, r0
 80028ee:	4603      	mov	r3, r0
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d100      	bne.n	80028f6 <memset+0xa>
 80028f4:	4770      	bx	lr
 80028f6:	f803 1b01 	strb.w	r1, [r3], #1
 80028fa:	e7f9      	b.n	80028f0 <memset+0x4>

080028fc <__libc_init_array>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	4d0d      	ldr	r5, [pc, #52]	@ (8002934 <__libc_init_array+0x38>)
 8002900:	4c0d      	ldr	r4, [pc, #52]	@ (8002938 <__libc_init_array+0x3c>)
 8002902:	1b64      	subs	r4, r4, r5
 8002904:	10a4      	asrs	r4, r4, #2
 8002906:	2600      	movs	r6, #0
 8002908:	42a6      	cmp	r6, r4
 800290a:	d109      	bne.n	8002920 <__libc_init_array+0x24>
 800290c:	4d0b      	ldr	r5, [pc, #44]	@ (800293c <__libc_init_array+0x40>)
 800290e:	4c0c      	ldr	r4, [pc, #48]	@ (8002940 <__libc_init_array+0x44>)
 8002910:	f000 f85e 	bl	80029d0 <_init>
 8002914:	1b64      	subs	r4, r4, r5
 8002916:	10a4      	asrs	r4, r4, #2
 8002918:	2600      	movs	r6, #0
 800291a:	42a6      	cmp	r6, r4
 800291c:	d105      	bne.n	800292a <__libc_init_array+0x2e>
 800291e:	bd70      	pop	{r4, r5, r6, pc}
 8002920:	f855 3b04 	ldr.w	r3, [r5], #4
 8002924:	4798      	blx	r3
 8002926:	3601      	adds	r6, #1
 8002928:	e7ee      	b.n	8002908 <__libc_init_array+0xc>
 800292a:	f855 3b04 	ldr.w	r3, [r5], #4
 800292e:	4798      	blx	r3
 8002930:	3601      	adds	r6, #1
 8002932:	e7f2      	b.n	800291a <__libc_init_array+0x1e>
 8002934:	08002aec 	.word	0x08002aec
 8002938:	08002aec 	.word	0x08002aec
 800293c:	08002aec 	.word	0x08002aec
 8002940:	08002af0 	.word	0x08002af0

08002944 <round>:
 8002944:	ec51 0b10 	vmov	r0, r1, d0
 8002948:	b570      	push	{r4, r5, r6, lr}
 800294a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800294e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8002952:	2a13      	cmp	r2, #19
 8002954:	460b      	mov	r3, r1
 8002956:	4605      	mov	r5, r0
 8002958:	dc1b      	bgt.n	8002992 <round+0x4e>
 800295a:	2a00      	cmp	r2, #0
 800295c:	da0b      	bge.n	8002976 <round+0x32>
 800295e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8002962:	3201      	adds	r2, #1
 8002964:	bf04      	itt	eq
 8002966:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800296a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800296e:	2200      	movs	r2, #0
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	e015      	b.n	80029a2 <round+0x5e>
 8002976:	4c15      	ldr	r4, [pc, #84]	@ (80029cc <round+0x88>)
 8002978:	4114      	asrs	r4, r2
 800297a:	ea04 0601 	and.w	r6, r4, r1
 800297e:	4306      	orrs	r6, r0
 8002980:	d00f      	beq.n	80029a2 <round+0x5e>
 8002982:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8002986:	fa41 f202 	asr.w	r2, r1, r2
 800298a:	4413      	add	r3, r2
 800298c:	ea23 0304 	bic.w	r3, r3, r4
 8002990:	e7ed      	b.n	800296e <round+0x2a>
 8002992:	2a33      	cmp	r2, #51	@ 0x33
 8002994:	dd08      	ble.n	80029a8 <round+0x64>
 8002996:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800299a:	d102      	bne.n	80029a2 <round+0x5e>
 800299c:	4602      	mov	r2, r0
 800299e:	f7fd fc33 	bl	8000208 <__adddf3>
 80029a2:	ec41 0b10 	vmov	d0, r0, r1
 80029a6:	bd70      	pop	{r4, r5, r6, pc}
 80029a8:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80029ac:	f04f 34ff 	mov.w	r4, #4294967295
 80029b0:	40f4      	lsrs	r4, r6
 80029b2:	4204      	tst	r4, r0
 80029b4:	d0f5      	beq.n	80029a2 <round+0x5e>
 80029b6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80029ba:	2201      	movs	r2, #1
 80029bc:	408a      	lsls	r2, r1
 80029be:	1952      	adds	r2, r2, r5
 80029c0:	bf28      	it	cs
 80029c2:	3301      	addcs	r3, #1
 80029c4:	ea22 0204 	bic.w	r2, r2, r4
 80029c8:	e7d2      	b.n	8002970 <round+0x2c>
 80029ca:	bf00      	nop
 80029cc:	000fffff 	.word	0x000fffff

080029d0 <_init>:
 80029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d2:	bf00      	nop
 80029d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d6:	bc08      	pop	{r3}
 80029d8:	469e      	mov	lr, r3
 80029da:	4770      	bx	lr

080029dc <_fini>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	bf00      	nop
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr
