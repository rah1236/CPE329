
A8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002298  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002448  08002448  00003448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002520  08002520  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  08002520  08002520  00003520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002528  08002528  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002528  08002528  00003528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800252c  0800252c  0000352c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002530  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000060  08002590  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08002590  0000423c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005632  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001361  00000000  00000000  000096c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0000aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000047b  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028063  00000000  00000000  0000b4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006803  00000000  00000000  00033536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2735  00000000  00000000  00039d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c46e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b90  00000000  00000000  0012c4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0012e044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002430 	.word	0x08002430

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08002430 	.word	0x08002430

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SysTick_Init>:

/* Configure SysTick Timer for use with delay_us function. This will break
 * break compatibility with HAL_delay() by disabling interrupts to allow for
 * shorter delay timing.
 */
void SysTick_Init(void){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
    SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |	       // enable SysTick Timer
 8000294:	4b08      	ldr	r3, [pc, #32]	@ (80002b8 <SysTick_Init+0x28>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a07      	ldr	r2, [pc, #28]	@ (80002b8 <SysTick_Init+0x28>)
 800029a:	f043 0305 	orr.w	r3, r3, #5
 800029e:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk);     // select CPU clock
    SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);      // disable interrupt,
 80002a0:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <SysTick_Init+0x28>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a04      	ldr	r2, [pc, #16]	@ (80002b8 <SysTick_Init+0x28>)
 80002a6:	f023 0302 	bic.w	r3, r3, #2
 80002aa:	6013      	str	r3, [r2, #0]
                                                       // breaks HAL delay function
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e010 	.word	0xe000e010

080002bc <delay_us>:
 * precise delay timing. Passing a time of 0 will cause an error and result
 * in the maximum delay. Short delays are limited by the clock speed and will
 * often result in longer delay times than specified. @ 4MHz, a delay of 1us
 * will result in a delay of 10-15 us.
 */
void delay_us(const uint32_t time_us) {
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
    // set the counts for the specified delay
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80002c4:	4b11      	ldr	r3, [pc, #68]	@ (800030c <delay_us+0x50>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a11      	ldr	r2, [pc, #68]	@ (8000310 <delay_us+0x54>)
 80002ca:	fba2 2303 	umull	r2, r3, r2, r3
 80002ce:	0c9b      	lsrs	r3, r3, #18
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	fb02 f303 	mul.w	r3, r2, r3
 80002d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000314 <delay_us+0x58>)
 80002d8:	3b01      	subs	r3, #1
 80002da:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 80002dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <delay_us+0x58>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 80002e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <delay_us+0x58>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000314 <delay_us+0x58>)
 80002e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80002ec:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 80002ee:	bf00      	nop
 80002f0:	4b08      	ldr	r3, [pc, #32]	@ (8000314 <delay_us+0x58>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0f9      	beq.n	80002f0 <delay_us+0x34>
}
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000004 	.word	0x20000004
 8000310:	431bde83 	.word	0x431bde83
 8000314:	e000e010 	.word	0xe000e010

08000318 <main>:
uint16_t ADC_max = 0;

void SystemClock_Config(void);

int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0

  HAL_Init();
 800031e:	f000 fc12 	bl	8000b46 <HAL_Init>
  SystemClock_Config();
 8000322:	f000 f9f7 	bl	8000714 <SystemClock_Config>
  SysTick_Init();
 8000326:	f7ff ffb3 	bl	8000290 <SysTick_Init>
  LPUART_init();
 800032a:	f000 fadd 	bl	80008e8 <LPUART_init>
  ADC_init();
 800032e:	f000 f927 	bl	8000580 <ADC_init>


  while (1)
  {

	  while( !ADC_conversion_flag ){ // *global* await next ISR trip
 8000332:	e0b3      	b.n	800049c <main+0x184>




			if (ADC1->DR < ADC_min) {
 8000334:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <main+0x190>)
 8000336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000338:	4a5c      	ldr	r2, [pc, #368]	@ (80004ac <main+0x194>)
 800033a:	8812      	ldrh	r2, [r2, #0]
 800033c:	4293      	cmp	r3, r2
 800033e:	d204      	bcs.n	800034a <main+0x32>
				ADC_min = ADC1->DR;
 8000340:	4b59      	ldr	r3, [pc, #356]	@ (80004a8 <main+0x190>)
 8000342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000344:	b29a      	uxth	r2, r3
 8000346:	4b59      	ldr	r3, [pc, #356]	@ (80004ac <main+0x194>)
 8000348:	801a      	strh	r2, [r3, #0]
			}


			if (ADC1->DR > ADC_max){
 800034a:	4b57      	ldr	r3, [pc, #348]	@ (80004a8 <main+0x190>)
 800034c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800034e:	4a58      	ldr	r2, [pc, #352]	@ (80004b0 <main+0x198>)
 8000350:	8812      	ldrh	r2, [r2, #0]
 8000352:	4293      	cmp	r3, r2
 8000354:	d904      	bls.n	8000360 <main+0x48>
				ADC_max = ADC1->DR;
 8000356:	4b54      	ldr	r3, [pc, #336]	@ (80004a8 <main+0x190>)
 8000358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800035a:	b29a      	uxth	r2, r3
 800035c:	4b54      	ldr	r3, [pc, #336]	@ (80004b0 <main+0x198>)
 800035e:	801a      	strh	r2, [r3, #0]
			}

			uint32_t sum = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	61fb      	str	r3, [r7, #28]
			for (int index = 0; index < SAMPLE_COUNT; index++){
 8000364:	2300      	movs	r3, #0
 8000366:	61bb      	str	r3, [r7, #24]
 8000368:	e00a      	b.n	8000380 <main+0x68>
					sum += ADC_readings[index];
 800036a:	4a52      	ldr	r2, [pc, #328]	@ (80004b4 <main+0x19c>)
 800036c:	69bb      	ldr	r3, [r7, #24]
 800036e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000372:	461a      	mov	r2, r3
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	4413      	add	r3, r2
 8000378:	61fb      	str	r3, [r7, #28]
			for (int index = 0; index < SAMPLE_COUNT; index++){
 800037a:	69bb      	ldr	r3, [r7, #24]
 800037c:	3301      	adds	r3, #1
 800037e:	61bb      	str	r3, [r7, #24]
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	2b31      	cmp	r3, #49	@ 0x31
 8000384:	ddf1      	ble.n	800036a <main+0x52>
			}

			ADC_average = (sum/SAMPLE_COUNT);
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	4a4b      	ldr	r2, [pc, #300]	@ (80004b8 <main+0x1a0>)
 800038a:	fba2 2303 	umull	r2, r3, r2, r3
 800038e:	091b      	lsrs	r3, r3, #4
 8000390:	b29a      	uxth	r2, r3
 8000392:	4b4a      	ldr	r3, [pc, #296]	@ (80004bc <main+0x1a4>)
 8000394:	801a      	strh	r2, [r3, #0]

//		  ADC_average = get_average(ADC_readings, 100);
		  //ADC_min = get_min(ADC_readings, 100);
		  //ADC_max = get_max(ADC_readings, 100);

		  char* ADC_max_cnt_str = int_to_str(ADC_max);
 8000396:	4b46      	ldr	r3, [pc, #280]	@ (80004b0 <main+0x198>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f8a0 	bl	80004e0 <int_to_str>
 80003a0:	6178      	str	r0, [r7, #20]
		  char* ADC_min_cnt_str = int_to_str(ADC_min);
 80003a2:	4b42      	ldr	r3, [pc, #264]	@ (80004ac <main+0x194>)
 80003a4:	881b      	ldrh	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 f89a 	bl	80004e0 <int_to_str>
 80003ac:	6138      	str	r0, [r7, #16]
		  char* ADC_avg_cnt_str = int_to_str(ADC_average);
 80003ae:	4b43      	ldr	r3, [pc, #268]	@ (80004bc <main+0x1a4>)
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f894 	bl	80004e0 <int_to_str>
 80003b8:	60f8      	str	r0, [r7, #12]

		  char* ADC_max_str = int_to_str(ADC_max * 3300/4095);
 80003ba:	4b3d      	ldr	r3, [pc, #244]	@ (80004b0 <main+0x198>)
 80003bc:	881b      	ldrh	r3, [r3, #0]
 80003be:	461a      	mov	r2, r3
 80003c0:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80003c4:	fb02 f303 	mul.w	r3, r2, r3
 80003c8:	4a3d      	ldr	r2, [pc, #244]	@ (80004c0 <main+0x1a8>)
 80003ca:	fb82 1203 	smull	r1, r2, r2, r3
 80003ce:	441a      	add	r2, r3
 80003d0:	12d2      	asrs	r2, r2, #11
 80003d2:	17db      	asrs	r3, r3, #31
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f882 	bl	80004e0 <int_to_str>
 80003dc:	60b8      	str	r0, [r7, #8]
		  char* ADC_min_str = int_to_str((ADC_min * 3300/4095) / 1000);
 80003de:	4b33      	ldr	r3, [pc, #204]	@ (80004ac <main+0x194>)
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	461a      	mov	r2, r3
 80003e4:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80003e8:	fb02 f303 	mul.w	r3, r2, r3
 80003ec:	4a35      	ldr	r2, [pc, #212]	@ (80004c4 <main+0x1ac>)
 80003ee:	fb82 1203 	smull	r1, r2, r2, r3
 80003f2:	1512      	asrs	r2, r2, #20
 80003f4:	17db      	asrs	r3, r3, #31
 80003f6:	1ad3      	subs	r3, r2, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f871 	bl	80004e0 <int_to_str>
 80003fe:	6078      	str	r0, [r7, #4]
		  char* ADC_avg_str = int_to_str(ADC_average * 3300/4095);
 8000400:	4b2e      	ldr	r3, [pc, #184]	@ (80004bc <main+0x1a4>)
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	461a      	mov	r2, r3
 8000406:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800040a:	fb02 f303 	mul.w	r3, r2, r3
 800040e:	4a2c      	ldr	r2, [pc, #176]	@ (80004c0 <main+0x1a8>)
 8000410:	fb82 1203 	smull	r1, r2, r2, r3
 8000414:	441a      	add	r2, r3
 8000416:	12d2      	asrs	r2, r2, #11
 8000418:	17db      	asrs	r3, r3, #31
 800041a:	1ad3      	subs	r3, r2, r3
 800041c:	4618      	mov	r0, r3
 800041e:	f000 f85f 	bl	80004e0 <int_to_str>
 8000422:	6038      	str	r0, [r7, #0]

		  LPUART_print("ADC counts volts\0");
 8000424:	4828      	ldr	r0, [pc, #160]	@ (80004c8 <main+0x1b0>)
 8000426:	f000 fadf 	bl	80009e8 <LPUART_print>
		  LPUART_moveCursor(2,0);
 800042a:	2100      	movs	r1, #0
 800042c:	2002      	movs	r0, #2
 800042e:	f000 fb1f 	bl	8000a70 <LPUART_moveCursor>
		  LPUART_print("MIN   ");
 8000432:	4826      	ldr	r0, [pc, #152]	@ (80004cc <main+0x1b4>)
 8000434:	f000 fad8 	bl	80009e8 <LPUART_print>
		  LPUART_print(ADC_min_cnt_str);
 8000438:	6938      	ldr	r0, [r7, #16]
 800043a:	f000 fad5 	bl	80009e8 <LPUART_print>
		  LPUART_print("   ");
 800043e:	4824      	ldr	r0, [pc, #144]	@ (80004d0 <main+0x1b8>)
 8000440:	f000 fad2 	bl	80009e8 <LPUART_print>
		  LPUART_print(ADC_min_str);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f000 facf 	bl	80009e8 <LPUART_print>
		  LPUART_print(".");
 800044a:	4822      	ldr	r0, [pc, #136]	@ (80004d4 <main+0x1bc>)
 800044c:	f000 facc 	bl	80009e8 <LPUART_print>
//		  LPUART_print((ADC_min * 3300/4095)/100 | 0x30);
//		  LPUART_print((ADC_min * 3300/4095)/10 | 0x30);


		  LPUART_print("\r");
 8000450:	4821      	ldr	r0, [pc, #132]	@ (80004d8 <main+0x1c0>)
 8000452:	f000 fac9 	bl	80009e8 <LPUART_print>


		  delay_us(5000);
 8000456:	f241 3088 	movw	r0, #5000	@ 0x1388
 800045a:	f7ff ff2f 	bl	80002bc <delay_us>
		  LPUART_clearScreen();
 800045e:	f000 fb3f 	bl	8000ae0 <LPUART_clearScreen>
		  LPUART_resetCursor();
 8000462:	f000 fb33 	bl	8000acc <LPUART_resetCursor>

		  free(ADC_max_cnt_str);
 8000466:	6978      	ldr	r0, [r7, #20]
 8000468:	f001 fb3a 	bl	8001ae0 <free>
		  free(ADC_min_cnt_str);
 800046c:	6938      	ldr	r0, [r7, #16]
 800046e:	f001 fb37 	bl	8001ae0 <free>
		  free(ADC_avg_cnt_str);
 8000472:	68f8      	ldr	r0, [r7, #12]
 8000474:	f001 fb34 	bl	8001ae0 <free>
		  free(ADC_max_str);
 8000478:	68b8      	ldr	r0, [r7, #8]
 800047a:	f001 fb31 	bl	8001ae0 <free>
		  free(ADC_min_str);
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f001 fb2e 	bl	8001ae0 <free>
		  free(ADC_avg_str);
 8000484:	6838      	ldr	r0, [r7, #0]
 8000486:	f001 fb2b 	bl	8001ae0 <free>

		  ADC_conversion_flag = 0;                         //Reset Flag
 800048a:	4b14      	ldr	r3, [pc, #80]	@ (80004dc <main+0x1c4>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
		  ADC1->CR |= ADC_CR_ADSTART;                // start 1st conversion
 8000490:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <main+0x190>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <main+0x190>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6093      	str	r3, [r2, #8]
	  while( !ADC_conversion_flag ){ // *global* await next ISR trip
 800049c:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <main+0x1c4>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	f43f af47 	beq.w	8000334 <main+0x1c>
 80004a6:	e7f9      	b.n	800049c <main+0x184>
 80004a8:	50040000 	.word	0x50040000
 80004ac:	20000000 	.word	0x20000000
 80004b0:	200000e8 	.word	0x200000e8
 80004b4:	20000080 	.word	0x20000080
 80004b8:	51eb851f 	.word	0x51eb851f
 80004bc:	200000e6 	.word	0x200000e6
 80004c0:	80080081 	.word	0x80080081
 80004c4:	418d5021 	.word	0x418d5021
 80004c8:	08002448 	.word	0x08002448
 80004cc:	0800245c 	.word	0x0800245c
 80004d0:	08002464 	.word	0x08002464
 80004d4:	08002468 	.word	0x08002468
 80004d8:	0800246c 	.word	0x0800246c
 80004dc:	2000007c 	.word	0x2000007c

080004e0 <int_to_str>:


  }
}

char* int_to_str(int num) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    int len = 0, tmp = num;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	613b      	str	r3, [r7, #16]

    // Determine the length of the string
    do {
        len++;
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	3301      	adds	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
        tmp /= 10;
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	4a20      	ldr	r2, [pc, #128]	@ (800057c <int_to_str+0x9c>)
 80004fa:	fb82 1203 	smull	r1, r2, r2, r3
 80004fe:	1092      	asrs	r2, r2, #2
 8000500:	17db      	asrs	r3, r3, #31
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	613b      	str	r3, [r7, #16]
    } while (tmp != 0);
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d1f1      	bne.n	80004f0 <int_to_str+0x10>

    // Allocate memory for the string
    char* str = (char*) malloc(sizeof(char) * (len + 1));
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	3301      	adds	r3, #1
 8000510:	4618      	mov	r0, r3
 8000512:	f001 fadd 	bl	8001ad0 <malloc>
 8000516:	4603      	mov	r3, r0
 8000518:	60bb      	str	r3, [r7, #8]

    // Convert integer to string
    int i = len - 1;
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3b01      	subs	r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
    tmp = num;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	613b      	str	r3, [r7, #16]
    str[len] = '\0'; // Null terminator
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	4413      	add	r3, r2
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]

    while (tmp != 0) {
 800052e:	e01d      	b.n	800056c <int_to_str+0x8c>
        str[i--] = tmp % 10 + '0';
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	4b12      	ldr	r3, [pc, #72]	@ (800057c <int_to_str+0x9c>)
 8000534:	fb83 1302 	smull	r1, r3, r3, r2
 8000538:	1099      	asrs	r1, r3, #2
 800053a:	17d3      	asrs	r3, r2, #31
 800053c:	1ac9      	subs	r1, r1, r3
 800053e:	460b      	mov	r3, r1
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	440b      	add	r3, r1
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	1ad1      	subs	r1, r2, r3
 8000548:	b2ca      	uxtb	r2, r1
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	1e59      	subs	r1, r3, #1
 800054e:	60f9      	str	r1, [r7, #12]
 8000550:	4619      	mov	r1, r3
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	440b      	add	r3, r1
 8000556:	3230      	adds	r2, #48	@ 0x30
 8000558:	b2d2      	uxtb	r2, r2
 800055a:	701a      	strb	r2, [r3, #0]
        tmp /= 10;
 800055c:	693b      	ldr	r3, [r7, #16]
 800055e:	4a07      	ldr	r2, [pc, #28]	@ (800057c <int_to_str+0x9c>)
 8000560:	fb82 1203 	smull	r1, r2, r2, r3
 8000564:	1092      	asrs	r2, r2, #2
 8000566:	17db      	asrs	r3, r3, #31
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	613b      	str	r3, [r7, #16]
    while (tmp != 0) {
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1de      	bne.n	8000530 <int_to_str+0x50>
    }

    return str;
 8000572:	68bb      	ldr	r3, [r7, #8]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3718      	adds	r7, #24
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	66666667 	.word	0x66666667

08000580 <ADC_init>:
			}
		}
	return(max);
}

void ADC_init(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;         // turn on clock for ADC
 8000584:	4b45      	ldr	r3, [pc, #276]	@ (800069c <ADC_init+0x11c>)
 8000586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000588:	4a44      	ldr	r2, [pc, #272]	@ (800069c <ADC_init+0x11c>)
 800058a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800058e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// power up & calibrate ADC
	ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // clock source = HCLK/1
 8000590:	4b43      	ldr	r3, [pc, #268]	@ (80006a0 <ADC_init+0x120>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	4a42      	ldr	r2, [pc, #264]	@ (80006a0 <ADC_init+0x120>)
 8000596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800059a:	6093      	str	r3, [r2, #8]
	ADC1->CR &= ~(ADC_CR_DEEPPWD);             // disable deep-power-down
 800059c:	4b41      	ldr	r3, [pc, #260]	@ (80006a4 <ADC_init+0x124>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4a40      	ldr	r2, [pc, #256]	@ (80006a4 <ADC_init+0x124>)
 80005a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80005a6:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (ADC_CR_ADVREGEN);             // enable V regulator - see RM 18.4.6
 80005a8:	4b3e      	ldr	r3, [pc, #248]	@ (80006a4 <ADC_init+0x124>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	4a3d      	ldr	r2, [pc, #244]	@ (80006a4 <ADC_init+0x124>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6093      	str	r3, [r2, #8]
	delay_us(20);                              // wait 20us for ADC to power up
 80005b4:	2014      	movs	r0, #20
 80005b6:	f7ff fe81 	bl	80002bc <delay_us>
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);    // PA0=ADC1_IN5, single-ended
 80005ba:	4b3a      	ldr	r3, [pc, #232]	@ (80006a4 <ADC_init+0x124>)
 80005bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80005c0:	4a38      	ldr	r2, [pc, #224]	@ (80006a4 <ADC_init+0x124>)
 80005c2:	f023 0320 	bic.w	r3, r3, #32
 80005c6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); // disable ADC, single-end calib
 80005ca:	4b36      	ldr	r3, [pc, #216]	@ (80006a4 <ADC_init+0x124>)
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	4a35      	ldr	r2, [pc, #212]	@ (80006a4 <ADC_init+0x124>)
 80005d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005d4:	f023 0301 	bic.w	r3, r3, #1
 80005d8:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADCAL;                  // start calibration
 80005da:	4b32      	ldr	r3, [pc, #200]	@ (80006a4 <ADC_init+0x124>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	4a31      	ldr	r2, [pc, #196]	@ (80006a4 <ADC_init+0x124>)
 80005e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005e4:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL) {;}        // wait for calib to finish
 80005e6:	bf00      	nop
 80005e8:	4b2e      	ldr	r3, [pc, #184]	@ (80006a4 <ADC_init+0x124>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dbfb      	blt.n	80005e8 <ADC_init+0x68>
	// enable ADC
	ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 80005f0:	4b2c      	ldr	r3, [pc, #176]	@ (80006a4 <ADC_init+0x124>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a2b      	ldr	r2, [pc, #172]	@ (80006a4 <ADC_init+0x124>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6013      	str	r3, [r2, #0]
	ADC1->CR |= ADC_CR_ADEN;                   // enable ADC
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <ADC_init+0x124>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	4a28      	ldr	r2, [pc, #160]	@ (80006a4 <ADC_init+0x124>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6093      	str	r3, [r2, #8]
	while(!(ADC1->ISR & ADC_ISR_ADRDY)) {;}    // wait for ADC Ready flag
 8000608:	bf00      	nop
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <ADC_init+0x124>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <ADC_init+0x8a>
	ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 8000616:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <ADC_init+0x124>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a22      	ldr	r2, [pc, #136]	@ (80006a4 <ADC_init+0x124>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6013      	str	r3, [r2, #0]
	// configure ADC sampling & sequencing
	ADC1->SQR1  |= (5 << ADC_SQR1_SQ1_Pos);    // sequence = 1 conv., ch 5
 8000622:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <ADC_init+0x124>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a1f      	ldr	r2, [pc, #124]	@ (80006a4 <ADC_init+0x124>)
 8000628:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SMPR1 |= (1 << ADC_SMPR1_SMP5_Pos);  // ch 5 sample time = 6.5 clocks
 800062e:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <ADC_init+0x124>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a1c      	ldr	r2, [pc, #112]	@ (80006a4 <ADC_init+0x124>)
 8000634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000638:	6153      	str	r3, [r2, #20]
	ADC1->CFGR  &= ~( ADC_CFGR_CONT  |         // single conversion mode
 800063a:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <ADC_init+0x124>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	4a19      	ldr	r2, [pc, #100]	@ (80006a4 <ADC_init+0x124>)
 8000640:	f423 5330 	bic.w	r3, r3, #11264	@ 0x2c00
 8000644:	f023 0318 	bic.w	r3, r3, #24
 8000648:	60d3      	str	r3, [r2, #12]
	                  ADC_CFGR_EXTEN |         // h/w trig disabled for s/w trig
	                  ADC_CFGR_RES   );        // 12-bit resolution
	// configure & enable ADC interrupt
	ADC1->IER |= ADC_IER_EOCIE;                // enable end-of-conv interrupt
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <ADC_init+0x124>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	4a15      	ldr	r2, [pc, #84]	@ (80006a4 <ADC_init+0x124>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6053      	str	r3, [r2, #4]
	ADC1->ISR |= ADC_ISR_EOC;                  // set to clear EOC flag
 8000656:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <ADC_init+0x124>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <ADC_init+0x124>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (1<<(ADC1_2_IRQn & 0x1F)); // enable ADC interrupt service
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <ADC_init+0x128>)
 8000664:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000668:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800066a:	b662      	cpsie	i
}
 800066c:	bf00      	nop
	__enable_irq();                            // enable global interrupts
	// configure GPIO pin PA0
	RCC->AHB2ENR  |= (RCC_AHB2ENR_GPIOAEN);    // connect clock to GPIOA
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <ADC_init+0x11c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <ADC_init+0x11c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOA->MODER  |= (GPIO_MODER_MODE0);       // analog mode for PA0 (set MODER last)
 800067a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000684:	f043 0303 	orr.w	r3, r3, #3
 8000688:	6013      	str	r3, [r2, #0]

	ADC1->CR |= ADC_CR_ADSTART;                // start 1st conversion
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <ADC_init+0x124>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	4a05      	ldr	r2, [pc, #20]	@ (80006a4 <ADC_init+0x124>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	6093      	str	r3, [r2, #8]

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000
 80006a0:	50040300 	.word	0x50040300
 80006a4:	50040000 	.word	0x50040000
 80006a8:	e000e100 	.word	0xe000e100

080006ac <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler( void ) {
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
	if ( ADC1->ISR & ADC_ISR_EOC ) { // conversion done?
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <ADC1_2_IRQHandler+0x54>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d01c      	beq.n	80006f6 <ADC1_2_IRQHandler+0x4a>
		ADC_last_read = ADC1->DR;
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <ADC1_2_IRQHandler+0x54>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <ADC1_2_IRQHandler+0x58>)
 80006c4:	801a      	strh	r2, [r3, #0]
		if ( ADC_reading_index > SAMPLE_COUNT - 1){
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <ADC1_2_IRQHandler+0x5c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b31      	cmp	r3, #49	@ 0x31
 80006cc:	d902      	bls.n	80006d4 <ADC1_2_IRQHandler+0x28>
				  ADC_reading_index = 0;                       //Set index to 0 at the end
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <ADC1_2_IRQHandler+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
		}
		ADC_readings[ADC_reading_index] = ADC_last_read;      // get data
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <ADC1_2_IRQHandler+0x5c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <ADC1_2_IRQHandler+0x58>)
 80006dc:	8819      	ldrh	r1, [r3, #0]
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <ADC1_2_IRQHandler+0x60>)
 80006e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		ADC_reading_index++;                             //Increment index
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <ADC1_2_IRQHandler+0x5c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <ADC1_2_IRQHandler+0x5c>)
 80006ee:	701a      	strb	r2, [r3, #0]
		ADC_conversion_flag = 1; // tell main(): got one
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <ADC1_2_IRQHandler+0x64>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
	}

}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	50040000 	.word	0x50040000
 8000704:	2000007e 	.word	0x2000007e
 8000708:	200000e4 	.word	0x200000e4
 800070c:	20000080 	.word	0x20000080
 8000710:	2000007c 	.word	0x2000007c

08000714 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b096      	sub	sp, #88	@ 0x58
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2244      	movs	r2, #68	@ 0x44
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fab2 	bl	8001c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000736:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800073a:	f000 fb6d 	bl	8000e18 <HAL_PWREx_ControlVoltageScaling>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000744:	f000 f82d 	bl	80007a2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000748:	2310      	movs	r3, #16
 800074a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000754:	2360      	movs	r3, #96	@ 0x60
 8000756:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fbaf 	bl	8000ec4 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800076c:	f000 f819 	bl	80007a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f000 ffb4 	bl	80016f8 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000796:	f000 f804 	bl	80007a2 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3758      	adds	r7, #88	@ 0x58
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Error_Handler>:

void Error_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a6:	b672      	cpsid	i
}
 80007a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007aa:	bf00      	nop
 80007ac:	e7fd      	b.n	80007aa <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <HAL_MspInit+0x44>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ba:	4a0e      	ldr	r2, [pc, #56]	@ (80007f4 <HAL_MspInit+0x44>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <HAL_MspInit+0x44>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d2:	4a08      	ldr	r2, [pc, #32]	@ (80007f4 <HAL_MspInit+0x44>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <NMI_Handler+0x4>

08000800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <MemManage_Handler+0x4>

08000810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <UsageFault_Handler+0x4>

08000820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084e:	f000 f9cf 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000860:	4a14      	ldr	r2, [pc, #80]	@ (80008b4 <_sbrk+0x5c>)
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <_sbrk+0x60>)
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <_sbrk+0x64>)
 8000876:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <_sbrk+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	429a      	cmp	r2, r3
 8000886:	d207      	bcs.n	8000898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000888:	f001 fa18 	bl	8001cbc <__errno>
 800088c:	4603      	mov	r3, r0
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000896:	e009      	b.n	80008ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089e:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <_sbrk+0x64>)
 80008a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20050000 	.word	0x20050000
 80008b8:	00000400 	.word	0x00000400
 80008bc:	200000ec 	.word	0x200000ec
 80008c0:	20000240 	.word	0x20000240

080008c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	@ (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <LPUART_init>:
#include "uart.h"

char keyPressed;

void LPUART_init(){
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
	//power avail and RCC config
	PWR->CR2 |= (PWR_CR2_IOSV);
 80008ec:	4b39      	ldr	r3, [pc, #228]	@ (80009d4 <LPUART_init+0xec>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4a38      	ldr	r2, [pc, #224]	@ (80009d4 <LPUART_init+0xec>)
 80008f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008f6:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);
 80008f8:	4b37      	ldr	r3, [pc, #220]	@ (80009d8 <LPUART_init+0xf0>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fc:	4a36      	ldr	r2, [pc, #216]	@ (80009d8 <LPUART_init+0xf0>)
 80008fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000902:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN;
 8000904:	4b34      	ldr	r3, [pc, #208]	@ (80009d8 <LPUART_init+0xf0>)
 8000906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000908:	4a33      	ldr	r2, [pc, #204]	@ (80009d8 <LPUART_init+0xf0>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	65d3      	str	r3, [r2, #92]	@ 0x5c

	//GPIOG pins and Alt Func config
	//PG7 (TX) and PG8 (RX)
	GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
 8000910:	4b32      	ldr	r3, [pc, #200]	@ (80009dc <LPUART_init+0xf4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a31      	ldr	r2, [pc, #196]	@ (80009dc <LPUART_init+0xf4>)
 8000916:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 800091a:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //AF mode
 800091c:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <LPUART_init+0xf4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a2e      	ldr	r2, [pc, #184]	@ (80009dc <LPUART_init+0xf4>)
 8000922:	f443 3320 	orr.w	r3, r3, #163840	@ 0x28000
 8000926:	6013      	str	r3, [r2, #0]
	GPIOG->OTYPER &= ~(GPIO_PIN_7 | GPIO_PIN_8);
 8000928:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <LPUART_init+0xf4>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	4a2b      	ldr	r2, [pc, #172]	@ (80009dc <LPUART_init+0xf4>)
 800092e:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8000932:	6053      	str	r3, [r2, #4]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
 8000934:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <LPUART_init+0xf4>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	4a28      	ldr	r2, [pc, #160]	@ (80009dc <LPUART_init+0xf4>)
 800093a:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 800093e:	60d3      	str	r3, [r2, #12]
	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8);
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <LPUART_init+0xf4>)
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	4a25      	ldr	r2, [pc, #148]	@ (80009dc <LPUART_init+0xf4>)
 8000946:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 800094a:	6093      	str	r3, [r2, #8]
	GPIOG->AFR[0] &= ~(GPIO_AFRL_AFSEL7); //pin7 AF to FN8
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <LPUART_init+0xf4>)
 800094e:	6a1b      	ldr	r3, [r3, #32]
 8000950:	4a22      	ldr	r2, [pc, #136]	@ (80009dc <LPUART_init+0xf4>)
 8000952:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000956:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[0] |= (GPIO_AFRL_AFSEL7_3);
 8000958:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <LPUART_init+0xf4>)
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	4a1f      	ldr	r2, [pc, #124]	@ (80009dc <LPUART_init+0xf4>)
 800095e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000962:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[1] &= ~(GPIO_AFRH_AFSEL8); //pin8 AF to FN8
 8000964:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <LPUART_init+0xf4>)
 8000966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000968:	4a1c      	ldr	r2, [pc, #112]	@ (80009dc <LPUART_init+0xf4>)
 800096a:	f023 030f 	bic.w	r3, r3, #15
 800096e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL8_3);
 8000970:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <LPUART_init+0xf4>)
 8000972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000974:	4a19      	ldr	r2, [pc, #100]	@ (80009dc <LPUART_init+0xf4>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6253      	str	r3, [r2, #36]	@ 0x24

	//UART control reg config
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); //8b data mode
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <LPUART_init+0xf8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a17      	ldr	r2, [pc, #92]	@ (80009e0 <LPUART_init+0xf8>)
 8000982:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8000986:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE; //en LPUART1
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <LPUART_init+0xf8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <LPUART_init+0xf8>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE); //en xmit & recv
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <LPUART_init+0xf8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <LPUART_init+0xf8>)
 800099a:	f043 030c 	orr.w	r3, r3, #12
 800099e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE; //en LPUART1 recv int
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <LPUART_init+0xf8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	@ (80009e0 <LPUART_init+0xf8>)
 80009a6:	f043 0320 	orr.w	r3, r3, #32
 80009aa:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE); //clr Recv-Not-Empty flag
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <LPUART_init+0xf8>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	4a0b      	ldr	r2, [pc, #44]	@ (80009e0 <LPUART_init+0xf8>)
 80009b2:	f023 0320 	bic.w	r3, r3, #32
 80009b6:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 256*2000000/115200; //set baud-rate reg
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <LPUART_init+0xf8>)
 80009ba:	f241 125c 	movw	r2, #4444	@ 0x115c
 80009be:	60da      	str	r2, [r3, #12]

	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   //en LPUART1 ISR
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <LPUART_init+0xfc>)
 80009c2:	2240      	movs	r2, #64	@ 0x40
 80009c4:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80009c6:	b662      	cpsie	i
}
 80009c8:	bf00      	nop
	__enable_irq();
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	40007000 	.word	0x40007000
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48001800 	.word	0x48001800
 80009e0:	40008000 	.word	0x40008000
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <LPUART_print>:

void LPUART_print(const char* message){
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	//send chars until empty
	uint16_t iStrIdx = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	81fb      	strh	r3, [r7, #14]
	while(message[iStrIdx]!=0){
 80009f4:	e00f      	b.n	8000a16 <LPUART_print+0x2e>
		while(!(LPUART1->ISR & USART_ISR_TXE));
 80009f6:	bf00      	nop
 80009f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <LPUART_print+0x48>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f9      	beq.n	80009f8 <LPUART_print+0x10>
		LPUART1->TDR = message[iStrIdx++];
 8000a04:	89fb      	ldrh	r3, [r7, #14]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	81fa      	strh	r2, [r7, #14]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <LPUART_print+0x48>)
 8000a14:	851a      	strh	r2, [r3, #40]	@ 0x28
	while(message[iStrIdx]!=0){
 8000a16:	89fb      	ldrh	r3, [r7, #14]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1e9      	bne.n	80009f6 <LPUART_print+0xe>
	}
}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40008000 	.word	0x40008000

08000a34 <LPUART_printESC>:

void LPUART_printESC(const char* message){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	LPUART_print("\x1B");//ESC
 8000a3c:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <LPUART_printESC+0x24>)
 8000a3e:	f7ff ffd3 	bl	80009e8 <LPUART_print>
	LPUART_print("[");
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <LPUART_printESC+0x28>)
 8000a44:	f7ff ffd0 	bl	80009e8 <LPUART_print>
	LPUART_print(message);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ffcd 	bl	80009e8 <LPUART_print>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	08002470 	.word	0x08002470
 8000a5c:	08002474 	.word	0x08002474

08000a60 <LPUART1_IRQHandler>:

void LPUART1_IRQHandler(void){
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
//	   default:
//		  while(!(LPUART1->ISR & USART_ISR_TXE));
//		  LPUART1->TDR = character;
//	  }
//	}
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <LPUART_moveCursor>:

void LPUART_moveCursor(int spaces, int lines){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	char spacesStr[16];
	sprintf(spacesStr, "%d", spaces);
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	490f      	ldr	r1, [pc, #60]	@ (8000ac0 <LPUART_moveCursor+0x50>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f8e2 	bl	8001c4c <siprintf>
	LPUART_printESC(spacesStr);
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ffd1 	bl	8000a34 <LPUART_printESC>
	char linesStr[16];
	sprintf(linesStr, "%d", lines);
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	4909      	ldr	r1, [pc, #36]	@ (8000ac0 <LPUART_moveCursor+0x50>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 f8d6 	bl	8001c4c <siprintf>
	LPUART_print(";");
 8000aa0:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <LPUART_moveCursor+0x54>)
 8000aa2:	f7ff ffa1 	bl	80009e8 <LPUART_print>
	LPUART_print(linesStr);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff9c 	bl	80009e8 <LPUART_print>
	LPUART_print("H");
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <LPUART_moveCursor+0x58>)
 8000ab2:	f7ff ff99 	bl	80009e8 <LPUART_print>
}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	08002478 	.word	0x08002478
 8000ac4:	0800247c 	.word	0x0800247c
 8000ac8:	08002480 	.word	0x08002480

08000acc <LPUART_resetCursor>:

void LPUART_resetCursor(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	LPUART_printESC("H");
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <LPUART_resetCursor+0x10>)
 8000ad2:	f7ff ffaf 	bl	8000a34 <LPUART_printESC>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08002480 	.word	0x08002480

08000ae0 <LPUART_clearScreen>:

void LPUART_clearLine(){
	LPUART_printESC("2K");
}

void LPUART_clearScreen(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	LPUART_printESC("2J");
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <LPUART_clearScreen+0x10>)
 8000ae6:	f7ff ffa5 	bl	8000a34 <LPUART_printESC>
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	08002488 	.word	0x08002488

08000af4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af8:	f7ff fee4 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000afe:	490d      	ldr	r1, [pc, #52]	@ (8000b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <LoopForever+0xe>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b14:	4c0a      	ldr	r4, [pc, #40]	@ (8000b40 <LoopForever+0x16>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b22:	f001 f8d1 	bl	8001cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b26:	f7ff fbf7 	bl	8000318 <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b38:	08002530 	.word	0x08002530
  ldr r2, =_sbss
 8000b3c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b40:	2000023c 	.word	0x2000023c

08000b44 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC3_IRQHandler>

08000b46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f91f 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f80e 	bl	8000b78 <HAL_InitTick>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d002      	beq.n	8000b68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	71fb      	strb	r3, [r7, #7]
 8000b66:	e001      	b.n	8000b6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b68:	f7ff fe22 	bl	80007b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <HAL_InitTick+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d023      	beq.n	8000bd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b8c:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <HAL_InitTick+0x70>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_InitTick+0x6c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f91d 	bl	8000de2 <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10f      	bne.n	8000bce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d809      	bhi.n	8000bc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 f8f5 	bl	8000daa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <HAL_InitTick+0x74>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e004      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e001      	b.n	8000bd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000000c 	.word	0x2000000c
 8000be8:	20000004 	.word	0x20000004
 8000bec:	20000008 	.word	0x20000008

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	2000000c 	.word	0x2000000c
 8000c14:	200000f0 	.word	0x200000f0

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200000f0 	.word	0x200000f0

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	@ (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	@ (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	@ 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	@ 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff47 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff5c 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff8e 	bl	8000ce8 <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffb0 	bl	8000d50 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40007000 	.word	0x40007000

08000e18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e26:	d130      	bne.n	8000e8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e28:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e34:	d038      	beq.n	8000ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e36:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e46:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2232      	movs	r2, #50	@ 0x32
 8000e4c:	fb02 f303 	mul.w	r3, r2, r3
 8000e50:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e52:	fba2 2303 	umull	r2, r3, r2, r3
 8000e56:	0c9b      	lsrs	r3, r3, #18
 8000e58:	3301      	adds	r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e5c:	e002      	b.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e70:	d102      	bne.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1f2      	bne.n	8000e5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e84:	d110      	bne.n	8000ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e00f      	b.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e96:	d007      	beq.n	8000ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ea0:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40007000 	.word	0x40007000
 8000ebc:	20000004 	.word	0x20000004
 8000ec0:	431bde83 	.word	0x431bde83

08000ec4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f000 bc08 	b.w	80016e8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ed8:	4b96      	ldr	r3, [pc, #600]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ee2:	4b94      	ldr	r3, [pc, #592]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0310 	and.w	r3, r3, #16
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80e4 	beq.w	80010c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d007      	beq.n	8000f10 <HAL_RCC_OscConfig+0x4c>
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	2b0c      	cmp	r3, #12
 8000f04:	f040 808b 	bne.w	800101e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	f040 8087 	bne.w	800101e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f10:	4b88      	ldr	r3, [pc, #544]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <HAL_RCC_OscConfig+0x64>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e3df      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a1a      	ldr	r2, [r3, #32]
 8000f2c:	4b81      	ldr	r3, [pc, #516]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d004      	beq.n	8000f42 <HAL_RCC_OscConfig+0x7e>
 8000f38:	4b7e      	ldr	r3, [pc, #504]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f40:	e005      	b.n	8000f4e <HAL_RCC_OscConfig+0x8a>
 8000f42:	4b7c      	ldr	r3, [pc, #496]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d223      	bcs.n	8000f9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fd5a 	bl	8001a10 <RCC_SetFlashLatencyFromMSIRange>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e3c0      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f66:	4b73      	ldr	r3, [pc, #460]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a72      	ldr	r2, [pc, #456]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b70      	ldr	r3, [pc, #448]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	496d      	ldr	r1, [pc, #436]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000f80:	4313      	orrs	r3, r2
 8000f82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f84:	4b6b      	ldr	r3, [pc, #428]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	4968      	ldr	r1, [pc, #416]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000f94:	4313      	orrs	r3, r2
 8000f96:	604b      	str	r3, [r1, #4]
 8000f98:	e025      	b.n	8000fe6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f9a:	4b66      	ldr	r3, [pc, #408]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a65      	ldr	r2, [pc, #404]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b63      	ldr	r3, [pc, #396]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4960      	ldr	r1, [pc, #384]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	495b      	ldr	r1, [pc, #364]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d109      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fd1a 	bl	8001a10 <RCC_SetFlashLatencyFromMSIRange>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e380      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fe6:	f000 fc87 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 8000fea:	4602      	mov	r2, r0
 8000fec:	4b51      	ldr	r3, [pc, #324]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	4950      	ldr	r1, [pc, #320]	@ (8001138 <HAL_RCC_OscConfig+0x274>)
 8000ff8:	5ccb      	ldrb	r3, [r1, r3]
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8001002:	4a4e      	ldr	r2, [pc, #312]	@ (800113c <HAL_RCC_OscConfig+0x278>)
 8001004:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001006:	4b4e      	ldr	r3, [pc, #312]	@ (8001140 <HAL_RCC_OscConfig+0x27c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fdb4 	bl	8000b78 <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d052      	beq.n	80010c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	e364      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d032      	beq.n	800108c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001026:	4b43      	ldr	r3, [pc, #268]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a42      	ldr	r2, [pc, #264]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001032:	f7ff fdf1 	bl	8000c18 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800103a:	f7ff fded 	bl	8000c18 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e34d      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800104c:	4b39      	ldr	r3, [pc, #228]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001058:	4b36      	ldr	r3, [pc, #216]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a35      	ldr	r2, [pc, #212]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b33      	ldr	r3, [pc, #204]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4930      	ldr	r1, [pc, #192]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001076:	4b2f      	ldr	r3, [pc, #188]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	492b      	ldr	r1, [pc, #172]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8001086:	4313      	orrs	r3, r2
 8001088:	604b      	str	r3, [r1, #4]
 800108a:	e01a      	b.n	80010c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800108c:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a28      	ldr	r2, [pc, #160]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8001092:	f023 0301 	bic.w	r3, r3, #1
 8001096:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001098:	f7ff fdbe 	bl	8000c18 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010a0:	f7ff fdba 	bl	8000c18 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e31a      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x1dc>
 80010be:	e000      	b.n	80010c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d073      	beq.n	80011b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_OscConfig+0x21c>
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2b0c      	cmp	r3, #12
 80010d8:	d10e      	bne.n	80010f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d10b      	bne.n	80010f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d063      	beq.n	80011b4 <HAL_RCC_OscConfig+0x2f0>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d15f      	bne.n	80011b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e2f7      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x24c>
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a0b      	ldr	r2, [pc, #44]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e025      	b.n	800115c <HAL_RCC_OscConfig+0x298>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001118:	d114      	bne.n	8001144 <HAL_RCC_OscConfig+0x280>
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a02      	ldr	r2, [pc, #8]	@ (8001134 <HAL_RCC_OscConfig+0x270>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e013      	b.n	800115c <HAL_RCC_OscConfig+0x298>
 8001134:	40021000 	.word	0x40021000
 8001138:	080024ac 	.word	0x080024ac
 800113c:	20000004 	.word	0x20000004
 8001140:	20000008 	.word	0x20000008
 8001144:	4ba0      	ldr	r3, [pc, #640]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a9f      	ldr	r2, [pc, #636]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 800114a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b9d      	ldr	r3, [pc, #628]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a9c      	ldr	r2, [pc, #624]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 8001156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001164:	f7ff fd58 	bl	8000c18 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fd54 	bl	8000c18 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	@ 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e2b4      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800117e:	4b92      	ldr	r3, [pc, #584]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0x2a8>
 800118a:	e014      	b.n	80011b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118c:	f7ff fd44 	bl	8000c18 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fd40 	bl	8000c18 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	@ 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e2a0      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011a6:	4b88      	ldr	r3, [pc, #544]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x2d0>
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d060      	beq.n	8001284 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_OscConfig+0x310>
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b0c      	cmp	r3, #12
 80011cc:	d119      	bne.n	8001202 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d116      	bne.n	8001202 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d4:	4b7c      	ldr	r3, [pc, #496]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_RCC_OscConfig+0x328>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e27d      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b76      	ldr	r3, [pc, #472]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	061b      	lsls	r3, r3, #24
 80011fa:	4973      	ldr	r1, [pc, #460]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001200:	e040      	b.n	8001284 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d023      	beq.n	8001252 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800120a:	4b6f      	ldr	r3, [pc, #444]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6e      	ldr	r2, [pc, #440]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 8001210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001216:	f7ff fcff 	bl	8000c18 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fcfb 	bl	8000c18 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e25b      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001230:	4b65      	ldr	r3, [pc, #404]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b62      	ldr	r3, [pc, #392]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	061b      	lsls	r3, r3, #24
 800124a:	495f      	ldr	r1, [pc, #380]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
 8001250:	e018      	b.n	8001284 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001252:	4b5d      	ldr	r3, [pc, #372]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a5c      	ldr	r2, [pc, #368]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 8001258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800125c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fcdb 	bl	8000c18 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fcd7 	bl	8000c18 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e237      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001278:	4b53      	ldr	r3, [pc, #332]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f0      	bne.n	8001266 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	2b00      	cmp	r3, #0
 800128e:	d03c      	beq.n	800130a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d01c      	beq.n	80012d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001298:	4b4b      	ldr	r3, [pc, #300]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 800129a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800129e:	4a4a      	ldr	r2, [pc, #296]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff fcb6 	bl	8000c18 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fcb2 	bl	8000c18 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e212      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012c2:	4b41      	ldr	r3, [pc, #260]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80012c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0ef      	beq.n	80012b0 <HAL_RCC_OscConfig+0x3ec>
 80012d0:	e01b      	b.n	800130a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d2:	4b3d      	ldr	r3, [pc, #244]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80012d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012d8:	4a3b      	ldr	r2, [pc, #236]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e2:	f7ff fc99 	bl	8000c18 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ea:	f7ff fc95 	bl	8000c18 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e1f5      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012fc:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80012fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1ef      	bne.n	80012ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80a6 	beq.w	8001464 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800131c:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10d      	bne.n	8001344 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	4b27      	ldr	r3, [pc, #156]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132c:	4a26      	ldr	r2, [pc, #152]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 800132e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001332:	6593      	str	r3, [r2, #88]	@ 0x58
 8001334:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001340:	2301      	movs	r3, #1
 8001342:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001344:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <HAL_RCC_OscConfig+0x508>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134c:	2b00      	cmp	r3, #0
 800134e:	d118      	bne.n	8001382 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001350:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <HAL_RCC_OscConfig+0x508>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1d      	ldr	r2, [pc, #116]	@ (80013cc <HAL_RCC_OscConfig+0x508>)
 8001356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135c:	f7ff fc5c 	bl	8000c18 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001364:	f7ff fc58 	bl	8000c18 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e1b8      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_RCC_OscConfig+0x508>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d108      	bne.n	800139c <HAL_RCC_OscConfig+0x4d8>
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 800138c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001390:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800139a:	e029      	b.n	80013f0 <HAL_RCC_OscConfig+0x52c>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d115      	bne.n	80013d0 <HAL_RCC_OscConfig+0x50c>
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80013a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013aa:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80013b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ba:	4a03      	ldr	r2, [pc, #12]	@ (80013c8 <HAL_RCC_OscConfig+0x504>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013c4:	e014      	b.n	80013f0 <HAL_RCC_OscConfig+0x52c>
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40007000 	.word	0x40007000
 80013d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 80013d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013d6:	4a9c      	ldr	r2, [pc, #624]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013e0:	4b99      	ldr	r3, [pc, #612]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 80013e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013e6:	4a98      	ldr	r2, [pc, #608]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 80013e8:	f023 0304 	bic.w	r3, r3, #4
 80013ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d016      	beq.n	8001426 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fc0e 	bl	8000c18 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001400:	f7ff fc0a 	bl	8000c18 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e168      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001416:	4b8c      	ldr	r3, [pc, #560]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0ed      	beq.n	8001400 <HAL_RCC_OscConfig+0x53c>
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001426:	f7ff fbf7 	bl	8000c18 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fbf3 	bl	8000c18 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e151      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001444:	4b80      	ldr	r3, [pc, #512]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1ed      	bne.n	800142e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001452:	7ffb      	ldrb	r3, [r7, #31]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001458:	4b7b      	ldr	r3, [pc, #492]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145c:	4a7a      	ldr	r2, [pc, #488]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 800145e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001462:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b00      	cmp	r3, #0
 800146e:	d03c      	beq.n	80014ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01c      	beq.n	80014b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001478:	4b73      	ldr	r3, [pc, #460]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 800147a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800147e:	4a72      	ldr	r2, [pc, #456]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001488:	f7ff fbc6 	bl	8000c18 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001490:	f7ff fbc2 	bl	8000c18 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e122      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014a2:	4b69      	ldr	r3, [pc, #420]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 80014a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0ef      	beq.n	8001490 <HAL_RCC_OscConfig+0x5cc>
 80014b0:	e01b      	b.n	80014ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014b2:	4b65      	ldr	r3, [pc, #404]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 80014b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014b8:	4a63      	ldr	r2, [pc, #396]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c2:	f7ff fba9 	bl	8000c18 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ca:	f7ff fba5 	bl	8000c18 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e105      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 80014de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1ef      	bne.n	80014ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80f9 	beq.w	80016e6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	f040 80cf 	bne.w	800169c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014fe:	4b52      	ldr	r3, [pc, #328]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 0203 	and.w	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150e:	429a      	cmp	r2, r3
 8001510:	d12c      	bne.n	800156c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151c:	3b01      	subs	r3, #1
 800151e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d123      	bne.n	800156c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800152e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d11b      	bne.n	800156c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d113      	bne.n	800156c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	3b01      	subs	r3, #1
 8001552:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d109      	bne.n	800156c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	085b      	lsrs	r3, r3, #1
 8001564:	3b01      	subs	r3, #1
 8001566:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001568:	429a      	cmp	r2, r3
 800156a:	d071      	beq.n	8001650 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	d068      	beq.n	8001644 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d105      	bne.n	800158a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800157e:	4b32      	ldr	r3, [pc, #200]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0ac      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800158e:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a2d      	ldr	r2, [pc, #180]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001594:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001598:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800159a:	f7ff fb3d 	bl	8000c18 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fb39 	bl	8000c18 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e099      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	4b21      	ldr	r3, [pc, #132]	@ (800164c <HAL_RCC_OscConfig+0x788>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80015d0:	3a01      	subs	r2, #1
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	4311      	orrs	r1, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80015da:	0212      	lsls	r2, r2, #8
 80015dc:	4311      	orrs	r1, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015e2:	0852      	lsrs	r2, r2, #1
 80015e4:	3a01      	subs	r2, #1
 80015e6:	0552      	lsls	r2, r2, #21
 80015e8:	4311      	orrs	r1, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015ee:	0852      	lsrs	r2, r2, #1
 80015f0:	3a01      	subs	r2, #1
 80015f2:	0652      	lsls	r2, r2, #25
 80015f4:	4311      	orrs	r1, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015fa:	06d2      	lsls	r2, r2, #27
 80015fc:	430a      	orrs	r2, r1
 80015fe:	4912      	ldr	r1, [pc, #72]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001600:	4313      	orrs	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0f      	ldr	r2, [pc, #60]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 800160a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800160e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a0c      	ldr	r2, [pc, #48]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800161a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800161c:	f7ff fafc 	bl	8000c18 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff faf8 	bl	8000c18 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e058      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001636:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <HAL_RCC_OscConfig+0x784>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001642:	e050      	b.n	80016e6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e04f      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
 8001648:	40021000 	.word	0x40021000
 800164c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001650:	4b27      	ldr	r3, [pc, #156]	@ (80016f0 <HAL_RCC_OscConfig+0x82c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d144      	bne.n	80016e6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800165c:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <HAL_RCC_OscConfig+0x82c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <HAL_RCC_OscConfig+0x82c>)
 8001662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001666:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001668:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <HAL_RCC_OscConfig+0x82c>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a20      	ldr	r2, [pc, #128]	@ (80016f0 <HAL_RCC_OscConfig+0x82c>)
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001672:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001674:	f7ff fad0 	bl	8000c18 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff facc 	bl	8000c18 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e02c      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_RCC_OscConfig+0x82c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x7b8>
 800169a:	e024      	b.n	80016e6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d01f      	beq.n	80016e2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <HAL_RCC_OscConfig+0x82c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <HAL_RCC_OscConfig+0x82c>)
 80016a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fab3 	bl	8000c18 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff faaf 	bl	8000c18 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e00f      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_RCC_OscConfig+0x82c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_RCC_OscConfig+0x82c>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	4905      	ldr	r1, [pc, #20]	@ (80016f0 <HAL_RCC_OscConfig+0x82c>)
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_RCC_OscConfig+0x830>)
 80016dc:	4013      	ands	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
 80016e0:	e001      	b.n	80016e6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	feeefffc 	.word	0xfeeefffc

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0e7      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b75      	ldr	r3, [pc, #468]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d910      	bls.n	800173c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b72      	ldr	r3, [pc, #456]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 0207 	bic.w	r2, r3, #7
 8001722:	4970      	ldr	r1, [pc, #448]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b6e      	ldr	r3, [pc, #440]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cf      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d010      	beq.n	800176a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	4b66      	ldr	r3, [pc, #408]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001754:	429a      	cmp	r2, r3
 8001756:	d908      	bls.n	800176a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b63      	ldr	r3, [pc, #396]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4960      	ldr	r1, [pc, #384]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d04c      	beq.n	8001810 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177e:	4b5a      	ldr	r3, [pc, #360]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d121      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0a6      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001796:	4b54      	ldr	r3, [pc, #336]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e09a      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ae:	4b4e      	ldr	r3, [pc, #312]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e08e      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017be:	4b4a      	ldr	r3, [pc, #296]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e086      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b46      	ldr	r3, [pc, #280]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4943      	ldr	r1, [pc, #268]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa1a 	bl	8000c18 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fa16 	bl	8000c18 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e06e      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b3a      	ldr	r3, [pc, #232]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d010      	beq.n	800183e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	4b31      	ldr	r3, [pc, #196]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001828:	429a      	cmp	r2, r3
 800182a:	d208      	bcs.n	800183e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b2e      	ldr	r3, [pc, #184]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	492b      	ldr	r1, [pc, #172]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183e:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d210      	bcs.n	800186e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184c:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 0207 	bic.w	r2, r3, #7
 8001854:	4923      	ldr	r1, [pc, #140]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185c:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d001      	beq.n	800186e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e036      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	4918      	ldr	r1, [pc, #96]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d009      	beq.n	80018ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001898:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4910      	ldr	r1, [pc, #64]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ac:	f000 f824 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	490b      	ldr	r1, [pc, #44]	@ (80018ec <HAL_RCC_ClockConfig+0x1f4>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	4a09      	ldr	r2, [pc, #36]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80018ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_RCC_ClockConfig+0x1fc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f951 	bl	8000b78 <HAL_InitTick>
 80018d6:	4603      	mov	r3, r0
 80018d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80018da:	7afb      	ldrb	r3, [r7, #11]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40022000 	.word	0x40022000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	080024ac 	.word	0x080024ac
 80018f0:	20000004 	.word	0x20000004
 80018f4:	20000008 	.word	0x20000008

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001906:	4b3e      	ldr	r3, [pc, #248]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001910:	4b3b      	ldr	r3, [pc, #236]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x34>
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d121      	bne.n	800196a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d11e      	bne.n	800196a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800192c:	4b34      	ldr	r3, [pc, #208]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001938:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800193a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e005      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001948:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001954:	4a2b      	ldr	r2, [pc, #172]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10d      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b04      	cmp	r3, #4
 800196e:	d102      	bne.n	8001976 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001970:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	e004      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d101      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x114>)
 800197e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d134      	bne.n	80019f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001986:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0xa6>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d003      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0xac>
 800199c:	e005      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x110>)
 80019a0:	617b      	str	r3, [r7, #20]
      break;
 80019a2:	e005      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019a4:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x114>)
 80019a6:	617b      	str	r3, [r7, #20]
      break;
 80019a8:	e002      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	617b      	str	r3, [r7, #20]
      break;
 80019ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	3301      	adds	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	fb03 f202 	mul.w	r2, r3, r2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	0e5b      	lsrs	r3, r3, #25
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	3301      	adds	r3, #1
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019f0:	69bb      	ldr	r3, [r7, #24]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	080024bc 	.word	0x080024bc
 8001a08:	00f42400 	.word	0x00f42400
 8001a0c:	007a1200 	.word	0x007a1200

08001a10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a28:	f7ff f9e8 	bl	8000dfc <HAL_PWREx_GetVoltageRange>
 8001a2c:	6178      	str	r0, [r7, #20]
 8001a2e:	e014      	b.n	8001a5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a30:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a34:	4a24      	ldr	r2, [pc, #144]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a3c:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a48:	f7ff f9d8 	bl	8000dfc <HAL_PWREx_GetVoltageRange>
 8001a4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a52:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a58:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a60:	d10b      	bne.n	8001a7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b80      	cmp	r3, #128	@ 0x80
 8001a66:	d919      	bls.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a6c:	d902      	bls.n	8001a74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a6e:	2302      	movs	r3, #2
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	e013      	b.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a74:	2301      	movs	r3, #1
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	e010      	b.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b80      	cmp	r3, #128	@ 0x80
 8001a7e:	d902      	bls.n	8001a86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a80:	2303      	movs	r3, #3
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	e00a      	b.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b80      	cmp	r3, #128	@ 0x80
 8001a8a:	d102      	bne.n	8001a92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	e004      	b.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b70      	cmp	r3, #112	@ 0x70
 8001a96:	d101      	bne.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a98:	2301      	movs	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 0207 	bic.w	r2, r3, #7
 8001aa4:	4909      	ldr	r1, [pc, #36]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001aac:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d001      	beq.n	8001abe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40022000 	.word	0x40022000

08001ad0 <malloc>:
 8001ad0:	4b02      	ldr	r3, [pc, #8]	@ (8001adc <malloc+0xc>)
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	f000 b82d 	b.w	8001b34 <_malloc_r>
 8001ada:	bf00      	nop
 8001adc:	20000010 	.word	0x20000010

08001ae0 <free>:
 8001ae0:	4b02      	ldr	r3, [pc, #8]	@ (8001aec <free+0xc>)
 8001ae2:	4601      	mov	r1, r0
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	f000 b915 	b.w	8001d14 <_free_r>
 8001aea:	bf00      	nop
 8001aec:	20000010 	.word	0x20000010

08001af0 <sbrk_aligned>:
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	4e0f      	ldr	r6, [pc, #60]	@ (8001b30 <sbrk_aligned+0x40>)
 8001af4:	460c      	mov	r4, r1
 8001af6:	6831      	ldr	r1, [r6, #0]
 8001af8:	4605      	mov	r5, r0
 8001afa:	b911      	cbnz	r1, 8001b02 <sbrk_aligned+0x12>
 8001afc:	f000 f8ce 	bl	8001c9c <_sbrk_r>
 8001b00:	6030      	str	r0, [r6, #0]
 8001b02:	4621      	mov	r1, r4
 8001b04:	4628      	mov	r0, r5
 8001b06:	f000 f8c9 	bl	8001c9c <_sbrk_r>
 8001b0a:	1c43      	adds	r3, r0, #1
 8001b0c:	d103      	bne.n	8001b16 <sbrk_aligned+0x26>
 8001b0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001b12:	4620      	mov	r0, r4
 8001b14:	bd70      	pop	{r4, r5, r6, pc}
 8001b16:	1cc4      	adds	r4, r0, #3
 8001b18:	f024 0403 	bic.w	r4, r4, #3
 8001b1c:	42a0      	cmp	r0, r4
 8001b1e:	d0f8      	beq.n	8001b12 <sbrk_aligned+0x22>
 8001b20:	1a21      	subs	r1, r4, r0
 8001b22:	4628      	mov	r0, r5
 8001b24:	f000 f8ba 	bl	8001c9c <_sbrk_r>
 8001b28:	3001      	adds	r0, #1
 8001b2a:	d1f2      	bne.n	8001b12 <sbrk_aligned+0x22>
 8001b2c:	e7ef      	b.n	8001b0e <sbrk_aligned+0x1e>
 8001b2e:	bf00      	nop
 8001b30:	200000f4 	.word	0x200000f4

08001b34 <_malloc_r>:
 8001b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b38:	1ccd      	adds	r5, r1, #3
 8001b3a:	f025 0503 	bic.w	r5, r5, #3
 8001b3e:	3508      	adds	r5, #8
 8001b40:	2d0c      	cmp	r5, #12
 8001b42:	bf38      	it	cc
 8001b44:	250c      	movcc	r5, #12
 8001b46:	2d00      	cmp	r5, #0
 8001b48:	4606      	mov	r6, r0
 8001b4a:	db01      	blt.n	8001b50 <_malloc_r+0x1c>
 8001b4c:	42a9      	cmp	r1, r5
 8001b4e:	d904      	bls.n	8001b5a <_malloc_r+0x26>
 8001b50:	230c      	movs	r3, #12
 8001b52:	6033      	str	r3, [r6, #0]
 8001b54:	2000      	movs	r0, #0
 8001b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c30 <_malloc_r+0xfc>
 8001b5e:	f000 f869 	bl	8001c34 <__malloc_lock>
 8001b62:	f8d8 3000 	ldr.w	r3, [r8]
 8001b66:	461c      	mov	r4, r3
 8001b68:	bb44      	cbnz	r4, 8001bbc <_malloc_r+0x88>
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	f7ff ffbf 	bl	8001af0 <sbrk_aligned>
 8001b72:	1c43      	adds	r3, r0, #1
 8001b74:	4604      	mov	r4, r0
 8001b76:	d158      	bne.n	8001c2a <_malloc_r+0xf6>
 8001b78:	f8d8 4000 	ldr.w	r4, [r8]
 8001b7c:	4627      	mov	r7, r4
 8001b7e:	2f00      	cmp	r7, #0
 8001b80:	d143      	bne.n	8001c0a <_malloc_r+0xd6>
 8001b82:	2c00      	cmp	r4, #0
 8001b84:	d04b      	beq.n	8001c1e <_malloc_r+0xea>
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	4639      	mov	r1, r7
 8001b8a:	4630      	mov	r0, r6
 8001b8c:	eb04 0903 	add.w	r9, r4, r3
 8001b90:	f000 f884 	bl	8001c9c <_sbrk_r>
 8001b94:	4581      	cmp	r9, r0
 8001b96:	d142      	bne.n	8001c1e <_malloc_r+0xea>
 8001b98:	6821      	ldr	r1, [r4, #0]
 8001b9a:	1a6d      	subs	r5, r5, r1
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f7ff ffa6 	bl	8001af0 <sbrk_aligned>
 8001ba4:	3001      	adds	r0, #1
 8001ba6:	d03a      	beq.n	8001c1e <_malloc_r+0xea>
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	442b      	add	r3, r5
 8001bac:	6023      	str	r3, [r4, #0]
 8001bae:	f8d8 3000 	ldr.w	r3, [r8]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	bb62      	cbnz	r2, 8001c10 <_malloc_r+0xdc>
 8001bb6:	f8c8 7000 	str.w	r7, [r8]
 8001bba:	e00f      	b.n	8001bdc <_malloc_r+0xa8>
 8001bbc:	6822      	ldr	r2, [r4, #0]
 8001bbe:	1b52      	subs	r2, r2, r5
 8001bc0:	d420      	bmi.n	8001c04 <_malloc_r+0xd0>
 8001bc2:	2a0b      	cmp	r2, #11
 8001bc4:	d917      	bls.n	8001bf6 <_malloc_r+0xc2>
 8001bc6:	1961      	adds	r1, r4, r5
 8001bc8:	42a3      	cmp	r3, r4
 8001bca:	6025      	str	r5, [r4, #0]
 8001bcc:	bf18      	it	ne
 8001bce:	6059      	strne	r1, [r3, #4]
 8001bd0:	6863      	ldr	r3, [r4, #4]
 8001bd2:	bf08      	it	eq
 8001bd4:	f8c8 1000 	streq.w	r1, [r8]
 8001bd8:	5162      	str	r2, [r4, r5]
 8001bda:	604b      	str	r3, [r1, #4]
 8001bdc:	4630      	mov	r0, r6
 8001bde:	f000 f82f 	bl	8001c40 <__malloc_unlock>
 8001be2:	f104 000b 	add.w	r0, r4, #11
 8001be6:	1d23      	adds	r3, r4, #4
 8001be8:	f020 0007 	bic.w	r0, r0, #7
 8001bec:	1ac2      	subs	r2, r0, r3
 8001bee:	bf1c      	itt	ne
 8001bf0:	1a1b      	subne	r3, r3, r0
 8001bf2:	50a3      	strne	r3, [r4, r2]
 8001bf4:	e7af      	b.n	8001b56 <_malloc_r+0x22>
 8001bf6:	6862      	ldr	r2, [r4, #4]
 8001bf8:	42a3      	cmp	r3, r4
 8001bfa:	bf0c      	ite	eq
 8001bfc:	f8c8 2000 	streq.w	r2, [r8]
 8001c00:	605a      	strne	r2, [r3, #4]
 8001c02:	e7eb      	b.n	8001bdc <_malloc_r+0xa8>
 8001c04:	4623      	mov	r3, r4
 8001c06:	6864      	ldr	r4, [r4, #4]
 8001c08:	e7ae      	b.n	8001b68 <_malloc_r+0x34>
 8001c0a:	463c      	mov	r4, r7
 8001c0c:	687f      	ldr	r7, [r7, #4]
 8001c0e:	e7b6      	b.n	8001b7e <_malloc_r+0x4a>
 8001c10:	461a      	mov	r2, r3
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	42a3      	cmp	r3, r4
 8001c16:	d1fb      	bne.n	8001c10 <_malloc_r+0xdc>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	6053      	str	r3, [r2, #4]
 8001c1c:	e7de      	b.n	8001bdc <_malloc_r+0xa8>
 8001c1e:	230c      	movs	r3, #12
 8001c20:	6033      	str	r3, [r6, #0]
 8001c22:	4630      	mov	r0, r6
 8001c24:	f000 f80c 	bl	8001c40 <__malloc_unlock>
 8001c28:	e794      	b.n	8001b54 <_malloc_r+0x20>
 8001c2a:	6005      	str	r5, [r0, #0]
 8001c2c:	e7d6      	b.n	8001bdc <_malloc_r+0xa8>
 8001c2e:	bf00      	nop
 8001c30:	200000f8 	.word	0x200000f8

08001c34 <__malloc_lock>:
 8001c34:	4801      	ldr	r0, [pc, #4]	@ (8001c3c <__malloc_lock+0x8>)
 8001c36:	f000 b86b 	b.w	8001d10 <__retarget_lock_acquire_recursive>
 8001c3a:	bf00      	nop
 8001c3c:	20000234 	.word	0x20000234

08001c40 <__malloc_unlock>:
 8001c40:	4801      	ldr	r0, [pc, #4]	@ (8001c48 <__malloc_unlock+0x8>)
 8001c42:	f000 b866 	b.w	8001d12 <__retarget_lock_release_recursive>
 8001c46:	bf00      	nop
 8001c48:	20000234 	.word	0x20000234

08001c4c <siprintf>:
 8001c4c:	b40e      	push	{r1, r2, r3}
 8001c4e:	b500      	push	{lr}
 8001c50:	b09c      	sub	sp, #112	@ 0x70
 8001c52:	ab1d      	add	r3, sp, #116	@ 0x74
 8001c54:	9002      	str	r0, [sp, #8]
 8001c56:	9006      	str	r0, [sp, #24]
 8001c58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001c5c:	4809      	ldr	r0, [pc, #36]	@ (8001c84 <siprintf+0x38>)
 8001c5e:	9107      	str	r1, [sp, #28]
 8001c60:	9104      	str	r1, [sp, #16]
 8001c62:	4909      	ldr	r1, [pc, #36]	@ (8001c88 <siprintf+0x3c>)
 8001c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c68:	9105      	str	r1, [sp, #20]
 8001c6a:	6800      	ldr	r0, [r0, #0]
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	a902      	add	r1, sp, #8
 8001c70:	f000 f8f6 	bl	8001e60 <_svfiprintf_r>
 8001c74:	9b02      	ldr	r3, [sp, #8]
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	b01c      	add	sp, #112	@ 0x70
 8001c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c80:	b003      	add	sp, #12
 8001c82:	4770      	bx	lr
 8001c84:	20000010 	.word	0x20000010
 8001c88:	ffff0208 	.word	0xffff0208

08001c8c <memset>:
 8001c8c:	4402      	add	r2, r0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d100      	bne.n	8001c96 <memset+0xa>
 8001c94:	4770      	bx	lr
 8001c96:	f803 1b01 	strb.w	r1, [r3], #1
 8001c9a:	e7f9      	b.n	8001c90 <memset+0x4>

08001c9c <_sbrk_r>:
 8001c9c:	b538      	push	{r3, r4, r5, lr}
 8001c9e:	4d06      	ldr	r5, [pc, #24]	@ (8001cb8 <_sbrk_r+0x1c>)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	602b      	str	r3, [r5, #0]
 8001ca8:	f7fe fdd6 	bl	8000858 <_sbrk>
 8001cac:	1c43      	adds	r3, r0, #1
 8001cae:	d102      	bne.n	8001cb6 <_sbrk_r+0x1a>
 8001cb0:	682b      	ldr	r3, [r5, #0]
 8001cb2:	b103      	cbz	r3, 8001cb6 <_sbrk_r+0x1a>
 8001cb4:	6023      	str	r3, [r4, #0]
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
 8001cb8:	20000238 	.word	0x20000238

08001cbc <__errno>:
 8001cbc:	4b01      	ldr	r3, [pc, #4]	@ (8001cc4 <__errno+0x8>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000010 	.word	0x20000010

08001cc8 <__libc_init_array>:
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	4d0d      	ldr	r5, [pc, #52]	@ (8001d00 <__libc_init_array+0x38>)
 8001ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8001d04 <__libc_init_array+0x3c>)
 8001cce:	1b64      	subs	r4, r4, r5
 8001cd0:	10a4      	asrs	r4, r4, #2
 8001cd2:	2600      	movs	r6, #0
 8001cd4:	42a6      	cmp	r6, r4
 8001cd6:	d109      	bne.n	8001cec <__libc_init_array+0x24>
 8001cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8001d08 <__libc_init_array+0x40>)
 8001cda:	4c0c      	ldr	r4, [pc, #48]	@ (8001d0c <__libc_init_array+0x44>)
 8001cdc:	f000 fba8 	bl	8002430 <_init>
 8001ce0:	1b64      	subs	r4, r4, r5
 8001ce2:	10a4      	asrs	r4, r4, #2
 8001ce4:	2600      	movs	r6, #0
 8001ce6:	42a6      	cmp	r6, r4
 8001ce8:	d105      	bne.n	8001cf6 <__libc_init_array+0x2e>
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
 8001cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cf0:	4798      	blx	r3
 8001cf2:	3601      	adds	r6, #1
 8001cf4:	e7ee      	b.n	8001cd4 <__libc_init_array+0xc>
 8001cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cfa:	4798      	blx	r3
 8001cfc:	3601      	adds	r6, #1
 8001cfe:	e7f2      	b.n	8001ce6 <__libc_init_array+0x1e>
 8001d00:	08002528 	.word	0x08002528
 8001d04:	08002528 	.word	0x08002528
 8001d08:	08002528 	.word	0x08002528
 8001d0c:	0800252c 	.word	0x0800252c

08001d10 <__retarget_lock_acquire_recursive>:
 8001d10:	4770      	bx	lr

08001d12 <__retarget_lock_release_recursive>:
 8001d12:	4770      	bx	lr

08001d14 <_free_r>:
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4605      	mov	r5, r0
 8001d18:	2900      	cmp	r1, #0
 8001d1a:	d041      	beq.n	8001da0 <_free_r+0x8c>
 8001d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d20:	1f0c      	subs	r4, r1, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bfb8      	it	lt
 8001d26:	18e4      	addlt	r4, r4, r3
 8001d28:	f7ff ff84 	bl	8001c34 <__malloc_lock>
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <_free_r+0x90>)
 8001d2e:	6813      	ldr	r3, [r2, #0]
 8001d30:	b933      	cbnz	r3, 8001d40 <_free_r+0x2c>
 8001d32:	6063      	str	r3, [r4, #4]
 8001d34:	6014      	str	r4, [r2, #0]
 8001d36:	4628      	mov	r0, r5
 8001d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d3c:	f7ff bf80 	b.w	8001c40 <__malloc_unlock>
 8001d40:	42a3      	cmp	r3, r4
 8001d42:	d908      	bls.n	8001d56 <_free_r+0x42>
 8001d44:	6820      	ldr	r0, [r4, #0]
 8001d46:	1821      	adds	r1, r4, r0
 8001d48:	428b      	cmp	r3, r1
 8001d4a:	bf01      	itttt	eq
 8001d4c:	6819      	ldreq	r1, [r3, #0]
 8001d4e:	685b      	ldreq	r3, [r3, #4]
 8001d50:	1809      	addeq	r1, r1, r0
 8001d52:	6021      	streq	r1, [r4, #0]
 8001d54:	e7ed      	b.n	8001d32 <_free_r+0x1e>
 8001d56:	461a      	mov	r2, r3
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	b10b      	cbz	r3, 8001d60 <_free_r+0x4c>
 8001d5c:	42a3      	cmp	r3, r4
 8001d5e:	d9fa      	bls.n	8001d56 <_free_r+0x42>
 8001d60:	6811      	ldr	r1, [r2, #0]
 8001d62:	1850      	adds	r0, r2, r1
 8001d64:	42a0      	cmp	r0, r4
 8001d66:	d10b      	bne.n	8001d80 <_free_r+0x6c>
 8001d68:	6820      	ldr	r0, [r4, #0]
 8001d6a:	4401      	add	r1, r0
 8001d6c:	1850      	adds	r0, r2, r1
 8001d6e:	4283      	cmp	r3, r0
 8001d70:	6011      	str	r1, [r2, #0]
 8001d72:	d1e0      	bne.n	8001d36 <_free_r+0x22>
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	6053      	str	r3, [r2, #4]
 8001d7a:	4408      	add	r0, r1
 8001d7c:	6010      	str	r0, [r2, #0]
 8001d7e:	e7da      	b.n	8001d36 <_free_r+0x22>
 8001d80:	d902      	bls.n	8001d88 <_free_r+0x74>
 8001d82:	230c      	movs	r3, #12
 8001d84:	602b      	str	r3, [r5, #0]
 8001d86:	e7d6      	b.n	8001d36 <_free_r+0x22>
 8001d88:	6820      	ldr	r0, [r4, #0]
 8001d8a:	1821      	adds	r1, r4, r0
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	bf04      	itt	eq
 8001d90:	6819      	ldreq	r1, [r3, #0]
 8001d92:	685b      	ldreq	r3, [r3, #4]
 8001d94:	6063      	str	r3, [r4, #4]
 8001d96:	bf04      	itt	eq
 8001d98:	1809      	addeq	r1, r1, r0
 8001d9a:	6021      	streq	r1, [r4, #0]
 8001d9c:	6054      	str	r4, [r2, #4]
 8001d9e:	e7ca      	b.n	8001d36 <_free_r+0x22>
 8001da0:	bd38      	pop	{r3, r4, r5, pc}
 8001da2:	bf00      	nop
 8001da4:	200000f8 	.word	0x200000f8

08001da8 <__ssputs_r>:
 8001da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dac:	688e      	ldr	r6, [r1, #8]
 8001dae:	461f      	mov	r7, r3
 8001db0:	42be      	cmp	r6, r7
 8001db2:	680b      	ldr	r3, [r1, #0]
 8001db4:	4682      	mov	sl, r0
 8001db6:	460c      	mov	r4, r1
 8001db8:	4690      	mov	r8, r2
 8001dba:	d82d      	bhi.n	8001e18 <__ssputs_r+0x70>
 8001dbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001dc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001dc4:	d026      	beq.n	8001e14 <__ssputs_r+0x6c>
 8001dc6:	6965      	ldr	r5, [r4, #20]
 8001dc8:	6909      	ldr	r1, [r1, #16]
 8001dca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001dce:	eba3 0901 	sub.w	r9, r3, r1
 8001dd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001dd6:	1c7b      	adds	r3, r7, #1
 8001dd8:	444b      	add	r3, r9
 8001dda:	106d      	asrs	r5, r5, #1
 8001ddc:	429d      	cmp	r5, r3
 8001dde:	bf38      	it	cc
 8001de0:	461d      	movcc	r5, r3
 8001de2:	0553      	lsls	r3, r2, #21
 8001de4:	d527      	bpl.n	8001e36 <__ssputs_r+0x8e>
 8001de6:	4629      	mov	r1, r5
 8001de8:	f7ff fea4 	bl	8001b34 <_malloc_r>
 8001dec:	4606      	mov	r6, r0
 8001dee:	b360      	cbz	r0, 8001e4a <__ssputs_r+0xa2>
 8001df0:	6921      	ldr	r1, [r4, #16]
 8001df2:	464a      	mov	r2, r9
 8001df4:	f000 fb06 	bl	8002404 <memcpy>
 8001df8:	89a3      	ldrh	r3, [r4, #12]
 8001dfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e02:	81a3      	strh	r3, [r4, #12]
 8001e04:	6126      	str	r6, [r4, #16]
 8001e06:	6165      	str	r5, [r4, #20]
 8001e08:	444e      	add	r6, r9
 8001e0a:	eba5 0509 	sub.w	r5, r5, r9
 8001e0e:	6026      	str	r6, [r4, #0]
 8001e10:	60a5      	str	r5, [r4, #8]
 8001e12:	463e      	mov	r6, r7
 8001e14:	42be      	cmp	r6, r7
 8001e16:	d900      	bls.n	8001e1a <__ssputs_r+0x72>
 8001e18:	463e      	mov	r6, r7
 8001e1a:	6820      	ldr	r0, [r4, #0]
 8001e1c:	4632      	mov	r2, r6
 8001e1e:	4641      	mov	r1, r8
 8001e20:	f000 fad6 	bl	80023d0 <memmove>
 8001e24:	68a3      	ldr	r3, [r4, #8]
 8001e26:	1b9b      	subs	r3, r3, r6
 8001e28:	60a3      	str	r3, [r4, #8]
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	4433      	add	r3, r6
 8001e2e:	6023      	str	r3, [r4, #0]
 8001e30:	2000      	movs	r0, #0
 8001e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e36:	462a      	mov	r2, r5
 8001e38:	f000 fa9c 	bl	8002374 <_realloc_r>
 8001e3c:	4606      	mov	r6, r0
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	d1e0      	bne.n	8001e04 <__ssputs_r+0x5c>
 8001e42:	6921      	ldr	r1, [r4, #16]
 8001e44:	4650      	mov	r0, sl
 8001e46:	f7ff ff65 	bl	8001d14 <_free_r>
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	f8ca 3000 	str.w	r3, [sl]
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e56:	81a3      	strh	r3, [r4, #12]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e5c:	e7e9      	b.n	8001e32 <__ssputs_r+0x8a>
	...

08001e60 <_svfiprintf_r>:
 8001e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e64:	4698      	mov	r8, r3
 8001e66:	898b      	ldrh	r3, [r1, #12]
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	b09d      	sub	sp, #116	@ 0x74
 8001e6c:	4607      	mov	r7, r0
 8001e6e:	460d      	mov	r5, r1
 8001e70:	4614      	mov	r4, r2
 8001e72:	d510      	bpl.n	8001e96 <_svfiprintf_r+0x36>
 8001e74:	690b      	ldr	r3, [r1, #16]
 8001e76:	b973      	cbnz	r3, 8001e96 <_svfiprintf_r+0x36>
 8001e78:	2140      	movs	r1, #64	@ 0x40
 8001e7a:	f7ff fe5b 	bl	8001b34 <_malloc_r>
 8001e7e:	6028      	str	r0, [r5, #0]
 8001e80:	6128      	str	r0, [r5, #16]
 8001e82:	b930      	cbnz	r0, 8001e92 <_svfiprintf_r+0x32>
 8001e84:	230c      	movs	r3, #12
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e8c:	b01d      	add	sp, #116	@ 0x74
 8001e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e92:	2340      	movs	r3, #64	@ 0x40
 8001e94:	616b      	str	r3, [r5, #20]
 8001e96:	2300      	movs	r3, #0
 8001e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001ea0:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ea4:	2330      	movs	r3, #48	@ 0x30
 8001ea6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002044 <_svfiprintf_r+0x1e4>
 8001eaa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001eae:	f04f 0901 	mov.w	r9, #1
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	469a      	mov	sl, r3
 8001eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001eba:	b10a      	cbz	r2, 8001ec0 <_svfiprintf_r+0x60>
 8001ebc:	2a25      	cmp	r2, #37	@ 0x25
 8001ebe:	d1f9      	bne.n	8001eb4 <_svfiprintf_r+0x54>
 8001ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8001ec4:	d00b      	beq.n	8001ede <_svfiprintf_r+0x7e>
 8001ec6:	465b      	mov	r3, fp
 8001ec8:	4622      	mov	r2, r4
 8001eca:	4629      	mov	r1, r5
 8001ecc:	4638      	mov	r0, r7
 8001ece:	f7ff ff6b 	bl	8001da8 <__ssputs_r>
 8001ed2:	3001      	adds	r0, #1
 8001ed4:	f000 80a7 	beq.w	8002026 <_svfiprintf_r+0x1c6>
 8001ed8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001eda:	445a      	add	r2, fp
 8001edc:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ede:	f89a 3000 	ldrb.w	r3, [sl]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 809f 	beq.w	8002026 <_svfiprintf_r+0x1c6>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ef2:	f10a 0a01 	add.w	sl, sl, #1
 8001ef6:	9304      	str	r3, [sp, #16]
 8001ef8:	9307      	str	r3, [sp, #28]
 8001efa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001efe:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f00:	4654      	mov	r4, sl
 8001f02:	2205      	movs	r2, #5
 8001f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f08:	484e      	ldr	r0, [pc, #312]	@ (8002044 <_svfiprintf_r+0x1e4>)
 8001f0a:	f7fe f971 	bl	80001f0 <memchr>
 8001f0e:	9a04      	ldr	r2, [sp, #16]
 8001f10:	b9d8      	cbnz	r0, 8001f4a <_svfiprintf_r+0xea>
 8001f12:	06d0      	lsls	r0, r2, #27
 8001f14:	bf44      	itt	mi
 8001f16:	2320      	movmi	r3, #32
 8001f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f1c:	0711      	lsls	r1, r2, #28
 8001f1e:	bf44      	itt	mi
 8001f20:	232b      	movmi	r3, #43	@ 0x2b
 8001f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f26:	f89a 3000 	ldrb.w	r3, [sl]
 8001f2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f2c:	d015      	beq.n	8001f5a <_svfiprintf_r+0xfa>
 8001f2e:	9a07      	ldr	r2, [sp, #28]
 8001f30:	4654      	mov	r4, sl
 8001f32:	2000      	movs	r0, #0
 8001f34:	f04f 0c0a 	mov.w	ip, #10
 8001f38:	4621      	mov	r1, r4
 8001f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f3e:	3b30      	subs	r3, #48	@ 0x30
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d94b      	bls.n	8001fdc <_svfiprintf_r+0x17c>
 8001f44:	b1b0      	cbz	r0, 8001f74 <_svfiprintf_r+0x114>
 8001f46:	9207      	str	r2, [sp, #28]
 8001f48:	e014      	b.n	8001f74 <_svfiprintf_r+0x114>
 8001f4a:	eba0 0308 	sub.w	r3, r0, r8
 8001f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	9304      	str	r3, [sp, #16]
 8001f56:	46a2      	mov	sl, r4
 8001f58:	e7d2      	b.n	8001f00 <_svfiprintf_r+0xa0>
 8001f5a:	9b03      	ldr	r3, [sp, #12]
 8001f5c:	1d19      	adds	r1, r3, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	9103      	str	r1, [sp, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	bfbb      	ittet	lt
 8001f66:	425b      	neglt	r3, r3
 8001f68:	f042 0202 	orrlt.w	r2, r2, #2
 8001f6c:	9307      	strge	r3, [sp, #28]
 8001f6e:	9307      	strlt	r3, [sp, #28]
 8001f70:	bfb8      	it	lt
 8001f72:	9204      	strlt	r2, [sp, #16]
 8001f74:	7823      	ldrb	r3, [r4, #0]
 8001f76:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f78:	d10a      	bne.n	8001f90 <_svfiprintf_r+0x130>
 8001f7a:	7863      	ldrb	r3, [r4, #1]
 8001f7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f7e:	d132      	bne.n	8001fe6 <_svfiprintf_r+0x186>
 8001f80:	9b03      	ldr	r3, [sp, #12]
 8001f82:	1d1a      	adds	r2, r3, #4
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	9203      	str	r2, [sp, #12]
 8001f88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f8c:	3402      	adds	r4, #2
 8001f8e:	9305      	str	r3, [sp, #20]
 8001f90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002054 <_svfiprintf_r+0x1f4>
 8001f94:	7821      	ldrb	r1, [r4, #0]
 8001f96:	2203      	movs	r2, #3
 8001f98:	4650      	mov	r0, sl
 8001f9a:	f7fe f929 	bl	80001f0 <memchr>
 8001f9e:	b138      	cbz	r0, 8001fb0 <_svfiprintf_r+0x150>
 8001fa0:	9b04      	ldr	r3, [sp, #16]
 8001fa2:	eba0 000a 	sub.w	r0, r0, sl
 8001fa6:	2240      	movs	r2, #64	@ 0x40
 8001fa8:	4082      	lsls	r2, r0
 8001faa:	4313      	orrs	r3, r2
 8001fac:	3401      	adds	r4, #1
 8001fae:	9304      	str	r3, [sp, #16]
 8001fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fb4:	4824      	ldr	r0, [pc, #144]	@ (8002048 <_svfiprintf_r+0x1e8>)
 8001fb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001fba:	2206      	movs	r2, #6
 8001fbc:	f7fe f918 	bl	80001f0 <memchr>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d036      	beq.n	8002032 <_svfiprintf_r+0x1d2>
 8001fc4:	4b21      	ldr	r3, [pc, #132]	@ (800204c <_svfiprintf_r+0x1ec>)
 8001fc6:	bb1b      	cbnz	r3, 8002010 <_svfiprintf_r+0x1b0>
 8001fc8:	9b03      	ldr	r3, [sp, #12]
 8001fca:	3307      	adds	r3, #7
 8001fcc:	f023 0307 	bic.w	r3, r3, #7
 8001fd0:	3308      	adds	r3, #8
 8001fd2:	9303      	str	r3, [sp, #12]
 8001fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001fd6:	4433      	add	r3, r6
 8001fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8001fda:	e76a      	b.n	8001eb2 <_svfiprintf_r+0x52>
 8001fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	e7a8      	b.n	8001f38 <_svfiprintf_r+0xd8>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	3401      	adds	r4, #1
 8001fea:	9305      	str	r3, [sp, #20]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f04f 0c0a 	mov.w	ip, #10
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ff8:	3a30      	subs	r2, #48	@ 0x30
 8001ffa:	2a09      	cmp	r2, #9
 8001ffc:	d903      	bls.n	8002006 <_svfiprintf_r+0x1a6>
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0c6      	beq.n	8001f90 <_svfiprintf_r+0x130>
 8002002:	9105      	str	r1, [sp, #20]
 8002004:	e7c4      	b.n	8001f90 <_svfiprintf_r+0x130>
 8002006:	fb0c 2101 	mla	r1, ip, r1, r2
 800200a:	4604      	mov	r4, r0
 800200c:	2301      	movs	r3, #1
 800200e:	e7f0      	b.n	8001ff2 <_svfiprintf_r+0x192>
 8002010:	ab03      	add	r3, sp, #12
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	462a      	mov	r2, r5
 8002016:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <_svfiprintf_r+0x1f0>)
 8002018:	a904      	add	r1, sp, #16
 800201a:	4638      	mov	r0, r7
 800201c:	f3af 8000 	nop.w
 8002020:	1c42      	adds	r2, r0, #1
 8002022:	4606      	mov	r6, r0
 8002024:	d1d6      	bne.n	8001fd4 <_svfiprintf_r+0x174>
 8002026:	89ab      	ldrh	r3, [r5, #12]
 8002028:	065b      	lsls	r3, r3, #25
 800202a:	f53f af2d 	bmi.w	8001e88 <_svfiprintf_r+0x28>
 800202e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002030:	e72c      	b.n	8001e8c <_svfiprintf_r+0x2c>
 8002032:	ab03      	add	r3, sp, #12
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	462a      	mov	r2, r5
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <_svfiprintf_r+0x1f0>)
 800203a:	a904      	add	r1, sp, #16
 800203c:	4638      	mov	r0, r7
 800203e:	f000 f879 	bl	8002134 <_printf_i>
 8002042:	e7ed      	b.n	8002020 <_svfiprintf_r+0x1c0>
 8002044:	080024ec 	.word	0x080024ec
 8002048:	080024f6 	.word	0x080024f6
 800204c:	00000000 	.word	0x00000000
 8002050:	08001da9 	.word	0x08001da9
 8002054:	080024f2 	.word	0x080024f2

08002058 <_printf_common>:
 8002058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800205c:	4616      	mov	r6, r2
 800205e:	4698      	mov	r8, r3
 8002060:	688a      	ldr	r2, [r1, #8]
 8002062:	690b      	ldr	r3, [r1, #16]
 8002064:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002068:	4293      	cmp	r3, r2
 800206a:	bfb8      	it	lt
 800206c:	4613      	movlt	r3, r2
 800206e:	6033      	str	r3, [r6, #0]
 8002070:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002074:	4607      	mov	r7, r0
 8002076:	460c      	mov	r4, r1
 8002078:	b10a      	cbz	r2, 800207e <_printf_common+0x26>
 800207a:	3301      	adds	r3, #1
 800207c:	6033      	str	r3, [r6, #0]
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	0699      	lsls	r1, r3, #26
 8002082:	bf42      	ittt	mi
 8002084:	6833      	ldrmi	r3, [r6, #0]
 8002086:	3302      	addmi	r3, #2
 8002088:	6033      	strmi	r3, [r6, #0]
 800208a:	6825      	ldr	r5, [r4, #0]
 800208c:	f015 0506 	ands.w	r5, r5, #6
 8002090:	d106      	bne.n	80020a0 <_printf_common+0x48>
 8002092:	f104 0a19 	add.w	sl, r4, #25
 8002096:	68e3      	ldr	r3, [r4, #12]
 8002098:	6832      	ldr	r2, [r6, #0]
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	42ab      	cmp	r3, r5
 800209e:	dc26      	bgt.n	80020ee <_printf_common+0x96>
 80020a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80020a4:	6822      	ldr	r2, [r4, #0]
 80020a6:	3b00      	subs	r3, #0
 80020a8:	bf18      	it	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	0692      	lsls	r2, r2, #26
 80020ae:	d42b      	bmi.n	8002108 <_printf_common+0xb0>
 80020b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80020b4:	4641      	mov	r1, r8
 80020b6:	4638      	mov	r0, r7
 80020b8:	47c8      	blx	r9
 80020ba:	3001      	adds	r0, #1
 80020bc:	d01e      	beq.n	80020fc <_printf_common+0xa4>
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	6922      	ldr	r2, [r4, #16]
 80020c2:	f003 0306 	and.w	r3, r3, #6
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf02      	ittt	eq
 80020ca:	68e5      	ldreq	r5, [r4, #12]
 80020cc:	6833      	ldreq	r3, [r6, #0]
 80020ce:	1aed      	subeq	r5, r5, r3
 80020d0:	68a3      	ldr	r3, [r4, #8]
 80020d2:	bf0c      	ite	eq
 80020d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020d8:	2500      	movne	r5, #0
 80020da:	4293      	cmp	r3, r2
 80020dc:	bfc4      	itt	gt
 80020de:	1a9b      	subgt	r3, r3, r2
 80020e0:	18ed      	addgt	r5, r5, r3
 80020e2:	2600      	movs	r6, #0
 80020e4:	341a      	adds	r4, #26
 80020e6:	42b5      	cmp	r5, r6
 80020e8:	d11a      	bne.n	8002120 <_printf_common+0xc8>
 80020ea:	2000      	movs	r0, #0
 80020ec:	e008      	b.n	8002100 <_printf_common+0xa8>
 80020ee:	2301      	movs	r3, #1
 80020f0:	4652      	mov	r2, sl
 80020f2:	4641      	mov	r1, r8
 80020f4:	4638      	mov	r0, r7
 80020f6:	47c8      	blx	r9
 80020f8:	3001      	adds	r0, #1
 80020fa:	d103      	bne.n	8002104 <_printf_common+0xac>
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002104:	3501      	adds	r5, #1
 8002106:	e7c6      	b.n	8002096 <_printf_common+0x3e>
 8002108:	18e1      	adds	r1, r4, r3
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	2030      	movs	r0, #48	@ 0x30
 800210e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002112:	4422      	add	r2, r4
 8002114:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002118:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800211c:	3302      	adds	r3, #2
 800211e:	e7c7      	b.n	80020b0 <_printf_common+0x58>
 8002120:	2301      	movs	r3, #1
 8002122:	4622      	mov	r2, r4
 8002124:	4641      	mov	r1, r8
 8002126:	4638      	mov	r0, r7
 8002128:	47c8      	blx	r9
 800212a:	3001      	adds	r0, #1
 800212c:	d0e6      	beq.n	80020fc <_printf_common+0xa4>
 800212e:	3601      	adds	r6, #1
 8002130:	e7d9      	b.n	80020e6 <_printf_common+0x8e>
	...

08002134 <_printf_i>:
 8002134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002138:	7e0f      	ldrb	r7, [r1, #24]
 800213a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800213c:	2f78      	cmp	r7, #120	@ 0x78
 800213e:	4691      	mov	r9, r2
 8002140:	4680      	mov	r8, r0
 8002142:	460c      	mov	r4, r1
 8002144:	469a      	mov	sl, r3
 8002146:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800214a:	d807      	bhi.n	800215c <_printf_i+0x28>
 800214c:	2f62      	cmp	r7, #98	@ 0x62
 800214e:	d80a      	bhi.n	8002166 <_printf_i+0x32>
 8002150:	2f00      	cmp	r7, #0
 8002152:	f000 80d2 	beq.w	80022fa <_printf_i+0x1c6>
 8002156:	2f58      	cmp	r7, #88	@ 0x58
 8002158:	f000 80b9 	beq.w	80022ce <_printf_i+0x19a>
 800215c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002160:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002164:	e03a      	b.n	80021dc <_printf_i+0xa8>
 8002166:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800216a:	2b15      	cmp	r3, #21
 800216c:	d8f6      	bhi.n	800215c <_printf_i+0x28>
 800216e:	a101      	add	r1, pc, #4	@ (adr r1, 8002174 <_printf_i+0x40>)
 8002170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002174:	080021cd 	.word	0x080021cd
 8002178:	080021e1 	.word	0x080021e1
 800217c:	0800215d 	.word	0x0800215d
 8002180:	0800215d 	.word	0x0800215d
 8002184:	0800215d 	.word	0x0800215d
 8002188:	0800215d 	.word	0x0800215d
 800218c:	080021e1 	.word	0x080021e1
 8002190:	0800215d 	.word	0x0800215d
 8002194:	0800215d 	.word	0x0800215d
 8002198:	0800215d 	.word	0x0800215d
 800219c:	0800215d 	.word	0x0800215d
 80021a0:	080022e1 	.word	0x080022e1
 80021a4:	0800220b 	.word	0x0800220b
 80021a8:	0800229b 	.word	0x0800229b
 80021ac:	0800215d 	.word	0x0800215d
 80021b0:	0800215d 	.word	0x0800215d
 80021b4:	08002303 	.word	0x08002303
 80021b8:	0800215d 	.word	0x0800215d
 80021bc:	0800220b 	.word	0x0800220b
 80021c0:	0800215d 	.word	0x0800215d
 80021c4:	0800215d 	.word	0x0800215d
 80021c8:	080022a3 	.word	0x080022a3
 80021cc:	6833      	ldr	r3, [r6, #0]
 80021ce:	1d1a      	adds	r2, r3, #4
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6032      	str	r2, [r6, #0]
 80021d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80021dc:	2301      	movs	r3, #1
 80021de:	e09d      	b.n	800231c <_printf_i+0x1e8>
 80021e0:	6833      	ldr	r3, [r6, #0]
 80021e2:	6820      	ldr	r0, [r4, #0]
 80021e4:	1d19      	adds	r1, r3, #4
 80021e6:	6031      	str	r1, [r6, #0]
 80021e8:	0606      	lsls	r6, r0, #24
 80021ea:	d501      	bpl.n	80021f0 <_printf_i+0xbc>
 80021ec:	681d      	ldr	r5, [r3, #0]
 80021ee:	e003      	b.n	80021f8 <_printf_i+0xc4>
 80021f0:	0645      	lsls	r5, r0, #25
 80021f2:	d5fb      	bpl.n	80021ec <_printf_i+0xb8>
 80021f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80021f8:	2d00      	cmp	r5, #0
 80021fa:	da03      	bge.n	8002204 <_printf_i+0xd0>
 80021fc:	232d      	movs	r3, #45	@ 0x2d
 80021fe:	426d      	negs	r5, r5
 8002200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002204:	4859      	ldr	r0, [pc, #356]	@ (800236c <_printf_i+0x238>)
 8002206:	230a      	movs	r3, #10
 8002208:	e011      	b.n	800222e <_printf_i+0xfa>
 800220a:	6821      	ldr	r1, [r4, #0]
 800220c:	6833      	ldr	r3, [r6, #0]
 800220e:	0608      	lsls	r0, r1, #24
 8002210:	f853 5b04 	ldr.w	r5, [r3], #4
 8002214:	d402      	bmi.n	800221c <_printf_i+0xe8>
 8002216:	0649      	lsls	r1, r1, #25
 8002218:	bf48      	it	mi
 800221a:	b2ad      	uxthmi	r5, r5
 800221c:	2f6f      	cmp	r7, #111	@ 0x6f
 800221e:	4853      	ldr	r0, [pc, #332]	@ (800236c <_printf_i+0x238>)
 8002220:	6033      	str	r3, [r6, #0]
 8002222:	bf14      	ite	ne
 8002224:	230a      	movne	r3, #10
 8002226:	2308      	moveq	r3, #8
 8002228:	2100      	movs	r1, #0
 800222a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800222e:	6866      	ldr	r6, [r4, #4]
 8002230:	60a6      	str	r6, [r4, #8]
 8002232:	2e00      	cmp	r6, #0
 8002234:	bfa2      	ittt	ge
 8002236:	6821      	ldrge	r1, [r4, #0]
 8002238:	f021 0104 	bicge.w	r1, r1, #4
 800223c:	6021      	strge	r1, [r4, #0]
 800223e:	b90d      	cbnz	r5, 8002244 <_printf_i+0x110>
 8002240:	2e00      	cmp	r6, #0
 8002242:	d04b      	beq.n	80022dc <_printf_i+0x1a8>
 8002244:	4616      	mov	r6, r2
 8002246:	fbb5 f1f3 	udiv	r1, r5, r3
 800224a:	fb03 5711 	mls	r7, r3, r1, r5
 800224e:	5dc7      	ldrb	r7, [r0, r7]
 8002250:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002254:	462f      	mov	r7, r5
 8002256:	42bb      	cmp	r3, r7
 8002258:	460d      	mov	r5, r1
 800225a:	d9f4      	bls.n	8002246 <_printf_i+0x112>
 800225c:	2b08      	cmp	r3, #8
 800225e:	d10b      	bne.n	8002278 <_printf_i+0x144>
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	07df      	lsls	r7, r3, #31
 8002264:	d508      	bpl.n	8002278 <_printf_i+0x144>
 8002266:	6923      	ldr	r3, [r4, #16]
 8002268:	6861      	ldr	r1, [r4, #4]
 800226a:	4299      	cmp	r1, r3
 800226c:	bfde      	ittt	le
 800226e:	2330      	movle	r3, #48	@ 0x30
 8002270:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002274:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002278:	1b92      	subs	r2, r2, r6
 800227a:	6122      	str	r2, [r4, #16]
 800227c:	f8cd a000 	str.w	sl, [sp]
 8002280:	464b      	mov	r3, r9
 8002282:	aa03      	add	r2, sp, #12
 8002284:	4621      	mov	r1, r4
 8002286:	4640      	mov	r0, r8
 8002288:	f7ff fee6 	bl	8002058 <_printf_common>
 800228c:	3001      	adds	r0, #1
 800228e:	d14a      	bne.n	8002326 <_printf_i+0x1f2>
 8002290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002294:	b004      	add	sp, #16
 8002296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	f043 0320 	orr.w	r3, r3, #32
 80022a0:	6023      	str	r3, [r4, #0]
 80022a2:	4833      	ldr	r0, [pc, #204]	@ (8002370 <_printf_i+0x23c>)
 80022a4:	2778      	movs	r7, #120	@ 0x78
 80022a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	6831      	ldr	r1, [r6, #0]
 80022ae:	061f      	lsls	r7, r3, #24
 80022b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80022b4:	d402      	bmi.n	80022bc <_printf_i+0x188>
 80022b6:	065f      	lsls	r7, r3, #25
 80022b8:	bf48      	it	mi
 80022ba:	b2ad      	uxthmi	r5, r5
 80022bc:	6031      	str	r1, [r6, #0]
 80022be:	07d9      	lsls	r1, r3, #31
 80022c0:	bf44      	itt	mi
 80022c2:	f043 0320 	orrmi.w	r3, r3, #32
 80022c6:	6023      	strmi	r3, [r4, #0]
 80022c8:	b11d      	cbz	r5, 80022d2 <_printf_i+0x19e>
 80022ca:	2310      	movs	r3, #16
 80022cc:	e7ac      	b.n	8002228 <_printf_i+0xf4>
 80022ce:	4827      	ldr	r0, [pc, #156]	@ (800236c <_printf_i+0x238>)
 80022d0:	e7e9      	b.n	80022a6 <_printf_i+0x172>
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	f023 0320 	bic.w	r3, r3, #32
 80022d8:	6023      	str	r3, [r4, #0]
 80022da:	e7f6      	b.n	80022ca <_printf_i+0x196>
 80022dc:	4616      	mov	r6, r2
 80022de:	e7bd      	b.n	800225c <_printf_i+0x128>
 80022e0:	6833      	ldr	r3, [r6, #0]
 80022e2:	6825      	ldr	r5, [r4, #0]
 80022e4:	6961      	ldr	r1, [r4, #20]
 80022e6:	1d18      	adds	r0, r3, #4
 80022e8:	6030      	str	r0, [r6, #0]
 80022ea:	062e      	lsls	r6, r5, #24
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	d501      	bpl.n	80022f4 <_printf_i+0x1c0>
 80022f0:	6019      	str	r1, [r3, #0]
 80022f2:	e002      	b.n	80022fa <_printf_i+0x1c6>
 80022f4:	0668      	lsls	r0, r5, #25
 80022f6:	d5fb      	bpl.n	80022f0 <_printf_i+0x1bc>
 80022f8:	8019      	strh	r1, [r3, #0]
 80022fa:	2300      	movs	r3, #0
 80022fc:	6123      	str	r3, [r4, #16]
 80022fe:	4616      	mov	r6, r2
 8002300:	e7bc      	b.n	800227c <_printf_i+0x148>
 8002302:	6833      	ldr	r3, [r6, #0]
 8002304:	1d1a      	adds	r2, r3, #4
 8002306:	6032      	str	r2, [r6, #0]
 8002308:	681e      	ldr	r6, [r3, #0]
 800230a:	6862      	ldr	r2, [r4, #4]
 800230c:	2100      	movs	r1, #0
 800230e:	4630      	mov	r0, r6
 8002310:	f7fd ff6e 	bl	80001f0 <memchr>
 8002314:	b108      	cbz	r0, 800231a <_printf_i+0x1e6>
 8002316:	1b80      	subs	r0, r0, r6
 8002318:	6060      	str	r0, [r4, #4]
 800231a:	6863      	ldr	r3, [r4, #4]
 800231c:	6123      	str	r3, [r4, #16]
 800231e:	2300      	movs	r3, #0
 8002320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002324:	e7aa      	b.n	800227c <_printf_i+0x148>
 8002326:	6923      	ldr	r3, [r4, #16]
 8002328:	4632      	mov	r2, r6
 800232a:	4649      	mov	r1, r9
 800232c:	4640      	mov	r0, r8
 800232e:	47d0      	blx	sl
 8002330:	3001      	adds	r0, #1
 8002332:	d0ad      	beq.n	8002290 <_printf_i+0x15c>
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	079b      	lsls	r3, r3, #30
 8002338:	d413      	bmi.n	8002362 <_printf_i+0x22e>
 800233a:	68e0      	ldr	r0, [r4, #12]
 800233c:	9b03      	ldr	r3, [sp, #12]
 800233e:	4298      	cmp	r0, r3
 8002340:	bfb8      	it	lt
 8002342:	4618      	movlt	r0, r3
 8002344:	e7a6      	b.n	8002294 <_printf_i+0x160>
 8002346:	2301      	movs	r3, #1
 8002348:	4632      	mov	r2, r6
 800234a:	4649      	mov	r1, r9
 800234c:	4640      	mov	r0, r8
 800234e:	47d0      	blx	sl
 8002350:	3001      	adds	r0, #1
 8002352:	d09d      	beq.n	8002290 <_printf_i+0x15c>
 8002354:	3501      	adds	r5, #1
 8002356:	68e3      	ldr	r3, [r4, #12]
 8002358:	9903      	ldr	r1, [sp, #12]
 800235a:	1a5b      	subs	r3, r3, r1
 800235c:	42ab      	cmp	r3, r5
 800235e:	dcf2      	bgt.n	8002346 <_printf_i+0x212>
 8002360:	e7eb      	b.n	800233a <_printf_i+0x206>
 8002362:	2500      	movs	r5, #0
 8002364:	f104 0619 	add.w	r6, r4, #25
 8002368:	e7f5      	b.n	8002356 <_printf_i+0x222>
 800236a:	bf00      	nop
 800236c:	080024fd 	.word	0x080024fd
 8002370:	0800250e 	.word	0x0800250e

08002374 <_realloc_r>:
 8002374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002378:	4680      	mov	r8, r0
 800237a:	4615      	mov	r5, r2
 800237c:	460c      	mov	r4, r1
 800237e:	b921      	cbnz	r1, 800238a <_realloc_r+0x16>
 8002380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002384:	4611      	mov	r1, r2
 8002386:	f7ff bbd5 	b.w	8001b34 <_malloc_r>
 800238a:	b92a      	cbnz	r2, 8002398 <_realloc_r+0x24>
 800238c:	f7ff fcc2 	bl	8001d14 <_free_r>
 8002390:	2400      	movs	r4, #0
 8002392:	4620      	mov	r0, r4
 8002394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002398:	f000 f842 	bl	8002420 <_malloc_usable_size_r>
 800239c:	4285      	cmp	r5, r0
 800239e:	4606      	mov	r6, r0
 80023a0:	d802      	bhi.n	80023a8 <_realloc_r+0x34>
 80023a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80023a6:	d8f4      	bhi.n	8002392 <_realloc_r+0x1e>
 80023a8:	4629      	mov	r1, r5
 80023aa:	4640      	mov	r0, r8
 80023ac:	f7ff fbc2 	bl	8001b34 <_malloc_r>
 80023b0:	4607      	mov	r7, r0
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d0ec      	beq.n	8002390 <_realloc_r+0x1c>
 80023b6:	42b5      	cmp	r5, r6
 80023b8:	462a      	mov	r2, r5
 80023ba:	4621      	mov	r1, r4
 80023bc:	bf28      	it	cs
 80023be:	4632      	movcs	r2, r6
 80023c0:	f000 f820 	bl	8002404 <memcpy>
 80023c4:	4621      	mov	r1, r4
 80023c6:	4640      	mov	r0, r8
 80023c8:	f7ff fca4 	bl	8001d14 <_free_r>
 80023cc:	463c      	mov	r4, r7
 80023ce:	e7e0      	b.n	8002392 <_realloc_r+0x1e>

080023d0 <memmove>:
 80023d0:	4288      	cmp	r0, r1
 80023d2:	b510      	push	{r4, lr}
 80023d4:	eb01 0402 	add.w	r4, r1, r2
 80023d8:	d902      	bls.n	80023e0 <memmove+0x10>
 80023da:	4284      	cmp	r4, r0
 80023dc:	4623      	mov	r3, r4
 80023de:	d807      	bhi.n	80023f0 <memmove+0x20>
 80023e0:	1e43      	subs	r3, r0, #1
 80023e2:	42a1      	cmp	r1, r4
 80023e4:	d008      	beq.n	80023f8 <memmove+0x28>
 80023e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80023ee:	e7f8      	b.n	80023e2 <memmove+0x12>
 80023f0:	4402      	add	r2, r0
 80023f2:	4601      	mov	r1, r0
 80023f4:	428a      	cmp	r2, r1
 80023f6:	d100      	bne.n	80023fa <memmove+0x2a>
 80023f8:	bd10      	pop	{r4, pc}
 80023fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80023fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002402:	e7f7      	b.n	80023f4 <memmove+0x24>

08002404 <memcpy>:
 8002404:	440a      	add	r2, r1
 8002406:	4291      	cmp	r1, r2
 8002408:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800240c:	d100      	bne.n	8002410 <memcpy+0xc>
 800240e:	4770      	bx	lr
 8002410:	b510      	push	{r4, lr}
 8002412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800241a:	4291      	cmp	r1, r2
 800241c:	d1f9      	bne.n	8002412 <memcpy+0xe>
 800241e:	bd10      	pop	{r4, pc}

08002420 <_malloc_usable_size_r>:
 8002420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002424:	1f18      	subs	r0, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	bfbc      	itt	lt
 800242a:	580b      	ldrlt	r3, [r1, r0]
 800242c:	18c0      	addlt	r0, r0, r3
 800242e:	4770      	bx	lr

08002430 <_init>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	bf00      	nop
 8002434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002436:	bc08      	pop	{r3}
 8002438:	469e      	mov	lr, r3
 800243a:	4770      	bx	lr

0800243c <_fini>:
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243e:	bf00      	nop
 8002440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002442:	bc08      	pop	{r3}
 8002444:	469e      	mov	lr, r3
 8002446:	4770      	bx	lr
