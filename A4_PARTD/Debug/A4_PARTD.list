
A4_PARTD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001760  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800190c  0800190c  0000290c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001950  08001950  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001950  08001950  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001950  08001950  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001950  08001950  00002950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001954  08001954  00002954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001958  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001964  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001964  00003030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004fe2  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001157  00000000  00000000  0000801e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  00009178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000453  00000000  00000000  00009768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e97  00000000  00000000  00009bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e21  00000000  00000000  00031a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f21b9  00000000  00000000  00037873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129a2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015e8  00000000  00000000  00129a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0012b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080018f4 	.word	0x080018f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080018f4 	.word	0x080018f4

080001ec <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80001f4:	4b11      	ldr	r3, [pc, #68]	@ (800023c <delay_us+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a11      	ldr	r2, [pc, #68]	@ (8000240 <delay_us+0x54>)
 80001fa:	fba2 2303 	umull	r2, r3, r2, r3
 80001fe:	0c9b      	lsrs	r3, r3, #18
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	fb02 f303 	mul.w	r3, r2, r3
 8000206:	4a0f      	ldr	r2, [pc, #60]	@ (8000244 <delay_us+0x58>)
 8000208:	3b01      	subs	r3, #1
 800020a:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 800020c:	4b0d      	ldr	r3, [pc, #52]	@ (8000244 <delay_us+0x58>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 8000212:	4b0c      	ldr	r3, [pc, #48]	@ (8000244 <delay_us+0x58>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a0b      	ldr	r2, [pc, #44]	@ (8000244 <delay_us+0x58>)
 8000218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800021c:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 800021e:	bf00      	nop
 8000220:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <delay_us+0x58>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <delay_us+0x34>
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000000 	.word	0x20000000
 8000240:	431bde83 	.word	0x431bde83
 8000244:	e000e010 	.word	0xe000e010

08000248 <Lcd_pulse_ENA>:


void Lcd_pulse_ENA( void )  {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
// ENAble line sends command on falling edge
// set to restore default then clear to trigger
   LCD_PORT->ODR   |= ( LCD_EN );         	// ENABLE = HI
 800024c:	4b09      	ldr	r3, [pc, #36]	@ (8000274 <Lcd_pulse_ENA+0x2c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a08      	ldr	r2, [pc, #32]	@ (8000274 <Lcd_pulse_ENA+0x2c>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6153      	str	r3, [r2, #20]
   delay_us( DELAY );                         // TDDR > 320 ns
 8000258:	2032      	movs	r0, #50	@ 0x32
 800025a:	f7ff ffc7 	bl	80001ec <delay_us>
   LCD_PORT->ODR   &= ~( LCD_EN );        // ENABLE = LOW
 800025e:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <Lcd_pulse_ENA+0x2c>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	4a04      	ldr	r2, [pc, #16]	@ (8000274 <Lcd_pulse_ENA+0x2c>)
 8000264:	f023 0302 	bic.w	r3, r3, #2
 8000268:	6153      	str	r3, [r2, #20]
   delay_us( DELAY );                         // low values flakey, see A3:p.1
 800026a:	2032      	movs	r0, #50	@ 0x32
 800026c:	f7ff ffbe 	bl	80001ec <delay_us>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	48000c00 	.word	0x48000c00

08000278 <Lcd_4b_command>:

void Lcd_4b_command( uint8_t command )  {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
// LCD command using high nibble only - used for 'wake-up' 0x30 commands
   LCD_PORT->ODR   &= ~( LCD_DATA_BITS ); 	// clear DATA bits
 8000282:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <Lcd_4b_command+0x3c>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a0b      	ldr	r2, [pc, #44]	@ (80002b4 <Lcd_4b_command+0x3c>)
 8000288:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 800028c:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( command >> 4 ) << 3;   // DATA = command
 800028e:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <Lcd_4b_command+0x3c>)
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	091b      	lsrs	r3, r3, #4
 8000296:	b2db      	uxtb	r3, r3
 8000298:	00db      	lsls	r3, r3, #3
 800029a:	4906      	ldr	r1, [pc, #24]	@ (80002b4 <Lcd_4b_command+0x3c>)
 800029c:	4313      	orrs	r3, r2
 800029e:	614b      	str	r3, [r1, #20]
   delay_us( DELAY );
 80002a0:	2032      	movs	r0, #50	@ 0x32
 80002a2:	f7ff ffa3 	bl	80001ec <delay_us>
   Lcd_pulse_ENA( );
 80002a6:	f7ff ffcf 	bl	8000248 <Lcd_pulse_ENA>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	48000c00 	.word	0x48000c00

080002b8 <Lcd_command>:

void Lcd_command( uint8_t command )  {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
// send command to LCD in 4-bit instruction mode
// HIGH nibble then LOW nibble, timing sensitive
   LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 80002c2:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <Lcd_command+0x68>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a16      	ldr	r2, [pc, #88]	@ (8000320 <Lcd_command+0x68>)
 80002c8:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 80002cc:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( (command>>4)<<3 & LCD_DATA_BITS ); // HIGH shifted low
 80002ce:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <Lcd_command+0x68>)
 80002d0:	695a      	ldr	r2, [r3, #20]
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	091b      	lsrs	r3, r3, #4
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	00db      	lsls	r3, r3, #3
 80002da:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80002de:	4910      	ldr	r1, [pc, #64]	@ (8000320 <Lcd_command+0x68>)
 80002e0:	4313      	orrs	r3, r2
 80002e2:	614b      	str	r3, [r1, #20]
   delay_us( DELAY );
 80002e4:	2032      	movs	r0, #50	@ 0x32
 80002e6:	f7ff ff81 	bl	80001ec <delay_us>
   Lcd_pulse_ENA( );                                    // latch HIGH NIBBLE
 80002ea:	f7ff ffad 	bl	8000248 <Lcd_pulse_ENA>

   LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <Lcd_command+0x68>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000320 <Lcd_command+0x68>)
 80002f4:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 80002f8:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( command<<3 & LCD_DATA_BITS );      // LOW nibble
 80002fa:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <Lcd_command+0x68>)
 80002fc:	695a      	ldr	r2, [r3, #20]
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8000306:	4906      	ldr	r1, [pc, #24]	@ (8000320 <Lcd_command+0x68>)
 8000308:	4313      	orrs	r3, r2
 800030a:	614b      	str	r3, [r1, #20]
   delay_us( DELAY );
 800030c:	2032      	movs	r0, #50	@ 0x32
 800030e:	f7ff ff6d 	bl	80001ec <delay_us>
   Lcd_pulse_ENA( );                                    // latch LOW NIBBLE
 8000312:	f7ff ff99 	bl	8000248 <Lcd_pulse_ENA>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	48000c00 	.word	0x48000c00

08000324 <Lcd_write_char>:

void Lcd_write_char( uint8_t letter )  {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
// calls LCD_command() w/char data; assumes all ctrl bits set LO in LCD_init()
   LCD_PORT->ODR   |= (LCD_RS);       // RS = HI for data to address
 800032e:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <Lcd_write_char+0x38>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a0a      	ldr	r2, [pc, #40]	@ (800035c <Lcd_write_char+0x38>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6153      	str	r3, [r2, #20]
   delay_us( DELAY );
 800033a:	2032      	movs	r0, #50	@ 0x32
 800033c:	f7ff ff56 	bl	80001ec <delay_us>
   Lcd_command( letter );             // character to print
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ffb8 	bl	80002b8 <Lcd_command>
   LCD_PORT->ODR   &= ~(LCD_RS);      // RS = LO
 8000348:	4b04      	ldr	r3, [pc, #16]	@ (800035c <Lcd_write_char+0x38>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a03      	ldr	r2, [pc, #12]	@ (800035c <Lcd_write_char+0x38>)
 800034e:	f023 0304 	bic.w	r3, r3, #4
 8000352:	6153      	str	r3, [r2, #20]
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	48000c00 	.word	0x48000c00

08000360 <Lcd_write_string>:


void Lcd_write_string( char *text , uint8_t row){
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
 * row accepts either a 0 for first row or 1 for the second row
 *
 *
 */

	if (row == 0){
 800036c:	78fb      	ldrb	r3, [r7, #3]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d103      	bne.n	800037a <Lcd_write_string+0x1a>
		Lcd_command(0x80); // Position cursor at row 1
 8000372:	2080      	movs	r0, #128	@ 0x80
 8000374:	f7ff ffa0 	bl	80002b8 <Lcd_command>
 8000378:	e002      	b.n	8000380 <Lcd_write_string+0x20>
	}
	else {
		Lcd_command(0xC0); //Position cursor at row 2
 800037a:	20c0      	movs	r0, #192	@ 0xc0
 800037c:	f7ff ff9c 	bl	80002b8 <Lcd_command>
	}
	for (int idx = 0; idx < 17; idx++){
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	e013      	b.n	80003ae <Lcd_write_string+0x4e>
		//If end of string
		if (text[idx] == '\0'){
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	4413      	add	r3, r2
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d103      	bne.n	800039a <Lcd_write_string+0x3a>
			// Fill spaces on anything thats not in the string
			Lcd_write_char(' ');
 8000392:	2020      	movs	r0, #32
 8000394:	f7ff ffc6 	bl	8000324 <Lcd_write_char>
 8000398:	e006      	b.n	80003a8 <Lcd_write_string+0x48>
		}
		else{
			// Otherwise write the character in the string
			Lcd_write_char(text[idx]);
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	4413      	add	r3, r2
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ffbe 	bl	8000324 <Lcd_write_char>
	for (int idx = 0; idx < 17; idx++){
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3301      	adds	r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b10      	cmp	r3, #16
 80003b2:	dde8      	ble.n	8000386 <Lcd_write_string+0x26>
		}
	}
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <Lcd_backlight_on>:

void Lcd_backlight_on(void){
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	// Enable backlight on the LCD
	 LCD_PORT->ODR |= LCD_BL;
 80003c4:	4b05      	ldr	r3, [pc, #20]	@ (80003dc <Lcd_backlight_on+0x1c>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a04      	ldr	r2, [pc, #16]	@ (80003dc <Lcd_backlight_on+0x1c>)
 80003ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ce:	6153      	str	r3, [r2, #20]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	48000c00 	.word	0x48000c00

080003e0 <Lcd_backlight_off>:

void Lcd_backlight_off(void){
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	// Disable backlight on the LCD
	 LCD_PORT->ODR &= ~LCD_BL;
 80003e4:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <Lcd_backlight_off+0x1c>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a04      	ldr	r2, [pc, #16]	@ (80003fc <Lcd_backlight_off+0x1c>)
 80003ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003ee:	6153      	str	r3, [r2, #20]
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	48000c00 	.word	0x48000c00

08000400 <Lcd_Init>:

// Enable GPIO pins and initialize the LCD display
void Lcd_Init(void){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
	// configure GPIO pins PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7 for:
	// output mode, push-pull, no pull up or pull down, high speed
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIODEN);
 8000406:	4b39      	ldr	r3, [pc, #228]	@ (80004ec <Lcd_Init+0xec>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040a:	4a38      	ldr	r2, [pc, #224]	@ (80004ec <Lcd_Init+0xec>)
 800040c:	f043 0308 	orr.w	r3, r3, #8
 8000410:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOD->MODER   &= ~(GPIO_MODER_MODE0
 8000412:	4b37      	ldr	r3, [pc, #220]	@ (80004f0 <Lcd_Init+0xf0>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a36      	ldr	r2, [pc, #216]	@ (80004f0 <Lcd_Init+0xf0>)
 8000418:	0c1b      	lsrs	r3, r3, #16
 800041a:	041b      	lsls	r3, r3, #16
 800041c:	6013      	str	r3, [r2, #0]
							| GPIO_MODER_MODE4
							| GPIO_MODER_MODE5
							| GPIO_MODER_MODE6
							| GPIO_MODER_MODE7);

	GPIOD->MODER   |=  (GPIO_MODER_MODE0_0
 800041e:	4b34      	ldr	r3, [pc, #208]	@ (80004f0 <Lcd_Init+0xf0>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a33      	ldr	r2, [pc, #204]	@ (80004f0 <Lcd_Init+0xf0>)
 8000424:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000428:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 800042c:	6013      	str	r3, [r2, #0]
							| GPIO_MODER_MODE4_0
							| GPIO_MODER_MODE5_0
							| GPIO_MODER_MODE6_0
							| GPIO_MODER_MODE7_0);

	GPIOD->OTYPER  &= ~(GPIO_OTYPER_OT0
 800042e:	4b30      	ldr	r3, [pc, #192]	@ (80004f0 <Lcd_Init+0xf0>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	4a2f      	ldr	r2, [pc, #188]	@ (80004f0 <Lcd_Init+0xf0>)
 8000434:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000438:	6053      	str	r3, [r2, #4]
							| GPIO_OTYPER_OT4
							| GPIO_OTYPER_OT5
							| GPIO_OTYPER_OT6
							| GPIO_OTYPER_OT7);

	GPIOD->PUPDR   &= ~(GPIO_PUPDR_PUPD0
 800043a:	4b2d      	ldr	r3, [pc, #180]	@ (80004f0 <Lcd_Init+0xf0>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	4a2c      	ldr	r2, [pc, #176]	@ (80004f0 <Lcd_Init+0xf0>)
 8000440:	0c1b      	lsrs	r3, r3, #16
 8000442:	041b      	lsls	r3, r3, #16
 8000444:	60d3      	str	r3, [r2, #12]
							| GPIO_PUPDR_PUPD4
							| GPIO_PUPDR_PUPD5
							| GPIO_PUPDR_PUPD6
							| GPIO_PUPDR_PUPD7);

	GPIOD->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 8000446:	4b2a      	ldr	r3, [pc, #168]	@ (80004f0 <Lcd_Init+0xf0>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	4a29      	ldr	r2, [pc, #164]	@ (80004f0 <Lcd_Init+0xf0>)
 800044c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8000450:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8000454:	6093      	str	r3, [r2, #8]
							  (3 << GPIO_OSPEEDR_OSPEED5_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED6_Pos) |
							  (3 << GPIO_OSPEEDR_OSPEED7_Pos) );

	 // preset PC0 thru PC7 to 0
	GPIOD->BRR |= (GPIO_PIN_0
 8000456:	4b26      	ldr	r3, [pc, #152]	@ (80004f0 <Lcd_Init+0xf0>)
 8000458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800045a:	4a25      	ldr	r2, [pc, #148]	@ (80004f0 <Lcd_Init+0xf0>)
 800045c:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 8000460:	6293      	str	r3, [r2, #40]	@ 0x28
					 | GPIO_PIN_5
					 | GPIO_PIN_6
					 | GPIO_PIN_7);

	//Turn on Backlight
	GPIOD->BSRR |= GPIO_PIN_7;
 8000462:	4b23      	ldr	r3, [pc, #140]	@ (80004f0 <Lcd_Init+0xf0>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a22      	ldr	r2, [pc, #136]	@ (80004f0 <Lcd_Init+0xf0>)
 8000468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800046c:	6193      	str	r3, [r2, #24]



   delay_us( 40000 );                     // power-up wait 40 ms
 800046e:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8000472:	f7ff febb 	bl	80001ec <delay_us>
   for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 8000476:	2300      	movs	r3, #0
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	e008      	b.n	800048e <Lcd_Init+0x8e>
      Lcd_4b_command( 0x30 );             // HI 4b of 8b cmd, low nibble = X
 800047c:	2030      	movs	r0, #48	@ 0x30
 800047e:	f7ff fefb 	bl	8000278 <Lcd_4b_command>
      delay_us( 200 );
 8000482:	20c8      	movs	r0, #200	@ 0xc8
 8000484:	f7ff feb2 	bl	80001ec <delay_us>
   for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3301      	adds	r3, #1
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2b02      	cmp	r3, #2
 8000492:	ddf3      	ble.n	800047c <Lcd_Init+0x7c>
   }
   Lcd_4b_command( 0x20 ); // fcn set #4: 4b cmd set 4b mode - next 0x28:2-line
 8000494:	2020      	movs	r0, #32
 8000496:	f7ff feef 	bl	8000278 <Lcd_4b_command>
   delay_us( 40 );         // remainder of LCD init removed - see LCD datasheets
 800049a:	2028      	movs	r0, #40	@ 0x28
 800049c:	f7ff fea6 	bl	80001ec <delay_us>


   Lcd_command( 0x28 );
 80004a0:	2028      	movs	r0, #40	@ 0x28
 80004a2:	f7ff ff09 	bl	80002b8 <Lcd_command>
   delay_us( 40 );
 80004a6:	2028      	movs	r0, #40	@ 0x28
 80004a8:	f7ff fea0 	bl	80001ec <delay_us>
   Lcd_command( 0x10 ); //Set cursor
 80004ac:	2010      	movs	r0, #16
 80004ae:	f7ff ff03 	bl	80002b8 <Lcd_command>
   delay_us( 40 );
 80004b2:	2028      	movs	r0, #40	@ 0x28
 80004b4:	f7ff fe9a 	bl	80001ec <delay_us>
   Lcd_command( 0x0D ); //Display ON; Blinking cursor
 80004b8:	200d      	movs	r0, #13
 80004ba:	f7ff fefd 	bl	80002b8 <Lcd_command>
   delay_us( 40 );
 80004be:	2028      	movs	r0, #40	@ 0x28
 80004c0:	f7ff fe94 	bl	80001ec <delay_us>
   Lcd_command( 0x06 ); //Entry mode set
 80004c4:	2006      	movs	r0, #6
 80004c6:	f7ff fef7 	bl	80002b8 <Lcd_command>
   delay_us( 40 );
 80004ca:	2028      	movs	r0, #40	@ 0x28
 80004cc:	f7ff fe8e 	bl	80001ec <delay_us>

   Lcd_backlight_on();
 80004d0:	f7ff ff76 	bl	80003c0 <Lcd_backlight_on>
   Lcd_write_string(" " , 0);
 80004d4:	2100      	movs	r1, #0
 80004d6:	4807      	ldr	r0, [pc, #28]	@ (80004f4 <Lcd_Init+0xf4>)
 80004d8:	f7ff ff42 	bl	8000360 <Lcd_write_string>
   Lcd_write_string(" " , 1);
 80004dc:	2101      	movs	r1, #1
 80004de:	4805      	ldr	r0, [pc, #20]	@ (80004f4 <Lcd_Init+0xf4>)
 80004e0:	f7ff ff3e 	bl	8000360 <Lcd_write_string>

}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40021000 	.word	0x40021000
 80004f0:	48000c00 	.word	0x48000c00
 80004f4:	0800190c 	.word	0x0800190c

080004f8 <main>:


void SystemClock_Config(void);

int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80004fe:	b662      	cpsie	i
}
 8000500:	bf00      	nop
  __enable_irq();
  HAL_Init();
 8000502:	f000 fa06 	bl	8000912 <HAL_Init>
  SystemClock_Config();
 8000506:	f000 f925 	bl	8000754 <SystemClock_Config>
  setup_rng();
 800050a:	f000 f887 	bl	800061c <setup_rng>
  setup_gpio();
 800050e:	f000 f8dd 	bl	80006cc <setup_gpio>
  Lcd_Init();
 8000512:	f7ff ff75 	bl	8000400 <Lcd_Init>

  //25 bits at 4MHz is equal to a maximum time delay of 8 seconds
  uint32_t time_delay = get_random_number() >> 32-25;
 8000516:	f000 f899 	bl	800064c <get_random_number>
 800051a:	4603      	mov	r3, r0
 800051c:	09db      	lsrs	r3, r3, #7
 800051e:	607b      	str	r3, [r7, #4]

  setup_TIM2(time_delay);
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 f803 	bl	800052c <setup_TIM2>

  while (1)
 8000526:	bf00      	nop
 8000528:	e7fd      	b.n	8000526 <main+0x2e>
	...

0800052c <setup_TIM2>:
int get_user_button_state(void){
	return (GPIOC->IDR >> 13);
}


void setup_TIM2( int iDutyCycle ) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
   RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;           // enable clock for TIM2
 8000534:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <setup_TIM2+0x74>)
 8000536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000538:	4a19      	ldr	r2, [pc, #100]	@ (80005a0 <setup_TIM2+0x74>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	6593      	str	r3, [r2, #88]	@ 0x58
   TIM2->DIER |= (TIM_DIER_CC1IE | TIM_DIER_UIE);  // enable event gen, rcv CCR1
 8000540:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800054a:	f043 0303 	orr.w	r3, r3, #3
 800054e:	60d3      	str	r3, [r2, #12]
   TIM2->ARR = 0xFFFFFFFF;                             // ARR = T = counts @4MHz
 8000550:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000554:	f04f 32ff 	mov.w	r2, #4294967295
 8000558:	62da      	str	r2, [r3, #44]	@ 0x2c
   TIM2->CCR1 = iDutyCycle;                        // ticks for duty cycle
 800055a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6353      	str	r3, [r2, #52]	@ 0x34
   TIM2->SR &= ~(TIM_SR_CC1IF | TIM_SR_UIF);       // clr IRQ flag in status reg
 8000562:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000566:	691b      	ldr	r3, [r3, #16]
 8000568:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800056c:	f023 0303 	bic.w	r3, r3, #3
 8000570:	6113      	str	r3, [r2, #16]
   NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));     // set NVIC interrupt: 0x1F
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <setup_TIM2+0x78>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a0b      	ldr	r2, [pc, #44]	@ (80005a4 <setup_TIM2+0x78>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800057e:	b662      	cpsie	i
}
 8000580:	bf00      	nop
   __enable_irq();                                 // global IRQ enable
   TIM2->CR1 |= TIM_CR1_CEN;                       // start TIM2 CR1
 8000582:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	e000e100 	.word	0xe000e100

080005a8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
   if (TIM2->SR & TIM_SR_CC1IF) {      // triggered by CCR1 event ...
 80005ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005b0:	691b      	ldr	r3, [r3, #16]
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d012      	beq.n	80005e0 <TIM2_IRQHandler+0x38>
      TIM2->SR &= ~(TIM_SR_CC1IF);     // manage the flag
 80005ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005be:	691b      	ldr	r3, [r3, #16]
 80005c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005c4:	f023 0302 	bic.w	r3, r3, #2
 80005c8:	6113      	str	r3, [r2, #16]
      GPIOB->ODR |= GPIO_PIN_7;                                // <-- manage GPIO pin here
 80005ca:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <TIM2_IRQHandler+0x6c>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a11      	ldr	r2, [pc, #68]	@ (8000614 <TIM2_IRQHandler+0x6c>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d4:	6153      	str	r3, [r2, #20]
      time_of_light_up = TIM2->CNT;
 80005d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <TIM2_IRQHandler+0x70>)
 80005de:	6013      	str	r3, [r2, #0]
   }
   if (TIM2->SR & TIM_SR_UIF) {        // triggered by ARR event ...
 80005e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d00d      	beq.n	800060a <TIM2_IRQHandler+0x62>
      TIM2->SR &= ~(TIM_SR_UIF);       // manage the flag
 80005ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f8:	f023 0301 	bic.w	r3, r3, #1
 80005fc:	6113      	str	r3, [r2, #16]
      GPIOB->ODR &= ~GPIO_PIN_7;                                // <-- manage GPIO pin here
 80005fe:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <TIM2_IRQHandler+0x6c>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <TIM2_IRQHandler+0x6c>)
 8000604:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000608:	6153      	str	r3, [r2, #20]
   }
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	48000400 	.word	0x48000400
 8000618:	20000028 	.word	0x20000028

0800061c <setup_rng>:

// Does what it says in the name
void setup_rng(void){
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <setup_rng+0x28>)
 8000622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000624:	4a07      	ldr	r2, [pc, #28]	@ (8000644 <setup_rng+0x28>)
 8000626:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800062a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RNG->CR |= (RNG_CR_RNGEN | RNG_CR_IE);
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <setup_rng+0x2c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a05      	ldr	r2, [pc, #20]	@ (8000648 <setup_rng+0x2c>)
 8000632:	f043 030c 	orr.w	r3, r3, #12
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	50060800 	.word	0x50060800

0800064c <get_random_number>:

uint32_t get_random_number(void){
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0

	uint32_t random_number;

	//Get error bits of RNG Status Register
	uint8_t ceis_bit_value = ((RNG->SR & RNG_SR_CEIS_Msk) >> RNG_SR_CEIS_Pos);
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <get_random_number+0x54>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	095b      	lsrs	r3, r3, #5
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	70fb      	strb	r3, [r7, #3]
	uint8_t seis_bit_value = ((RNG->SR & RNG_SR_SEIS_Msk) >> RNG_SR_SEIS_Pos);
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <get_random_number+0x54>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	099b      	lsrs	r3, r3, #6
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	70bb      	strb	r3, [r7, #2]

	//and then get data ready bit
	uint8_t data_ready_bit_value = ((RNG->SR & RNG_SR_DRDY_Msk) >> RNG_SR_DRDY_Pos);
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <get_random_number+0x54>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	707b      	strb	r3, [r7, #1]

	//Check the status for no errors
	if ( (ceis_bit_value + seis_bit_value == 0) && (data_ready_bit_value == 1) ) {
 800067a:	78fa      	ldrb	r2, [r7, #3]
 800067c:	78bb      	ldrb	r3, [r7, #2]
 800067e:	4413      	add	r3, r2
 8000680:	2b00      	cmp	r3, #0
 8000682:	d105      	bne.n	8000690 <get_random_number+0x44>
 8000684:	787b      	ldrb	r3, [r7, #1]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d102      	bne.n	8000690 <get_random_number+0x44>
		//Read the RNG data register
		random_number = RNG->DR;
 800068a:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <get_random_number+0x54>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	607b      	str	r3, [r7, #4]
	}
	//Return the number found in the data register
	//If this function returns all 0's, something is wrong with the RNG!
	return(random_number);
 8000690:	687b      	ldr	r3, [r7, #4]
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	50060800 	.word	0x50060800

080006a4 <EXTI15_10_IRQHandler>:
	    // Enable EXTI13 interrupt in NVIC
	    NVIC_SetPriority(EXTI15_10_IRQn, 0); // Set priority (adjust as needed)
	    NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void EXTI15_10_IRQHandler(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    if (EXTI->PR1 & EXTI_PR1_PIF13) {
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <EXTI15_10_IRQHandler+0x24>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d007      	beq.n	80006c4 <EXTI15_10_IRQHandler+0x20>
        // Clear the pending interrupt flag
        EXTI->PR1 |= EXTI_PR1_PIF13;
 80006b4:	4b04      	ldr	r3, [pc, #16]	@ (80006c8 <EXTI15_10_IRQHandler+0x24>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a03      	ldr	r2, [pc, #12]	@ (80006c8 <EXTI15_10_IRQHandler+0x24>)
 80006ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006be:	6153      	str	r3, [r2, #20]
        Lcd_backlight_off();
 80006c0:	f7ff fe8e 	bl	80003e0 <Lcd_backlight_off>
    }
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40010400 	.word	0x40010400

080006cc <setup_gpio>:

void setup_gpio(void){
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
		// configure GPIO pins PC13 for the user button
		// input mode, with pull down
		RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <setup_gpio+0x7c>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000748 <setup_gpio+0x7c>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	64d3      	str	r3, [r2, #76]	@ 0x4c
		GPIOC->MODER   &= ~(GPIO_MODER_MODE13);
 80006dc:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <setup_gpio+0x80>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1a      	ldr	r2, [pc, #104]	@ (800074c <setup_gpio+0x80>)
 80006e2:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80006e6:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR   |= (GPIO_PUPDR_PUPD13_1);
 80006e8:	4b18      	ldr	r3, [pc, #96]	@ (800074c <setup_gpio+0x80>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	4a17      	ldr	r2, [pc, #92]	@ (800074c <setup_gpio+0x80>)
 80006ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80006f2:	60d3      	str	r3, [r2, #12]

		// configure GPIO pins PB7 and PB8 for:
		// output mode, no pull up or down, high speed,
		RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN);
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <setup_gpio+0x7c>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f8:	4a13      	ldr	r2, [pc, #76]	@ (8000748 <setup_gpio+0x7c>)
 80006fa:	f043 0302 	orr.w	r3, r3, #2
 80006fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
		GPIOB->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <setup_gpio+0x84>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <setup_gpio+0x84>)
 8000706:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 800070a:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= (GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0);
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <setup_gpio+0x84>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0f      	ldr	r2, [pc, #60]	@ (8000750 <setup_gpio+0x84>)
 8000712:	f443 33a0 	orr.w	r3, r3, #81920	@ 0x14000
 8000716:	6013      	str	r3, [r2, #0]
		GPIOB->OTYPER  &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <setup_gpio+0x84>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <setup_gpio+0x84>)
 800071e:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8000722:	6053      	str	r3, [r2, #4]
		GPIOB->PUPDR   &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <setup_gpio+0x84>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	4a09      	ldr	r2, [pc, #36]	@ (8000750 <setup_gpio+0x84>)
 800072a:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 800072e:	60d3      	str	r3, [r2, #12]
		GPIOB->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED7_Pos) | (3 << GPIO_OSPEEDR_OSPEED8_Pos));
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <setup_gpio+0x84>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <setup_gpio+0x84>)
 8000736:	f443 3370 	orr.w	r3, r3, #245760	@ 0x3c000
 800073a:	6093      	str	r3, [r2, #8]

}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000
 800074c:	48000800 	.word	0x48000800
 8000750:	48000400 	.word	0x48000400

08000754 <SystemClock_Config>:
    return ch;
}


void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	@ 0x58
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2244      	movs	r2, #68	@ 0x44
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f001 f89a 	bl	800189c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000776:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800077a:	f000 fa33 	bl	8000be4 <HAL_PWREx_ControlVoltageScaling>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000784:	f000 f82f 	bl	80007e6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000788:	2330      	movs	r3, #48	@ 0x30
 800078a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000798:	2360      	movs	r3, #96	@ 0x60
 800079a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fa73 	bl	8000c90 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80007b0:	f000 f819 	bl	80007e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fe78 	bl	80014c4 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007da:	f000 f804 	bl	80007e6 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3758      	adds	r7, #88	@ 0x58
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <Error_Handler>:

void Error_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ea:	b672      	cpsid	i
}
 80007ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ee:	bf00      	nop
 80007f0:	e7fd      	b.n	80007ee <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <HAL_MspInit+0x44>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <HAL_MspInit+0x44>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6613      	str	r3, [r2, #96]	@ 0x60
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <HAL_MspInit+0x44>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <HAL_MspInit+0x44>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000816:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <HAL_MspInit+0x44>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081c:	6593      	str	r3, [r2, #88]	@ 0x58
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_MspInit+0x44>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <NMI_Handler+0x4>

08000844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <MemManage_Handler+0x4>

08000854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <UsageFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f893 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c4:	f7ff ffea 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	@ (8000900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	@ (800090c <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f000 ffdd 	bl	80018ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008f2:	f7ff fe01 	bl	80004f8 <main>

080008f6 <LoopForever>:

LoopForever:
    b LoopForever
 80008f6:	e7fe      	b.n	80008f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000904:	08001958 	.word	0x08001958
  ldr r2, =_sbss
 8000908:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800090c:	20000030 	.word	0x20000030

08000910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC1_2_IRQHandler>

08000912 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000918:	2300      	movs	r3, #0
 800091a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f91f 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000922:	2000      	movs	r0, #0
 8000924:	f000 f80e 	bl	8000944 <HAL_InitTick>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	e001      	b.n	8000938 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000934:	f7ff ff5e 	bl	80007f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000938:	79fb      	ldrb	r3, [r7, #7]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <HAL_InitTick+0x6c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d023      	beq.n	80009a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000958:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <HAL_InitTick+0x70>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <HAL_InitTick+0x6c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f91d 	bl	8000bae <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10f      	bne.n	800099a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d809      	bhi.n	8000994 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f8f5 	bl	8000b76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098c:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <HAL_InitTick+0x74>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e007      	b.n	80009a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	e001      	b.n	80009a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_IncTick+0x20>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_IncTick+0x24>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <HAL_IncTick+0x24>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	2000002c 	.word	0x2000002c

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	2000002c 	.word	0x2000002c

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db0a      	blt.n	8000a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	@ (8000aac <__NVIC_SetPriority+0x4c>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a88:	e00a      	b.n	8000aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	@ (8000ab0 <__NVIC_SetPriority+0x50>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	3b04      	subs	r3, #4
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	761a      	strb	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	@ 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f1c3 0307 	rsb	r3, r3, #7
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	bf28      	it	cs
 8000ad2:	2304      	movcs	r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d902      	bls.n	8000ae4 <NVIC_EncodePriority+0x30>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	e000      	b.n	8000ae6 <NVIC_EncodePriority+0x32>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43da      	mvns	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4313      	orrs	r3, r2
         );
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3724      	adds	r7, #36	@ 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f7ff ff8e 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff47 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff5c 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff8e 	bl	8000ab4 <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5d 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffb0 	bl	8000b1c <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bcc:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40007000 	.word	0x40007000

08000be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bf2:	d130      	bne.n	8000c56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf4:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c00:	d038      	beq.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c12:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2232      	movs	r2, #50	@ 0x32
 8000c18:	fb02 f303 	mul.w	r3, r2, r3
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	0c9b      	lsrs	r3, r3, #18
 8000c24:	3301      	adds	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c28:	e002      	b.n	8000c30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c3c:	d102      	bne.n	8000c44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1f2      	bne.n	8000c2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c50:	d110      	bne.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e00f      	b.n	8000c76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c62:	d007      	beq.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c64:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c6c:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40007000 	.word	0x40007000
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	431bde83 	.word	0x431bde83

08000c90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f000 bc08 	b.w	80014b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca4:	4b96      	ldr	r3, [pc, #600]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f003 030c 	and.w	r3, r3, #12
 8000cac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cae:	4b94      	ldr	r3, [pc, #592]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f000 80e4 	beq.w	8000e8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d007      	beq.n	8000cdc <HAL_RCC_OscConfig+0x4c>
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2b0c      	cmp	r3, #12
 8000cd0:	f040 808b 	bne.w	8000dea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	f040 8087 	bne.w	8000dea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cdc:	4b88      	ldr	r3, [pc, #544]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x64>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e3df      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a1a      	ldr	r2, [r3, #32]
 8000cf8:	4b81      	ldr	r3, [pc, #516]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d004      	beq.n	8000d0e <HAL_RCC_OscConfig+0x7e>
 8000d04:	4b7e      	ldr	r3, [pc, #504]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d0c:	e005      	b.n	8000d1a <HAL_RCC_OscConfig+0x8a>
 8000d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d14:	091b      	lsrs	r3, r3, #4
 8000d16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d223      	bcs.n	8000d66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fd5a 	bl	80017dc <RCC_SetFlashLatencyFromMSIRange>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e3c0      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d32:	4b73      	ldr	r3, [pc, #460]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a72      	ldr	r2, [pc, #456]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4b70      	ldr	r3, [pc, #448]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	496d      	ldr	r1, [pc, #436]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d50:	4b6b      	ldr	r3, [pc, #428]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	4968      	ldr	r1, [pc, #416]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
 8000d64:	e025      	b.n	8000db2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d66:	4b66      	ldr	r3, [pc, #408]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a65      	ldr	r2, [pc, #404]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b63      	ldr	r3, [pc, #396]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	4960      	ldr	r1, [pc, #384]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d84:	4b5e      	ldr	r3, [pc, #376]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	495b      	ldr	r1, [pc, #364]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d109      	bne.n	8000db2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a1b      	ldr	r3, [r3, #32]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 fd1a 	bl	80017dc <RCC_SetFlashLatencyFromMSIRange>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e380      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000db2:	f000 fc87 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 8000db6:	4602      	mov	r2, r0
 8000db8:	4b51      	ldr	r3, [pc, #324]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	4950      	ldr	r1, [pc, #320]	@ (8000f04 <HAL_RCC_OscConfig+0x274>)
 8000dc4:	5ccb      	ldrb	r3, [r1, r3]
 8000dc6:	f003 031f 	and.w	r3, r3, #31
 8000dca:	fa22 f303 	lsr.w	r3, r2, r3
 8000dce:	4a4e      	ldr	r2, [pc, #312]	@ (8000f08 <HAL_RCC_OscConfig+0x278>)
 8000dd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8000f0c <HAL_RCC_OscConfig+0x27c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fdb4 	bl	8000944 <HAL_InitTick>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d052      	beq.n	8000e8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	e364      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d032      	beq.n	8000e58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000df2:	4b43      	ldr	r3, [pc, #268]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a42      	ldr	r2, [pc, #264]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dfe:	f7ff fdf1 	bl	80009e4 <HAL_GetTick>
 8000e02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e06:	f7ff fded 	bl	80009e4 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e34d      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e18:	4b39      	ldr	r3, [pc, #228]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0f0      	beq.n	8000e06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a35      	ldr	r2, [pc, #212]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b33      	ldr	r3, [pc, #204]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	4930      	ldr	r1, [pc, #192]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e42:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	492b      	ldr	r1, [pc, #172]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e52:	4313      	orrs	r3, r2
 8000e54:	604b      	str	r3, [r1, #4]
 8000e56:	e01a      	b.n	8000e8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e58:	4b29      	ldr	r3, [pc, #164]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a28      	ldr	r2, [pc, #160]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e64:	f7ff fdbe 	bl	80009e4 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fdba 	bl	80009e4 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e31a      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e7e:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f0      	bne.n	8000e6c <HAL_RCC_OscConfig+0x1dc>
 8000e8a:	e000      	b.n	8000e8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d073      	beq.n	8000f82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	2b08      	cmp	r3, #8
 8000e9e:	d005      	beq.n	8000eac <HAL_RCC_OscConfig+0x21c>
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b0c      	cmp	r3, #12
 8000ea4:	d10e      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d10b      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d063      	beq.n	8000f80 <HAL_RCC_OscConfig+0x2f0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d15f      	bne.n	8000f80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e2f7      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ecc:	d106      	bne.n	8000edc <HAL_RCC_OscConfig+0x24c>
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e025      	b.n	8000f28 <HAL_RCC_OscConfig+0x298>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ee4:	d114      	bne.n	8000f10 <HAL_RCC_OscConfig+0x280>
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a02      	ldr	r2, [pc, #8]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e013      	b.n	8000f28 <HAL_RCC_OscConfig+0x298>
 8000f00:	40021000 	.word	0x40021000
 8000f04:	08001910 	.word	0x08001910
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000004 	.word	0x20000004
 8000f10:	4ba0      	ldr	r3, [pc, #640]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a9f      	ldr	r2, [pc, #636]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b9d      	ldr	r3, [pc, #628]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a9c      	ldr	r2, [pc, #624]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d013      	beq.n	8000f58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fd58 	bl	80009e4 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fd54 	bl	80009e4 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	@ 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e2b4      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f4a:	4b92      	ldr	r3, [pc, #584]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x2a8>
 8000f56:	e014      	b.n	8000f82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f58:	f7ff fd44 	bl	80009e4 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fd40 	bl	80009e4 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	@ 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e2a0      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f72:	4b88      	ldr	r3, [pc, #544]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x2d0>
 8000f7e:	e000      	b.n	8000f82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d060      	beq.n	8001050 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x310>
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	2b0c      	cmp	r3, #12
 8000f98:	d119      	bne.n	8000fce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d116      	bne.n	8000fce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa0:	4b7c      	ldr	r3, [pc, #496]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d005      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x328>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e27d      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb8:	4b76      	ldr	r3, [pc, #472]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	4973      	ldr	r1, [pc, #460]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fcc:	e040      	b.n	8001050 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d023      	beq.n	800101e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd6:	4b6f      	ldr	r3, [pc, #444]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a6e      	ldr	r2, [pc, #440]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fcff 	bl	80009e4 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fea:	f7ff fcfb 	bl	80009e4 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e25b      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ffc:	4b65      	ldr	r3, [pc, #404]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001008:	4b62      	ldr	r3, [pc, #392]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	061b      	lsls	r3, r3, #24
 8001016:	495f      	ldr	r1, [pc, #380]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
 800101c:	e018      	b.n	8001050 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800101e:	4b5d      	ldr	r3, [pc, #372]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a5c      	ldr	r2, [pc, #368]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102a:	f7ff fcdb 	bl	80009e4 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001032:	f7ff fcd7 	bl	80009e4 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e237      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001044:	4b53      	ldr	r3, [pc, #332]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f0      	bne.n	8001032 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	2b00      	cmp	r3, #0
 800105a:	d03c      	beq.n	80010d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01c      	beq.n	800109e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001064:	4b4b      	ldr	r3, [pc, #300]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800106a:	4a4a      	ldr	r2, [pc, #296]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001074:	f7ff fcb6 	bl	80009e4 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800107c:	f7ff fcb2 	bl	80009e4 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e212      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800108e:	4b41      	ldr	r3, [pc, #260]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0ef      	beq.n	800107c <HAL_RCC_OscConfig+0x3ec>
 800109c:	e01b      	b.n	80010d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109e:	4b3d      	ldr	r3, [pc, #244]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ae:	f7ff fc99 	bl	80009e4 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc95 	bl	80009e4 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e1f5      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010c8:	4b32      	ldr	r3, [pc, #200]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1ef      	bne.n	80010b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80a6 	beq.w	8001230 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10d      	bne.n	8001110 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f8:	4a26      	ldr	r2, [pc, #152]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800110c:	2301      	movs	r3, #1
 800110e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001110:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <HAL_RCC_OscConfig+0x508>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001118:	2b00      	cmp	r3, #0
 800111a:	d118      	bne.n	800114e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800111c:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <HAL_RCC_OscConfig+0x508>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1d      	ldr	r2, [pc, #116]	@ (8001198 <HAL_RCC_OscConfig+0x508>)
 8001122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001126:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001128:	f7ff fc5c 	bl	80009e4 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001130:	f7ff fc58 	bl	80009e4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e1b8      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <HAL_RCC_OscConfig+0x508>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d108      	bne.n	8001168 <HAL_RCC_OscConfig+0x4d8>
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001166:	e029      	b.n	80011bc <HAL_RCC_OscConfig+0x52c>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b05      	cmp	r3, #5
 800116e:	d115      	bne.n	800119c <HAL_RCC_OscConfig+0x50c>
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001176:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001186:	4a03      	ldr	r2, [pc, #12]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001190:	e014      	b.n	80011bc <HAL_RCC_OscConfig+0x52c>
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	40007000 	.word	0x40007000
 800119c:	4b9d      	ldr	r3, [pc, #628]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 800119e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a2:	4a9c      	ldr	r2, [pc, #624]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011ac:	4b99      	ldr	r3, [pc, #612]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 80011ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011b2:	4a98      	ldr	r2, [pc, #608]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d016      	beq.n	80011f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c4:	f7ff fc0e 	bl	80009e4 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ca:	e00a      	b.n	80011e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011cc:	f7ff fc0a 	bl	80009e4 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011da:	4293      	cmp	r3, r2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e168      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 80011e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0ed      	beq.n	80011cc <HAL_RCC_OscConfig+0x53c>
 80011f0:	e015      	b.n	800121e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f2:	f7ff fbf7 	bl	80009e4 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fbf3 	bl	80009e4 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e151      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001210:	4b80      	ldr	r3, [pc, #512]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 8001212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1ed      	bne.n	80011fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d105      	bne.n	8001230 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001224:	4b7b      	ldr	r3, [pc, #492]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001228:	4a7a      	ldr	r2, [pc, #488]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 800122a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800122e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0320 	and.w	r3, r3, #32
 8001238:	2b00      	cmp	r3, #0
 800123a:	d03c      	beq.n	80012b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01c      	beq.n	800127e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001244:	4b73      	ldr	r3, [pc, #460]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 8001246:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800124a:	4a72      	ldr	r2, [pc, #456]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff fbc6 	bl	80009e4 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800125c:	f7ff fbc2 	bl	80009e4 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e122      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800126e:	4b69      	ldr	r3, [pc, #420]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 8001270:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0ef      	beq.n	800125c <HAL_RCC_OscConfig+0x5cc>
 800127c:	e01b      	b.n	80012b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800127e:	4b65      	ldr	r3, [pc, #404]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 8001280:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001284:	4a63      	ldr	r2, [pc, #396]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 8001286:	f023 0301 	bic.w	r3, r3, #1
 800128a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128e:	f7ff fba9 	bl	80009e4 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001296:	f7ff fba5 	bl	80009e4 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e105      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 80012aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1ef      	bne.n	8001296 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80f9 	beq.w	80014b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	f040 80cf 	bne.w	8001468 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012ca:	4b52      	ldr	r3, [pc, #328]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f003 0203 	and.w	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012da:	429a      	cmp	r2, r3
 80012dc:	d12c      	bne.n	8001338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e8:	3b01      	subs	r3, #1
 80012ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d123      	bne.n	8001338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d11b      	bne.n	8001338 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800130a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800130c:	429a      	cmp	r2, r3
 800130e:	d113      	bne.n	8001338 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800131a:	085b      	lsrs	r3, r3, #1
 800131c:	3b01      	subs	r3, #1
 800131e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001320:	429a      	cmp	r2, r3
 8001322:	d109      	bne.n	8001338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	085b      	lsrs	r3, r3, #1
 8001330:	3b01      	subs	r3, #1
 8001332:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001334:	429a      	cmp	r2, r3
 8001336:	d071      	beq.n	800141c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2b0c      	cmp	r3, #12
 800133c:	d068      	beq.n	8001410 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800133e:	4b35      	ldr	r3, [pc, #212]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800134a:	4b32      	ldr	r3, [pc, #200]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0ac      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800135a:	4b2e      	ldr	r3, [pc, #184]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a2d      	ldr	r2, [pc, #180]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 8001360:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001364:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001366:	f7ff fb3d 	bl	80009e4 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fb39 	bl	80009e4 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e099      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001380:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <HAL_RCC_OscConfig+0x788>)
 8001392:	4013      	ands	r3, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800139c:	3a01      	subs	r2, #1
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	4311      	orrs	r1, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013a6:	0212      	lsls	r2, r2, #8
 80013a8:	4311      	orrs	r1, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80013ae:	0852      	lsrs	r2, r2, #1
 80013b0:	3a01      	subs	r2, #1
 80013b2:	0552      	lsls	r2, r2, #21
 80013b4:	4311      	orrs	r1, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013ba:	0852      	lsrs	r2, r2, #1
 80013bc:	3a01      	subs	r2, #1
 80013be:	0652      	lsls	r2, r2, #25
 80013c0:	4311      	orrs	r1, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013c6:	06d2      	lsls	r2, r2, #27
 80013c8:	430a      	orrs	r2, r1
 80013ca:	4912      	ldr	r1, [pc, #72]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013d0:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 80013d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 80013e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013e8:	f7ff fafc 	bl	80009e4 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff faf8 	bl	80009e4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e058      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800140e:	e050      	b.n	80014b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e04f      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
 8001414:	40021000 	.word	0x40021000
 8001418:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141c:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <HAL_RCC_OscConfig+0x82c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d144      	bne.n	80014b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001428:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <HAL_RCC_OscConfig+0x82c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a23      	ldr	r2, [pc, #140]	@ (80014bc <HAL_RCC_OscConfig+0x82c>)
 800142e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001432:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001434:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <HAL_RCC_OscConfig+0x82c>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	4a20      	ldr	r2, [pc, #128]	@ (80014bc <HAL_RCC_OscConfig+0x82c>)
 800143a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800143e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001440:	f7ff fad0 	bl	80009e4 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001448:	f7ff facc 	bl	80009e4 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e02c      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_RCC_OscConfig+0x82c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x7b8>
 8001466:	e024      	b.n	80014b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d01f      	beq.n	80014ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <HAL_RCC_OscConfig+0x82c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <HAL_RCC_OscConfig+0x82c>)
 8001474:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff fab3 	bl	80009e4 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff faaf 	bl	80009e4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e00f      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <HAL_RCC_OscConfig+0x82c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_RCC_OscConfig+0x82c>)
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	4905      	ldr	r1, [pc, #20]	@ (80014bc <HAL_RCC_OscConfig+0x82c>)
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_RCC_OscConfig+0x830>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	60cb      	str	r3, [r1, #12]
 80014ac:	e001      	b.n	80014b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021000 	.word	0x40021000
 80014c0:	feeefffc 	.word	0xfeeefffc

080014c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0e7      	b.n	80016a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	4b75      	ldr	r3, [pc, #468]	@ (80016b0 <HAL_RCC_ClockConfig+0x1ec>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d910      	bls.n	8001508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b72      	ldr	r3, [pc, #456]	@ (80016b0 <HAL_RCC_ClockConfig+0x1ec>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 0207 	bic.w	r2, r3, #7
 80014ee:	4970      	ldr	r1, [pc, #448]	@ (80016b0 <HAL_RCC_ClockConfig+0x1ec>)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f6:	4b6e      	ldr	r3, [pc, #440]	@ (80016b0 <HAL_RCC_ClockConfig+0x1ec>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0cf      	b.n	80016a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d010      	beq.n	8001536 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4b66      	ldr	r3, [pc, #408]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001520:	429a      	cmp	r2, r3
 8001522:	d908      	bls.n	8001536 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001524:	4b63      	ldr	r3, [pc, #396]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	4960      	ldr	r1, [pc, #384]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d04c      	beq.n	80015dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154a:	4b5a      	ldr	r3, [pc, #360]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d121      	bne.n	800159a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0a6      	b.n	80016a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001562:	4b54      	ldr	r3, [pc, #336]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d115      	bne.n	800159a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e09a      	b.n	80016a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d107      	bne.n	800158a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800157a:	4b4e      	ldr	r3, [pc, #312]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e08e      	b.n	80016a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158a:	4b4a      	ldr	r3, [pc, #296]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e086      	b.n	80016a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800159a:	4b46      	ldr	r3, [pc, #280]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f023 0203 	bic.w	r2, r3, #3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4943      	ldr	r1, [pc, #268]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015ac:	f7ff fa1a 	bl	80009e4 <HAL_GetTick>
 80015b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b4:	f7ff fa16 	bl	80009e4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e06e      	b.n	80016a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ca:	4b3a      	ldr	r3, [pc, #232]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 020c 	and.w	r2, r3, #12
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	429a      	cmp	r2, r3
 80015da:	d1eb      	bne.n	80015b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d010      	beq.n	800160a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d208      	bcs.n	800160a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f8:	4b2e      	ldr	r3, [pc, #184]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	492b      	ldr	r1, [pc, #172]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800160a:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <HAL_RCC_ClockConfig+0x1ec>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d210      	bcs.n	800163a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001618:	4b25      	ldr	r3, [pc, #148]	@ (80016b0 <HAL_RCC_ClockConfig+0x1ec>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 0207 	bic.w	r2, r3, #7
 8001620:	4923      	ldr	r1, [pc, #140]	@ (80016b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001628:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <HAL_RCC_ClockConfig+0x1ec>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d001      	beq.n	800163a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e036      	b.n	80016a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001646:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	4918      	ldr	r1, [pc, #96]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d009      	beq.n	8001678 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4910      	ldr	r1, [pc, #64]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001678:	f000 f824 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 800167c:	4602      	mov	r2, r0
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	490b      	ldr	r1, [pc, #44]	@ (80016b8 <HAL_RCC_ClockConfig+0x1f4>)
 800168a:	5ccb      	ldrb	r3, [r1, r3]
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <HAL_RCC_ClockConfig+0x1f8>)
 8001696:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_RCC_ClockConfig+0x1fc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff f951 	bl	8000944 <HAL_InitTick>
 80016a2:	4603      	mov	r3, r0
 80016a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80016a6:	7afb      	ldrb	r3, [r7, #11]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40022000 	.word	0x40022000
 80016b4:	40021000 	.word	0x40021000
 80016b8:	08001910 	.word	0x08001910
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d2:	4b3e      	ldr	r3, [pc, #248]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x108>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016dc:	4b3b      	ldr	r3, [pc, #236]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x108>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x34>
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d121      	bne.n	8001736 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d11e      	bne.n	8001736 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016f8:	4b34      	ldr	r3, [pc, #208]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x108>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001704:	4b31      	ldr	r3, [pc, #196]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	e005      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001714:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001720:	4a2b      	ldr	r2, [pc, #172]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001728:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10d      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001734:	e00a      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d102      	bne.n	8001742 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800173c:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	e004      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b08      	cmp	r3, #8
 8001746:	d101      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001748:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800174a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	2b0c      	cmp	r3, #12
 8001750:	d134      	bne.n	80017bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001752:	4b1e      	ldr	r3, [pc, #120]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d003      	beq.n	800176a <HAL_RCC_GetSysClockFreq+0xa6>
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d003      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0xac>
 8001768:	e005      	b.n	8001776 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800176a:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800176c:	617b      	str	r3, [r7, #20]
      break;
 800176e:	e005      	b.n	800177c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001770:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001772:	617b      	str	r3, [r7, #20]
      break;
 8001774:	e002      	b.n	800177c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	617b      	str	r3, [r7, #20]
      break;
 800177a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x108>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	3301      	adds	r3, #1
 8001788:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x108>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	fb03 f202 	mul.w	r2, r3, r2
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x108>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	0e5b      	lsrs	r3, r3, #25
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	3301      	adds	r3, #1
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017bc:	69bb      	ldr	r3, [r7, #24]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	@ 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	08001920 	.word	0x08001920
 80017d4:	00f42400 	.word	0x00f42400
 80017d8:	007a1200 	.word	0x007a1200

080017dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017f4:	f7ff f9e8 	bl	8000bc8 <HAL_PWREx_GetVoltageRange>
 80017f8:	6178      	str	r0, [r7, #20]
 80017fa:	e014      	b.n	8001826 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017fc:	4b25      	ldr	r3, [pc, #148]	@ (8001894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001800:	4a24      	ldr	r2, [pc, #144]	@ (8001894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001806:	6593      	str	r3, [r2, #88]	@ 0x58
 8001808:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001814:	f7ff f9d8 	bl	8000bc8 <HAL_PWREx_GetVoltageRange>
 8001818:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800181a:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181e:	4a1d      	ldr	r2, [pc, #116]	@ (8001894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001824:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800182c:	d10b      	bne.n	8001846 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b80      	cmp	r3, #128	@ 0x80
 8001832:	d919      	bls.n	8001868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2ba0      	cmp	r3, #160	@ 0xa0
 8001838:	d902      	bls.n	8001840 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800183a:	2302      	movs	r3, #2
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	e013      	b.n	8001868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001840:	2301      	movs	r3, #1
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	e010      	b.n	8001868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b80      	cmp	r3, #128	@ 0x80
 800184a:	d902      	bls.n	8001852 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800184c:	2303      	movs	r3, #3
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	e00a      	b.n	8001868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b80      	cmp	r3, #128	@ 0x80
 8001856:	d102      	bne.n	800185e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001858:	2302      	movs	r3, #2
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	e004      	b.n	8001868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b70      	cmp	r3, #112	@ 0x70
 8001862:	d101      	bne.n	8001868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001864:	2301      	movs	r3, #1
 8001866:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 0207 	bic.w	r2, r3, #7
 8001870:	4909      	ldr	r1, [pc, #36]	@ (8001898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	429a      	cmp	r2, r3
 8001884:	d001      	beq.n	800188a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	40022000 	.word	0x40022000

0800189c <memset>:
 800189c:	4402      	add	r2, r0
 800189e:	4603      	mov	r3, r0
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d100      	bne.n	80018a6 <memset+0xa>
 80018a4:	4770      	bx	lr
 80018a6:	f803 1b01 	strb.w	r1, [r3], #1
 80018aa:	e7f9      	b.n	80018a0 <memset+0x4>

080018ac <__libc_init_array>:
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	4d0d      	ldr	r5, [pc, #52]	@ (80018e4 <__libc_init_array+0x38>)
 80018b0:	4c0d      	ldr	r4, [pc, #52]	@ (80018e8 <__libc_init_array+0x3c>)
 80018b2:	1b64      	subs	r4, r4, r5
 80018b4:	10a4      	asrs	r4, r4, #2
 80018b6:	2600      	movs	r6, #0
 80018b8:	42a6      	cmp	r6, r4
 80018ba:	d109      	bne.n	80018d0 <__libc_init_array+0x24>
 80018bc:	4d0b      	ldr	r5, [pc, #44]	@ (80018ec <__libc_init_array+0x40>)
 80018be:	4c0c      	ldr	r4, [pc, #48]	@ (80018f0 <__libc_init_array+0x44>)
 80018c0:	f000 f818 	bl	80018f4 <_init>
 80018c4:	1b64      	subs	r4, r4, r5
 80018c6:	10a4      	asrs	r4, r4, #2
 80018c8:	2600      	movs	r6, #0
 80018ca:	42a6      	cmp	r6, r4
 80018cc:	d105      	bne.n	80018da <__libc_init_array+0x2e>
 80018ce:	bd70      	pop	{r4, r5, r6, pc}
 80018d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018d4:	4798      	blx	r3
 80018d6:	3601      	adds	r6, #1
 80018d8:	e7ee      	b.n	80018b8 <__libc_init_array+0xc>
 80018da:	f855 3b04 	ldr.w	r3, [r5], #4
 80018de:	4798      	blx	r3
 80018e0:	3601      	adds	r6, #1
 80018e2:	e7f2      	b.n	80018ca <__libc_init_array+0x1e>
 80018e4:	08001950 	.word	0x08001950
 80018e8:	08001950 	.word	0x08001950
 80018ec:	08001950 	.word	0x08001950
 80018f0:	08001954 	.word	0x08001954

080018f4 <_init>:
 80018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f6:	bf00      	nop
 80018f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018fa:	bc08      	pop	{r3}
 80018fc:	469e      	mov	lr, r3
 80018fe:	4770      	bx	lr

08001900 <_fini>:
 8001900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001902:	bf00      	nop
 8001904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001906:	bc08      	pop	{r3}
 8001908:	469e      	mov	lr, r3
 800190a:	4770      	bx	lr
